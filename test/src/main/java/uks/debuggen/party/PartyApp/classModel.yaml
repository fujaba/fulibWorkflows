- c: 	org.fulib.classmodel.ClassModel
  classes: 	partyAppModel 	partyAppBusinessLogic 	partyAppBuilder 	partyAppService
  defaultCollectionType: 	c1
  defaultPropertyStyle: 	Bean
  defaultRoleType: 	"java.util.ArrayList<%s>"
  mainJavaDir: 	"test/src/main/java"
  packageName: 	uks.debuggen.party.PartyApp
  packageSrcFolder: 	"test/src/main/java/uks/debuggen/party/PartyApp"

- partyAppModel: 	org.fulib.classmodel.Clazz
  attributes: 	partyAppModel_modelMap
  importList: 	"import java.util.LinkedHashMap;"
  imports: 	"import java.util.LinkedHashMap;"
  model: 	c
  modified: 	false
  name: 	PartyAppModel
  propertyStyle: 	Bean

- partyAppBusinessLogic: 	org.fulib.classmodel.Clazz
  attributes: 	partyAppBusinessLogic_model 	partyAppBusinessLogic_handlerMap
  importList: 	"import java.util.LinkedHashMap;" 	"import java.util.function.Consumer;" 	"import uks.debuggen.party.events.*;"
  imports: 	"import java.util.LinkedHashMap;" 	"import java.util.function.Consumer;" 	"import uks.debuggen.party.events.*;"
  methods: 	partyAppBusinessLogic_handleLoginCommand 	partyAppBusinessLogic_handleDemoLoginCommand 	partyAppBusinessLogic_initEventHandlerMap 	partyAppBusinessLogic_ignoreEvent 	partyAppBusinessLogic_getHandler
  model: 	c
  modified: 	false
  name: 	PartyAppBusinessLogic
  propertyStyle: 	Bean
  roles: 	partyAppBusinessLogic_builder 	partyAppBusinessLogic_service

- partyAppBuilder: 	org.fulib.classmodel.Clazz
  attributes: 	partyAppBuilder_model
  importList: 	"import java.util.LinkedHashMap;" 	"import java.util.function.Consumer;" 	"import uks.debuggen.party.events.*;"
  imports: 	"import java.util.LinkedHashMap;" 	"import java.util.function.Consumer;" 	"import uks.debuggen.party.events.*;"
  methods: 	partyAppBuilder_stripBrackets
  model: 	c
  modified: 	false
  name: 	PartyAppBuilder
  propertyStyle: 	Bean
  roles: 	partyAppBuilder_businessLogic

- partyAppService: 	org.fulib.classmodel.Clazz
  attributes: 	partyAppService_history 	partyAppService_port 	partyAppService_spark 	partyAppService_model
  importList: 	"import java.util.LinkedHashMap;" 	"import java.util.Map;" 	"import java.util.function.Consumer;" 	"import uks.debuggen.party.events.*;" 	"import org.fulib.yaml.Yaml;" 	"import spark.Service;" 	"import spark.Request;" 	"import spark.Response;" 	"import com.mashape.unirest.http.HttpResponse;" 	"import com.mashape.unirest.http.Unirest;" 	"import com.mashape.unirest.http.exceptions.UnirestException;" 	"import java.util.concurrent.ExecutorService;" 	"import java.util.concurrent.Executors;" 	"import java.util.logging.Logger;" 	"import java.util.logging.Level;"
  imports: 	"import java.util.LinkedHashMap;" 	"import java.util.Map;" 	"import java.util.function.Consumer;" 	"import uks.debuggen.party.events.*;" 	"import org.fulib.yaml.Yaml;" 	"import spark.Service;" 	"import spark.Request;" 	"import spark.Response;" 	"import com.mashape.unirest.http.HttpResponse;" 	"import com.mashape.unirest.http.Unirest;" 	"import com.mashape.unirest.http.exceptions.UnirestException;" 	"import java.util.concurrent.ExecutorService;" 	"import java.util.concurrent.Executors;" 	"import java.util.logging.Logger;" 	"import java.util.logging.Level;"
  methods: 	partyAppService_start 	partyAppService_getHello 	partyAppService_subscribeAndLoadOldEvents 	partyAppService_apply 	partyAppService_getPage 	partyAppService_getDemoPage 	partyAppService_publish 	partyAppService_postApply
  model: 	c
  modified: 	false
  name: 	PartyAppService
  propertyStyle: 	Bean
  roles: 	partyAppService_businessLogic

- c1: 	org.fulib.classmodel.CollectionType
  implClass: 	class java.util.ArrayList
  implTemplate: 	"java.util.ArrayList<%s>"
  itf: 	org.fulib.classmodel.CollectionInterface.List
  qualifiedImplName: 	java.util.ArrayList
  simpleImplName: 	ArrayList

- partyAppModel_modelMap: 	org.fulib.classmodel.Attribute
  clazz: 	partyAppModel
  id: 	PartyAppModel_modelMap
  initialization: 	"new LinkedHashMap<>()"
  modified: 	false
  name: 	modelMap
  propertyStyle: 	Bean
  type: 	"LinkedHashMap<String, Object>"
  typeSignature: 	"LinkedHashMap<String,Object>"

- partyAppBusinessLogic_model: 	org.fulib.classmodel.Attribute
  clazz: 	partyAppBusinessLogic
  id: 	PartyAppBusinessLogic_model
  modified: 	false
  name: 	model
  propertyStyle: 	Bean
  type: 	PartyAppModel
  typeSignature: 	PartyAppModel

- partyAppBusinessLogic_handlerMap: 	org.fulib.classmodel.Attribute
  clazz: 	partyAppBusinessLogic
  id: 	PartyAppBusinessLogic_handlerMap
  modified: 	false
  name: 	handlerMap
  propertyStyle: 	Bean
  type: 	"LinkedHashMap<Class, Consumer<Event>>"
  typeSignature: 	"LinkedHashMap<Class,Consumer<Event>>"

- partyAppBusinessLogic_handleLoginCommand: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	partyAppBusinessLogic
  declaration: 	"private void handleLoginCommand(Event e)"
  id: 	PartyAppBusinessLogic_handleLoginCommand
  methodBody: 	"// no fulib
LoginCommand event = (LoginCommand) e;
handleDemoLoginCommand(event);
"
  modified: 	false
  modifiers: 	private
  name: 	handleLoginCommand
  paramsString: 	"Event e"
  returnType: 	void
  signature: 	"class/PartyAppBusinessLogic/method/handleLoginCommand(Event)"

- partyAppBusinessLogic_handleDemoLoginCommand: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	partyAppBusinessLogic
  declaration: 	"private void handleDemoLoginCommand(LoginCommand event)"
  id: 	PartyAppBusinessLogic_handleDemoLoginCommand
  methodBody: 	"if (event.getId().equals(\"12:01\")) {

   LoginSucceededEvent e1210 = new LoginSucceededEvent();

   e1210.setId(\"12:10\");
   e1210.setName(\"Alice\");
   service.apply(e1210);
}
"
  modified: 	false
  modifiers: 	private
  name: 	handleDemoLoginCommand
  paramsString: 	"LoginCommand event"
  returnType: 	void
  signature: 	"class/PartyAppBusinessLogic/method/handleDemoLoginCommand(LoginCommand)"

- partyAppBusinessLogic_initEventHandlerMap: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	partyAppBusinessLogic
  declaration: 	"public void initEventHandlerMap()"
  id: 	PartyAppBusinessLogic_initEventHandlerMap
  methodBody: 	"if (handlerMap == null) {
   handlerMap = new LinkedHashMap<>();
   handlerMap.put(LoginCommand.class, this::handleLoginCommand);
}
"
  modified: 	false
  modifiers: 	public
  name: 	initEventHandlerMap
  paramsString: 	""
  returnType: 	void
  signature: 	"class/PartyAppBusinessLogic/method/initEventHandlerMap()"

- partyAppBusinessLogic_ignoreEvent: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	partyAppBusinessLogic
  declaration: 	"private void ignoreEvent(Event event)"
  id: 	PartyAppBusinessLogic_ignoreEvent
  methodBody: 	"// empty
"
  modified: 	false
  modifiers: 	private
  name: 	ignoreEvent
  paramsString: 	"Event event"
  returnType: 	void
  signature: 	"class/PartyAppBusinessLogic/method/ignoreEvent(Event)"

- partyAppBusinessLogic_getHandler: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	partyAppBusinessLogic
  declaration: 	"public Consumer<Event> getHandler(Event event)"
  id: 	PartyAppBusinessLogic_getHandler
  methodBody: 	"return getHandlerMap().computeIfAbsent(event.getClass(), k -> this::ignoreEvent);
"
  modified: 	false
  modifiers: 	public
  name: 	getHandler
  paramsString: 	"Event event"
  returnType: 	"Consumer<Event>"
  signature: 	"class/PartyAppBusinessLogic/method/getHandler(Event)"

- partyAppBusinessLogic_builder: 	org.fulib.classmodel.AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	partyAppBusinessLogic
  id: 	PartyAppBusinessLogic_builder
  modified: 	false
  name: 	builder
  other: 	partyAppBuilder_businessLogic
  propertyStyle: 	Bean

- partyAppBusinessLogic_service: 	org.fulib.classmodel.AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	partyAppBusinessLogic
  id: 	PartyAppBusinessLogic_service
  modified: 	false
  name: 	service
  other: 	partyAppService_businessLogic
  propertyStyle: 	Bean

- partyAppBuilder_model: 	org.fulib.classmodel.Attribute
  clazz: 	partyAppBuilder
  id: 	PartyAppBuilder_model
  modified: 	false
  name: 	model
  propertyStyle: 	Bean
  type: 	PartyAppModel
  typeSignature: 	PartyAppModel

- partyAppBuilder_stripBrackets: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	partyAppBuilder
  declaration: 	"public String stripBrackets(String back)"
  id: 	PartyAppBuilder_stripBrackets
  methodBody: 	"      if (back == null) {
         return \"\";
      }
      int open = back.indexOf('[');
      int close = back.indexOf(']');
      if (open >= 0 && close >= 0) {
         back = back.substring(open + 1, close);
      }
      return back;"
  modified: 	false
  modifiers: 	public
  name: 	stripBrackets
  paramsString: 	"String back"
  returnType: 	String
  signature: 	"class/PartyAppBuilder/method/stripBrackets(String)"

- partyAppBuilder_businessLogic: 	org.fulib.classmodel.AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	partyAppBuilder
  id: 	PartyAppBuilder_businessLogic
  modified: 	false
  name: 	businessLogic
  other: 	partyAppBusinessLogic_builder
  propertyStyle: 	Bean

- partyAppService_history: 	org.fulib.classmodel.Attribute
  clazz: 	partyAppService
  id: 	PartyAppService_history
  initialization: 	"new LinkedHashMap<>()"
  modified: 	false
  name: 	history
  propertyStyle: 	Bean
  type: 	"LinkedHashMap<String, Event>"
  typeSignature: 	"LinkedHashMap<String,Event>"

- partyAppService_port: 	org.fulib.classmodel.Attribute
  clazz: 	partyAppService
  id: 	PartyAppService_port
  initialization: 	42001
  modified: 	false
  name: 	port
  propertyStyle: 	Bean
  type: 	int
  typeSignature: 	int

- partyAppService_spark: 	org.fulib.classmodel.Attribute
  clazz: 	partyAppService
  id: 	PartyAppService_spark
  modified: 	false
  name: 	spark
  propertyStyle: 	Bean
  type: 	Service
  typeSignature: 	Service

- partyAppService_model: 	org.fulib.classmodel.Attribute
  clazz: 	partyAppService
  id: 	PartyAppService_model
  modified: 	false
  name: 	model
  propertyStyle: 	Bean
  type: 	PartyAppModel
  typeSignature: 	PartyAppModel

- partyAppService_start: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	partyAppService
  declaration: 	"public void start()"
  id: 	PartyAppService_start
  methodBody: 	"model = new PartyAppModel();
setBusinessLogic(new PartyAppBusinessLogic());
businessLogic.setBuilder(new PartyAppBuilder().setModel(model));
businessLogic.setModel(model);
ExecutorService executor = Executors.newSingleThreadExecutor();
spark = Service.ignite();
spark.port(port);
spark.get(\"/page/:id\", (req, res) -> executor.submit(() -> this.getPage(req, res)).get());
spark.get(\"/\", (req, res) -> executor.submit(() -> this.getHello(req, res)).get());
spark.post(\"/apply\", (req, res) -> executor.submit(() -> this.postApply(req, res)).get());
executor.submit(this::subscribeAndLoadOldEvents);
Logger.getGlobal().info(\"PartyApp service is up and running on port \" + port);
"
  modified: 	false
  modifiers: 	public
  name: 	start
  paramsString: 	""
  returnType: 	void
  signature: 	"class/PartyAppService/method/start()"

- partyAppService_getHello: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	partyAppService
  declaration: 	"private String getHello(Request req, Response res)"
  id: 	PartyAppService_getHello
  methodBody: 	"try {
   String events = Yaml.encode(getHistory().values().toArray());
   String objects = Yaml.encode(model.getModelMap().values().toArray());
   return \"<p id='PartyApp'>This is the PartyApp service. </p>\n\" +
         \"<pre id=\\"history\\">\" + events + \"</pre>\n\" +
         \"<pre id=\\"data\\">\" + objects + \"</pre>\n\" +
         \"\";
}
catch (Exception e) {
   Logger.getGlobal().log(Level.SEVERE, e.getMessage(), e);
   return \"PartyApp Error \" + e.getMessage();
}
"
  modified: 	false
  modifiers: 	private
  name: 	getHello
  paramsString: 	"Request req, Response res"
  returnType: 	String
  signature: 	"class/PartyAppService/method/getHello(Request,Response)"

- partyAppService_subscribeAndLoadOldEvents: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	partyAppService
  declaration: 	"private void subscribeAndLoadOldEvents()"
  id: 	PartyAppService_subscribeAndLoadOldEvents
  methodBody: 	"ServiceSubscribed serviceSubscribed = new ServiceSubscribed()
      .setServiceUrl(\"http://localhost:42001/apply\");
String json = Yaml.encode(serviceSubscribed);
try {
   String url = \"http://localhost:42000/subscribe\";
   HttpResponse<String> response = Unirest
         .post(url)
         .body(json)
         .asString();
   String body = response.getBody();
   Map<String, Object> objectMap = Yaml.decode(body);
   for (Object obj : objectMap.values()) {
      apply((Event) obj);
   }
}
catch (UnirestException e) {
   e.printStackTrace();
}"
  modified: 	false
  modifiers: 	private
  name: 	subscribeAndLoadOldEvents
  paramsString: 	""
  returnType: 	void
  signature: 	"class/PartyAppService/method/subscribeAndLoadOldEvents()"

- partyAppService_apply: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	partyAppService
  declaration: 	"public void apply(Event event)"
  id: 	PartyAppService_apply
  methodBody: 	"if (history.get(event.getId()) != null) {
   return;
}
businessLogic.initEventHandlerMap();
Consumer<Event> handler = businessLogic.getHandler(event);
handler.accept(event);
history.put(event.getId(), event);
publish(event);"
  modified: 	false
  modifiers: 	public
  name: 	apply
  paramsString: 	"Event event"
  returnType: 	void
  signature: 	"class/PartyAppService/method/apply(Event)"

- partyAppService_getPage: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	partyAppService
  declaration: 	"public String getPage(Request request, Response response)"
  id: 	PartyAppService_getPage
  methodBody: 	"// no fulib
// add your page handling here
return getDemoPage(request, response);
"
  modified: 	false
  modifiers: 	public
  name: 	getPage
  paramsString: 	"Request request, Response response"
  returnType: 	String
  signature: 	"class/PartyAppService/method/getPage(Request,Response)"

- partyAppService_getDemoPage: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	partyAppService
  declaration: 	"public String getDemoPage(Request request, Response response)"
  id: 	PartyAppService_getDemoPage
  methodBody: 	"StringBuilder html = new StringBuilder();
String id = request.params(\"id\");
String event = request.queryParams(\"event\");

if (\"login 12:01\".equals(event)) {

   // create LoginCommand: login 12:01
   LoginCommand e1201 = new LoginCommand();
   e1201.setId(\"12:01\");
   e1201.setName(request.queryParams(\"name\"));
   apply(e1201);
}



// 12:00
if (id.equals(\"12_00\")) {
   html.append(\"<form action=\\"/page/next_page\\" method=\\"get\\">\n\");
   // PartyApp 12:00
   html.append(\"   <p>Welcome to the parties</p>\n\");
   html.append(\"   <p>What's your name?</p>\n\");
   html.append(\"   <p><input id=\\"name\\" name=\\"name\\" placeholder=\\"name?\\"></p>\n\");
   html.append(\"   <p><input id=\\"event\\" name=\\"event\\" type=\\"hidden\\" value=\\"login 12:01\\"></p>\n\");
   html.append(\"   <p><input id=\\"ok\\" name=\\"button\\" type=\\"submit\\" value=\\"ok\\"></p>\n\");
   html.append(\"</form>\n\");
   return html.toString();
}



html.append(\"This is the Shop Service page \" + id + \"\n\");
return html.toString();"
  modified: 	false
  modifiers: 	public
  name: 	getDemoPage
  paramsString: 	"Request request, Response response"
  returnType: 	String
  signature: 	"class/PartyAppService/method/getDemoPage(Request,Response)"

- partyAppService_publish: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	partyAppService
  declaration: 	"public void publish(Event event)"
  id: 	PartyAppService_publish
  methodBody: 	"String json = Yaml.encode(event);

try {
   HttpResponse<String> response = Unirest
         .post(\"http://localhost:42000/publish\")
         .body(json)
         .asString();
}
catch (UnirestException e) {
   e.printStackTrace();
}"
  modified: 	false
  modifiers: 	public
  name: 	publish
  paramsString: 	"Event event"
  returnType: 	void
  signature: 	"class/PartyAppService/method/publish(Event)"

- partyAppService_postApply: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	partyAppService
  declaration: 	"private String postApply(Request req, Response res)"
  id: 	PartyAppService_postApply
  methodBody: 	"      try {
         String body = req.body();
         Map<String, Object> map = Yaml.decode(body);
         for (Object value : map.values()) {
            Event event = (Event) value;
            apply(event);
         }
      }
      catch (Exception e) {
         Logger.getGlobal().log(Level.SEVERE, \"postApply failed\", e);
      }
      return \"apply done\";"
  modified: 	false
  modifiers: 	private
  name: 	postApply
  paramsString: 	"Request req, Response res"
  returnType: 	String
  signature: 	"class/PartyAppService/method/postApply(Request,Response)"

- partyAppService_businessLogic: 	org.fulib.classmodel.AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	partyAppService
  id: 	PartyAppService_businessLogic
  modified: 	false
  name: 	businessLogic
  other: 	partyAppBusinessLogic_service
  propertyStyle: 	Bean

