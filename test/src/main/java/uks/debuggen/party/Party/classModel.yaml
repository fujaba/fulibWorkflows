- c: 	org.fulib.classmodel.ClassModel
  classes: 	partyModel 	partyBusinessLogic 	partyBuilder 	partyService
  defaultCollectionType: 	c1
  defaultPropertyStyle: 	Bean
  defaultRoleType: 	"java.util.ArrayList<%s>"
  mainJavaDir: 	"test/src/main/java"
  packageName: 	uks.debuggen.party.Party
  packageSrcFolder: 	"test/src/main/java/uks/debuggen/party/Party"

- partyModel: 	org.fulib.classmodel.Clazz
  attributes: 	partyModel_modelMap
  importList: 	"import java.util.LinkedHashMap;"
  imports: 	"import java.util.LinkedHashMap;"
  model: 	c
  modified: 	false
  name: 	PartyModel
  propertyStyle: 	Bean

- partyBusinessLogic: 	org.fulib.classmodel.Clazz
  attributes: 	partyBusinessLogic_model 	partyBusinessLogic_handlerMap
  importList: 	"import java.util.LinkedHashMap;" 	"import java.util.function.Consumer;" 	"import uks.debuggen.party.events.*;"
  imports: 	"import java.util.LinkedHashMap;" 	"import java.util.function.Consumer;" 	"import uks.debuggen.party.events.*;"
  methods: 	partyBusinessLogic_initEventHandlerMap 	partyBusinessLogic_ignoreEvent 	partyBusinessLogic_getHandler
  model: 	c
  modified: 	false
  name: 	PartyBusinessLogic
  propertyStyle: 	Bean
  roles: 	partyBusinessLogic_builder 	partyBusinessLogic_service

- partyBuilder: 	org.fulib.classmodel.Clazz
  attributes: 	partyBuilder_model
  importList: 	"import java.util.LinkedHashMap;" 	"import java.util.function.Consumer;" 	"import uks.debuggen.party.events.*;"
  imports: 	"import java.util.LinkedHashMap;" 	"import java.util.function.Consumer;" 	"import uks.debuggen.party.events.*;"
  methods: 	partyBuilder_stripBrackets
  model: 	c
  modified: 	false
  name: 	PartyBuilder
  propertyStyle: 	Bean
  roles: 	partyBuilder_businessLogic

- partyService: 	org.fulib.classmodel.Clazz
  attributes: 	partyService_history 	partyService_port 	partyService_spark 	partyService_model
  importList: 	"import java.util.LinkedHashMap;" 	"import java.util.Map;" 	"import java.util.function.Consumer;" 	"import uks.debuggen.party.events.*;" 	"import org.fulib.yaml.Yaml;" 	"import spark.Service;" 	"import spark.Request;" 	"import spark.Response;" 	"import com.mashape.unirest.http.HttpResponse;" 	"import com.mashape.unirest.http.Unirest;" 	"import com.mashape.unirest.http.exceptions.UnirestException;" 	"import java.util.concurrent.ExecutorService;" 	"import java.util.concurrent.Executors;" 	"import java.util.logging.Logger;" 	"import java.util.logging.Level;"
  imports: 	"import java.util.LinkedHashMap;" 	"import java.util.Map;" 	"import java.util.function.Consumer;" 	"import uks.debuggen.party.events.*;" 	"import org.fulib.yaml.Yaml;" 	"import spark.Service;" 	"import spark.Request;" 	"import spark.Response;" 	"import com.mashape.unirest.http.HttpResponse;" 	"import com.mashape.unirest.http.Unirest;" 	"import com.mashape.unirest.http.exceptions.UnirestException;" 	"import java.util.concurrent.ExecutorService;" 	"import java.util.concurrent.Executors;" 	"import java.util.logging.Logger;" 	"import java.util.logging.Level;"
  methods: 	partyService_start 	partyService_getHello 	partyService_subscribeAndLoadOldEvents 	partyService_apply 	partyService_getPage 	partyService_getDemoPage 	partyService_publish 	partyService_postApply
  model: 	c
  modified: 	false
  name: 	PartyService
  propertyStyle: 	Bean
  roles: 	partyService_businessLogic

- c1: 	org.fulib.classmodel.CollectionType
  implClass: 	class java.util.ArrayList
  implTemplate: 	"java.util.ArrayList<%s>"
  itf: 	org.fulib.classmodel.CollectionInterface.List
  qualifiedImplName: 	java.util.ArrayList
  simpleImplName: 	ArrayList

- partyModel_modelMap: 	org.fulib.classmodel.Attribute
  clazz: 	partyModel
  id: 	PartyModel_modelMap
  initialization: 	"new LinkedHashMap<>()"
  modified: 	false
  name: 	modelMap
  propertyStyle: 	Bean
  type: 	"LinkedHashMap<String, Object>"
  typeSignature: 	"LinkedHashMap<String,Object>"

- partyBusinessLogic_model: 	org.fulib.classmodel.Attribute
  clazz: 	partyBusinessLogic
  id: 	PartyBusinessLogic_model
  modified: 	false
  name: 	model
  propertyStyle: 	Bean
  type: 	PartyModel
  typeSignature: 	PartyModel

- partyBusinessLogic_handlerMap: 	org.fulib.classmodel.Attribute
  clazz: 	partyBusinessLogic
  id: 	PartyBusinessLogic_handlerMap
  modified: 	false
  name: 	handlerMap
  propertyStyle: 	Bean
  type: 	"LinkedHashMap<Class, Consumer<Event>>"
  typeSignature: 	"LinkedHashMap<Class,Consumer<Event>>"

- partyBusinessLogic_initEventHandlerMap: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	partyBusinessLogic
  declaration: 	"public void initEventHandlerMap()"
  id: 	PartyBusinessLogic_initEventHandlerMap
  methodBody: 	"if (handlerMap == null) {
   handlerMap = new LinkedHashMap<>();
}
"
  modified: 	false
  modifiers: 	public
  name: 	initEventHandlerMap
  paramsString: 	""
  returnType: 	void
  signature: 	"class/PartyBusinessLogic/method/initEventHandlerMap()"

- partyBusinessLogic_ignoreEvent: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	partyBusinessLogic
  declaration: 	"private void ignoreEvent(Event event)"
  id: 	PartyBusinessLogic_ignoreEvent
  methodBody: 	"// empty
"
  modified: 	false
  modifiers: 	private
  name: 	ignoreEvent
  paramsString: 	"Event event"
  returnType: 	void
  signature: 	"class/PartyBusinessLogic/method/ignoreEvent(Event)"

- partyBusinessLogic_getHandler: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	partyBusinessLogic
  declaration: 	"public Consumer<Event> getHandler(Event event)"
  id: 	PartyBusinessLogic_getHandler
  methodBody: 	"return getHandlerMap().computeIfAbsent(event.getClass(), k -> this::ignoreEvent);
"
  modified: 	false
  modifiers: 	public
  name: 	getHandler
  paramsString: 	"Event event"
  returnType: 	"Consumer<Event>"
  signature: 	"class/PartyBusinessLogic/method/getHandler(Event)"

- partyBusinessLogic_builder: 	org.fulib.classmodel.AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	partyBusinessLogic
  id: 	PartyBusinessLogic_builder
  modified: 	false
  name: 	builder
  other: 	partyBuilder_businessLogic
  propertyStyle: 	Bean

- partyBusinessLogic_service: 	org.fulib.classmodel.AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	partyBusinessLogic
  id: 	PartyBusinessLogic_service
  modified: 	false
  name: 	service
  other: 	partyService_businessLogic
  propertyStyle: 	Bean

- partyBuilder_model: 	org.fulib.classmodel.Attribute
  clazz: 	partyBuilder
  id: 	PartyBuilder_model
  modified: 	false
  name: 	model
  propertyStyle: 	Bean
  type: 	PartyModel
  typeSignature: 	PartyModel

- partyBuilder_stripBrackets: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	partyBuilder
  declaration: 	"public String stripBrackets(String back)"
  id: 	PartyBuilder_stripBrackets
  methodBody: 	"      if (back == null) {
         return \"\";
      }
      int open = back.indexOf('[');
      int close = back.indexOf(']');
      if (open >= 0 && close >= 0) {
         back = back.substring(open + 1, close);
      }
      return back;"
  modified: 	false
  modifiers: 	public
  name: 	stripBrackets
  paramsString: 	"String back"
  returnType: 	String
  signature: 	"class/PartyBuilder/method/stripBrackets(String)"

- partyBuilder_businessLogic: 	org.fulib.classmodel.AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	partyBuilder
  id: 	PartyBuilder_businessLogic
  modified: 	false
  name: 	businessLogic
  other: 	partyBusinessLogic_builder
  propertyStyle: 	Bean

- partyService_history: 	org.fulib.classmodel.Attribute
  clazz: 	partyService
  id: 	PartyService_history
  initialization: 	"new LinkedHashMap<>()"
  modified: 	false
  name: 	history
  propertyStyle: 	Bean
  type: 	"LinkedHashMap<String, Event>"
  typeSignature: 	"LinkedHashMap<String,Event>"

- partyService_port: 	org.fulib.classmodel.Attribute
  clazz: 	partyService
  id: 	PartyService_port
  initialization: 	42001
  modified: 	false
  name: 	port
  propertyStyle: 	Bean
  type: 	int
  typeSignature: 	int

- partyService_spark: 	org.fulib.classmodel.Attribute
  clazz: 	partyService
  id: 	PartyService_spark
  modified: 	false
  name: 	spark
  propertyStyle: 	Bean
  type: 	Service
  typeSignature: 	Service

- partyService_model: 	org.fulib.classmodel.Attribute
  clazz: 	partyService
  id: 	PartyService_model
  modified: 	false
  name: 	model
  propertyStyle: 	Bean
  type: 	PartyModel
  typeSignature: 	PartyModel

- partyService_start: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	partyService
  declaration: 	"public void start()"
  id: 	PartyService_start
  methodBody: 	"model = new PartyModel();
setBusinessLogic(new PartyBusinessLogic());
businessLogic.setBuilder(new PartyBuilder().setModel(model));
businessLogic.setModel(model);
ExecutorService executor = Executors.newSingleThreadExecutor();
spark = Service.ignite();
spark.port(port);
spark.get(\"/page/:id\", (req, res) -> executor.submit(() -> this.getPage(req, res)).get());
spark.get(\"/\", (req, res) -> executor.submit(() -> this.getHello(req, res)).get());
spark.post(\"/apply\", (req, res) -> executor.submit(() -> this.postApply(req, res)).get());
executor.submit(this::subscribeAndLoadOldEvents);
Logger.getGlobal().info(\"Party service is up and running on port \" + port);
"
  modified: 	false
  modifiers: 	public
  name: 	start
  paramsString: 	""
  returnType: 	void
  signature: 	"class/PartyService/method/start()"

- partyService_getHello: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	partyService
  declaration: 	"private String getHello(Request req, Response res)"
  id: 	PartyService_getHello
  methodBody: 	"try {
   String events = Yaml.encode(getHistory().values().toArray());
   String objects = Yaml.encode(model.getModelMap().values().toArray());
   return \"<p id='Party'>This is the Party service. </p>\n\" +
         \"<pre id=\\"history\\">\" + events + \"</pre>\n\" +
         \"<pre id=\\"data\\">\" + objects + \"</pre>\n\" +
         \"\";
}
catch (Exception e) {
   Logger.getGlobal().log(Level.SEVERE, e.getMessage(), e);
   return \"Party Error \" + e.getMessage();
}
"
  modified: 	false
  modifiers: 	private
  name: 	getHello
  paramsString: 	"Request req, Response res"
  returnType: 	String
  signature: 	"class/PartyService/method/getHello(Request,Response)"

- partyService_subscribeAndLoadOldEvents: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	partyService
  declaration: 	"private void subscribeAndLoadOldEvents()"
  id: 	PartyService_subscribeAndLoadOldEvents
  methodBody: 	"ServiceSubscribed serviceSubscribed = new ServiceSubscribed()
      .setServiceUrl(\"http://localhost:42001/apply\");
String json = Yaml.encode(serviceSubscribed);
try {
   String url = \"http://localhost:42000/subscribe\";
   HttpResponse<String> response = Unirest
         .post(url)
         .body(json)
         .asString();
   String body = response.getBody();
   Map<String, Object> objectMap = Yaml.decode(body);
   for (Object obj : objectMap.values()) {
      apply((Event) obj);
   }
}
catch (UnirestException e) {
   e.printStackTrace();
}"
  modified: 	false
  modifiers: 	private
  name: 	subscribeAndLoadOldEvents
  paramsString: 	""
  returnType: 	void
  signature: 	"class/PartyService/method/subscribeAndLoadOldEvents()"

- partyService_apply: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	partyService
  declaration: 	"public void apply(Event event)"
  id: 	PartyService_apply
  methodBody: 	"if (history.get(event.getId()) != null) {
   return;
}
businessLogic.initEventHandlerMap();
Consumer<Event> handler = businessLogic.getHandler(event);
handler.accept(event);
history.put(event.getId(), event);
publish(event);"
  modified: 	false
  modifiers: 	public
  name: 	apply
  paramsString: 	"Event event"
  returnType: 	void
  signature: 	"class/PartyService/method/apply(Event)"

- partyService_getPage: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	partyService
  declaration: 	"public String getPage(Request request, Response response)"
  id: 	PartyService_getPage
  methodBody: 	"// no fulib
// add your page handling here
return getDemoPage(request, response);
"
  modified: 	false
  modifiers: 	public
  name: 	getPage
  paramsString: 	"Request request, Response response"
  returnType: 	String
  signature: 	"class/PartyService/method/getPage(Request,Response)"

- partyService_getDemoPage: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	partyService
  declaration: 	"public String getDemoPage(Request request, Response response)"
  id: 	PartyService_getDemoPage
  methodBody: 	"StringBuilder html = new StringBuilder();
String id = request.params(\"id\");
String event = request.queryParams(\"event\");

if (\"login 12:01\".equals(event)) {

   // create LoginCommand: login 12:01
   LoginCommand e1201 = new LoginCommand();
   e1201.setId(\"12:01\");
   e1201.setName(request.queryParams(\"name\"));
   apply(e1201);
}



// 12:00
if (id.equals(\"12_00\")) {
   html.append(\"<form action=\\"/page/next_page\\" method=\\"get\\">\n\");
   // Party App 12:00
   html.append(\"   <p>Welcome to the parties</p>\n\");
   html.append(\"   <p>What's your name?</p>\n\");
   html.append(\"   <p><input id=\\"name\\" name=\\"name\\" placeholder=\\"name?\\"></p>\n\");
   html.append(\"   <p><input id=\\"event\\" name=\\"event\\" type=\\"hidden\\" value=\\"login 12:01\\"></p>\n\");
   html.append(\"   <p><input id=\\"ok\\" name=\\"button\\" type=\\"submit\\" value=\\"ok\\"></p>\n\");
   html.append(\"</form>\n\");
   return html.toString();
}



html.append(\"This is the Shop Service page \" + id + \"\n\");
return html.toString();"
  modified: 	false
  modifiers: 	public
  name: 	getDemoPage
  paramsString: 	"Request request, Response response"
  returnType: 	String
  signature: 	"class/PartyService/method/getDemoPage(Request,Response)"

- partyService_publish: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	partyService
  declaration: 	"public void publish(Event event)"
  id: 	PartyService_publish
  methodBody: 	"String json = Yaml.encode(event);

try {
   HttpResponse<String> response = Unirest
         .post(\"http://localhost:42000/publish\")
         .body(json)
         .asString();
}
catch (UnirestException e) {
   e.printStackTrace();
}"
  modified: 	false
  modifiers: 	public
  name: 	publish
  paramsString: 	"Event event"
  returnType: 	void
  signature: 	"class/PartyService/method/publish(Event)"

- partyService_postApply: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	partyService
  declaration: 	"private String postApply(Request req, Response res)"
  id: 	PartyService_postApply
  methodBody: 	"      try {
         String body = req.body();
         Map<String, Object> map = Yaml.decode(body);
         for (Object value : map.values()) {
            Event event = (Event) value;
            apply(event);
         }
      }
      catch (Exception e) {
         Logger.getGlobal().log(Level.SEVERE, \"postApply failed\", e);
      }
      return \"apply done\";"
  modified: 	false
  modifiers: 	private
  name: 	postApply
  paramsString: 	"Request req, Response res"
  returnType: 	String
  signature: 	"class/PartyService/method/postApply(Request,Response)"

- partyService_businessLogic: 	org.fulib.classmodel.AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	partyService
  id: 	PartyService_businessLogic
  modified: 	false
  name: 	businessLogic
  other: 	partyBusinessLogic_service
  propertyStyle: 	Bean

