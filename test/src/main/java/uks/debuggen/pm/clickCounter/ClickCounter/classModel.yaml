- c: 	org.fulib.classmodel.ClassModel
  classes: 	clickCounterModel 	clickCounterBusinessLogic 	clickCounterBuilder 	clickCounterService 	counter
  defaultCollectionType: 	c1
  defaultPropertyStyle: 	Bean
  defaultRoleType: 	"java.util.ArrayList<%s>"
  mainJavaDir: 	"test/src/main/java"
  packageName: 	uks.debuggen.pm.clickCounter.ClickCounter
  packageSrcFolder: 	"test/src/main/java/uks/debuggen/pm/clickCounter/ClickCounter"

- clickCounterModel: 	org.fulib.classmodel.Clazz
  attributes: 	clickCounterModel_modelMap
  importList: 	"import java.util.LinkedHashMap;"
  imports: 	"import java.util.LinkedHashMap;"
  methods: 	clickCounterModel_getOrCreateCounter
  model: 	c
  modified: 	false
  name: 	ClickCounterModel
  propertyStyle: 	Bean

- clickCounterBusinessLogic: 	org.fulib.classmodel.Clazz
  attributes: 	clickCounterBusinessLogic_model 	clickCounterBusinessLogic_handlerMap
  importList: 	"import java.util.LinkedHashMap;" 	"import java.util.function.Consumer;" 	"import uks.debuggen.pm.clickCounter.events.*;"
  imports: 	"import java.util.LinkedHashMap;" 	"import java.util.function.Consumer;" 	"import uks.debuggen.pm.clickCounter.events.*;"
  methods: 	clickCounterBusinessLogic_handleDoCountCommand 	clickCounterBusinessLogic_handleDemoDoCountCommand 	clickCounterBusinessLogic_initEventHandlerMap 	clickCounterBusinessLogic_ignoreEvent 	clickCounterBusinessLogic_getHandler
  model: 	c
  modified: 	false
  name: 	ClickCounterBusinessLogic
  propertyStyle: 	Bean
  roles: 	clickCounterBusinessLogic_builder 	clickCounterBusinessLogic_service

- clickCounterBuilder: 	org.fulib.classmodel.Clazz
  attributes: 	clickCounterBuilder_model 	clickCounterBuilder_eventStore 	clickCounterBuilder_loaderMap 	clickCounterBuilder_groupStore
  importList: 	"import java.util.LinkedHashMap;" 	"import java.util.function.Consumer;" 	"import uks.debuggen.pm.clickCounter.events.*;" 	"import java.util.function.Function;"
  imports: 	"import java.util.LinkedHashMap;" 	"import java.util.function.Consumer;" 	"import uks.debuggen.pm.clickCounter.events.*;" 	"import java.util.function.Function;"
  methods: 	clickCounterBuilder_outdated 	clickCounterBuilder_storeCounterBuilt 	clickCounterBuilder_loadCounterBuilt 	clickCounterBuilder_load 	clickCounterBuilder_initLoaderMap 	clickCounterBuilder_getObjectId 	clickCounterBuilder_addToGroup 	clickCounterBuilder_stripBrackets
  model: 	c
  modified: 	false
  name: 	ClickCounterBuilder
  propertyStyle: 	Bean
  roles: 	clickCounterBuilder_businessLogic 	clickCounterBuilder_service

- clickCounterService: 	org.fulib.classmodel.Clazz
  attributes: 	clickCounterService_history 	clickCounterService_port 	clickCounterService_spark 	clickCounterService_model
  importList: 	"import java.util.LinkedHashMap;" 	"import java.time.Instant;" 	"import java.time.format.DateTimeFormatter;" 	"import java.util.Map;" 	"import java.util.function.Consumer;" 	"import uks.debuggen.pm.clickCounter.events.*;" 	"import org.fulib.yaml.Yaml;" 	"import org.fulib.yaml.YamlIdMap;" 	"import spark.Service;" 	"import spark.Request;" 	"import spark.Response;" 	"import com.mashape.unirest.http.HttpResponse;" 	"import com.mashape.unirest.http.Unirest;" 	"import com.mashape.unirest.http.exceptions.UnirestException;" 	"import java.util.concurrent.ExecutorService;" 	"import java.util.concurrent.Executors;" 	"import java.util.logging.Logger;" 	"import java.util.logging.Level;"
  imports: 	"import java.util.LinkedHashMap;" 	"import java.time.Instant;" 	"import java.time.format.DateTimeFormatter;" 	"import java.util.Map;" 	"import java.util.function.Consumer;" 	"import uks.debuggen.pm.clickCounter.events.*;" 	"import org.fulib.yaml.Yaml;" 	"import org.fulib.yaml.YamlIdMap;" 	"import spark.Service;" 	"import spark.Request;" 	"import spark.Response;" 	"import com.mashape.unirest.http.HttpResponse;" 	"import com.mashape.unirest.http.Unirest;" 	"import com.mashape.unirest.http.exceptions.UnirestException;" 	"import java.util.concurrent.ExecutorService;" 	"import java.util.concurrent.Executors;" 	"import java.util.logging.Logger;" 	"import java.util.logging.Level;"
  methods: 	clickCounterService_query 	clickCounterService_isoNow 	clickCounterService_start 	clickCounterService_stop 	clickCounterService_getHello 	clickCounterService_subscribeAndLoadOldEvents 	clickCounterService_apply 	clickCounterService_getPage 	clickCounterService_getDemoPage 	clickCounterService_publish 	clickCounterService_postApply
  model: 	c
  modified: 	false
  name: 	ClickCounterService
  propertyStyle: 	Bean
  roles: 	clickCounterService_businessLogic 	clickCounterService_builder

- counter: 	org.fulib.classmodel.Clazz
  attributes: 	counter_id 	counter_count
  model: 	c
  modified: 	false
  name: 	Counter
  propertyStyle: 	Bean

- c1: 	org.fulib.classmodel.CollectionType
  implClass: 	class java.util.ArrayList
  implTemplate: 	"java.util.ArrayList<%s>"
  itf: 	org.fulib.classmodel.CollectionInterface.List
  qualifiedImplName: 	java.util.ArrayList
  simpleImplName: 	ArrayList

- clickCounterModel_modelMap: 	org.fulib.classmodel.Attribute
  clazz: 	clickCounterModel
  id: 	ClickCounterModel_modelMap
  initialization: 	"new LinkedHashMap<>()"
  modified: 	false
  name: 	modelMap
  propertyStyle: 	Bean
  type: 	"LinkedHashMap<String, Object>"
  typeSignature: 	"LinkedHashMap<String,Object>"

- clickCounterModel_getOrCreateCounter: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	clickCounterModel
  declaration: 	"public Counter getOrCreateCounter(String id)"
  id: 	ClickCounterModel_getOrCreateCounter
  methodBody: 	"if (id == null) return null;
return (Counter) modelMap.computeIfAbsent(id, k -> new Counter().setId(k));
"
  modified: 	false
  modifiers: 	public
  name: 	getOrCreateCounter
  paramsString: 	"String id"
  returnType: 	Counter
  signature: 	"class/ClickCounterModel/method/getOrCreateCounter(String)"

- clickCounterBusinessLogic_model: 	org.fulib.classmodel.Attribute
  clazz: 	clickCounterBusinessLogic
  id: 	ClickCounterBusinessLogic_model
  modified: 	false
  name: 	model
  propertyStyle: 	Bean
  type: 	ClickCounterModel
  typeSignature: 	ClickCounterModel

- clickCounterBusinessLogic_handlerMap: 	org.fulib.classmodel.Attribute
  clazz: 	clickCounterBusinessLogic
  id: 	ClickCounterBusinessLogic_handlerMap
  modified: 	false
  name: 	handlerMap
  propertyStyle: 	Bean
  type: 	"LinkedHashMap<Class, Consumer<Event>>"
  typeSignature: 	"LinkedHashMap<Class,Consumer<Event>>"

- clickCounterBusinessLogic_handleDoCountCommand: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	clickCounterBusinessLogic
  declaration: 	"private void handleDoCountCommand(Event e)"
  id: 	ClickCounterBusinessLogic_handleDoCountCommand
  methodBody: 	"// to protect manuel changes to this method insert a 'no' in front of fulib in the next line
// fulib
DoCountCommand event = (DoCountCommand) e;
handleDemoDoCountCommand(event);
"
  modified: 	false
  modifiers: 	private
  name: 	handleDoCountCommand
  paramsString: 	"Event e"
  returnType: 	void
  signature: 	"class/ClickCounterBusinessLogic/method/handleDoCountCommand(Event)"

- clickCounterBusinessLogic_handleDemoDoCountCommand: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	clickCounterBusinessLogic
  declaration: 	"private void handleDemoDoCountCommand(DoCountCommand event)"
  id: 	ClickCounterBusinessLogic_handleDemoDoCountCommand
  methodBody: 	"if (event.getId().equals(\"12:01:01\")) {
   CounterBuilt modelEvent = new CounterBuilt();
   modelEvent.setId(\"12:01:02\");
   modelEvent.setBlockId(\"model\");
   modelEvent.setCount(\"1\");
   service.apply(modelEvent);

}
if (event.getId().equals(\"12:02:01\")) {
   CounterBuilt modelEvent = new CounterBuilt();
   modelEvent.setId(\"12:02:02\");
   modelEvent.setBlockId(\"model\");
   modelEvent.setCount(\"2\");
   service.apply(modelEvent);

}
if (event.getId().equals(\"12:03:01\")) {
   CounterBuilt modelEvent = new CounterBuilt();
   modelEvent.setId(\"12:03:02\");
   modelEvent.setBlockId(\"model\");
   modelEvent.setCount(\"3\");
   service.apply(modelEvent);

}
"
  modified: 	false
  modifiers: 	private
  name: 	handleDemoDoCountCommand
  paramsString: 	"DoCountCommand event"
  returnType: 	void
  signature: 	"class/ClickCounterBusinessLogic/method/handleDemoDoCountCommand(DoCountCommand)"

- clickCounterBusinessLogic_initEventHandlerMap: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	clickCounterBusinessLogic
  declaration: 	"public void initEventHandlerMap()"
  id: 	ClickCounterBusinessLogic_initEventHandlerMap
  methodBody: 	"if (handlerMap == null) {
   handlerMap = new LinkedHashMap<>();
   handlerMap.put(CounterBuilt.class, builder::storeCounterBuilt);
   handlerMap.put(DoCountCommand.class, this::handleDoCountCommand);
}
"
  modified: 	false
  modifiers: 	public
  name: 	initEventHandlerMap
  paramsString: 	""
  returnType: 	void
  signature: 	"class/ClickCounterBusinessLogic/method/initEventHandlerMap()"

- clickCounterBusinessLogic_ignoreEvent: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	clickCounterBusinessLogic
  declaration: 	"private void ignoreEvent(Event event)"
  id: 	ClickCounterBusinessLogic_ignoreEvent
  methodBody: 	"// empty
"
  modified: 	false
  modifiers: 	private
  name: 	ignoreEvent
  paramsString: 	"Event event"
  returnType: 	void
  signature: 	"class/ClickCounterBusinessLogic/method/ignoreEvent(Event)"

- clickCounterBusinessLogic_getHandler: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	clickCounterBusinessLogic
  declaration: 	"public Consumer<Event> getHandler(Event event)"
  id: 	ClickCounterBusinessLogic_getHandler
  methodBody: 	"return getHandlerMap().computeIfAbsent(event.getClass(), k -> this::ignoreEvent);
"
  modified: 	false
  modifiers: 	public
  name: 	getHandler
  paramsString: 	"Event event"
  returnType: 	"Consumer<Event>"
  signature: 	"class/ClickCounterBusinessLogic/method/getHandler(Event)"

- clickCounterBusinessLogic_builder: 	org.fulib.classmodel.AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	clickCounterBusinessLogic
  id: 	ClickCounterBusinessLogic_builder
  modified: 	false
  name: 	builder
  other: 	clickCounterBuilder_businessLogic
  propertyStyle: 	Bean

- clickCounterBusinessLogic_service: 	org.fulib.classmodel.AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	clickCounterBusinessLogic
  id: 	ClickCounterBusinessLogic_service
  modified: 	false
  name: 	service
  other: 	clickCounterService_businessLogic
  propertyStyle: 	Bean

- clickCounterBuilder_model: 	org.fulib.classmodel.Attribute
  clazz: 	clickCounterBuilder
  id: 	ClickCounterBuilder_model
  modified: 	false
  name: 	model
  propertyStyle: 	Bean
  type: 	ClickCounterModel
  typeSignature: 	ClickCounterModel

- clickCounterBuilder_eventStore: 	org.fulib.classmodel.Attribute
  clazz: 	clickCounterBuilder
  id: 	ClickCounterBuilder_eventStore
  initialization: 	"new LinkedHashMap<>()"
  modified: 	false
  name: 	eventStore
  propertyStyle: 	Bean
  type: 	"LinkedHashMap<String, DataEvent>"
  typeSignature: 	"LinkedHashMap<String,DataEvent>"

- clickCounterBuilder_loaderMap: 	org.fulib.classmodel.Attribute
  clazz: 	clickCounterBuilder
  id: 	ClickCounterBuilder_loaderMap
  modified: 	false
  name: 	loaderMap
  propertyStyle: 	Bean
  type: 	"LinkedHashMap<Class, Function<Event, Object>>"
  typeSignature: 	"LinkedHashMap<Class,Function<Event,Object>>"

- clickCounterBuilder_groupStore: 	org.fulib.classmodel.Attribute
  clazz: 	clickCounterBuilder
  id: 	ClickCounterBuilder_groupStore
  initialization: 	"new LinkedHashMap<>()"
  modified: 	false
  name: 	groupStore
  propertyStyle: 	Bean
  type: 	"LinkedHashMap<String, LinkedHashMap<String, DataEvent>>"
  typeSignature: 	"LinkedHashMap<String,LinkedHashMap<String,DataEvent>>"

- clickCounterBuilder_outdated: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	clickCounterBuilder
  declaration: 	"private boolean outdated(DataEvent event)"
  id: 	ClickCounterBuilder_outdated
  methodBody: 	"      DataEvent oldEvent = getEventStore().get(event.getBlockId());

      if (oldEvent == null) {
         eventStore.put(event.getBlockId(), event);
         return false;
      }

      if (oldEvent.getId().compareTo(event.getId()) < 0) {
         new org.fulib.yaml.Yamler2().mergeObjects(oldEvent, event);
         eventStore.put(event.getBlockId(), event);
         return false;
      }

      return true;"
  modified: 	false
  modifiers: 	private
  name: 	outdated
  paramsString: 	"DataEvent event"
  returnType: 	boolean
  signature: 	"class/ClickCounterBuilder/method/outdated(DataEvent)"

- clickCounterBuilder_storeCounterBuilt: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	clickCounterBuilder
  declaration: 	"public void storeCounterBuilt(Event e)"
  id: 	ClickCounterBuilder_storeCounterBuilt
  methodBody: 	"CounterBuilt event = (CounterBuilt) e;
if (outdated(event)) {
   return;
}
// please insert a no before fulib in the next line and insert addToGroup commands as necessary
// fulib
"
  modified: 	false
  modifiers: 	public
  name: 	storeCounterBuilt
  paramsString: 	"Event e"
  returnType: 	void
  signature: 	"class/ClickCounterBuilder/method/storeCounterBuilt(Event)"

- clickCounterBuilder_loadCounterBuilt: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	clickCounterBuilder
  declaration: 	"public Counter loadCounterBuilt(Event e)"
  id: 	ClickCounterBuilder_loadCounterBuilt
  methodBody: 	"CounterBuilt event = (CounterBuilt) e;
Counter object = model.getOrCreateCounter(event.getBlockId());
object.setCount(event.getCount() == null ? 0 : Integer.parseInt(event.getCount()));
return object;
"
  modified: 	false
  modifiers: 	public
  name: 	loadCounterBuilt
  paramsString: 	"Event e"
  returnType: 	Counter
  signature: 	"class/ClickCounterBuilder/method/loadCounterBuilt(Event)"

- clickCounterBuilder_load: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	clickCounterBuilder
  declaration: 	"public Object load(String blockId)"
  id: 	ClickCounterBuilder_load
  methodBody: 	"      DataEvent dataEvent = eventStore.get(blockId);
      if (dataEvent == null) {
         return null;
      }

      initLoaderMap();
      Function<Event, Object> loader = loaderMap.get(dataEvent.getClass());
      Object object = loader.apply(dataEvent);

      LinkedHashMap<String, DataEvent> group = groupStore.computeIfAbsent(blockId, k -> new LinkedHashMap<>());
      for (DataEvent element : group.values()) {
         loader = loaderMap.get(element.getClass());
         loader.apply(element);
      }

      return object;"
  modified: 	false
  modifiers: 	public
  name: 	load
  paramsString: 	"String blockId"
  returnType: 	Object
  signature: 	"class/ClickCounterBuilder/method/load(String)"

- clickCounterBuilder_initLoaderMap: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	clickCounterBuilder
  declaration: 	"private void initLoaderMap()"
  id: 	ClickCounterBuilder_initLoaderMap
  methodBody: 	"if (loaderMap == null) {
   loaderMap = new LinkedHashMap<>();
   loaderMap.put(CounterBuilt.class, this::loadCounterBuilt);
}
"
  modified: 	false
  modifiers: 	private
  name: 	initLoaderMap
  paramsString: 	""
  returnType: 	void
  signature: 	"class/ClickCounterBuilder/method/initLoaderMap()"

- clickCounterBuilder_getObjectId: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	clickCounterBuilder
  declaration: 	"public String getObjectId(String value)"
  id: 	ClickCounterBuilder_getObjectId
  methodBody: 	"      if (value == null) {
         return null;
      }
      return value.replaceAll(\"\\W+\", \"_\");"
  modified: 	false
  modifiers: 	public
  name: 	getObjectId
  paramsString: 	"String value"
  returnType: 	String
  signature: 	"class/ClickCounterBuilder/method/getObjectId(String)"

- clickCounterBuilder_addToGroup: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	clickCounterBuilder
  declaration: 	"private void addToGroup(String groupId, String elementId)"
  id: 	ClickCounterBuilder_addToGroup
  methodBody: 	"      DataEvent dataEvent = eventStore.get(elementId);

      if (dataEvent == null) {
         java.util.logging.Logger.getGlobal().severe(String.format(\"could not find element event %s for group %s \", elementId, groupId));
         return;
      }

      LinkedHashMap<String, DataEvent> group = groupStore.computeIfAbsent(groupId, k -> new LinkedHashMap<>());
      group.put(elementId, dataEvent);"
  modified: 	false
  modifiers: 	private
  name: 	addToGroup
  paramsString: 	"String groupId, String elementId"
  returnType: 	void
  signature: 	"class/ClickCounterBuilder/method/addToGroup(String,String)"

- clickCounterBuilder_stripBrackets: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	clickCounterBuilder
  declaration: 	"public String stripBrackets(String back)"
  id: 	ClickCounterBuilder_stripBrackets
  methodBody: 	"      if (back == null) {
         return \"\";
      }
      int open = back.indexOf('[');
      int close = back.indexOf(']');
      if (open >= 0 && close >= 0) {
         back = back.substring(open + 1, close);
      }
      return back;"
  modified: 	false
  modifiers: 	public
  name: 	stripBrackets
  paramsString: 	"String back"
  returnType: 	String
  signature: 	"class/ClickCounterBuilder/method/stripBrackets(String)"

- clickCounterBuilder_businessLogic: 	org.fulib.classmodel.AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	clickCounterBuilder
  id: 	ClickCounterBuilder_businessLogic
  modified: 	false
  name: 	businessLogic
  other: 	clickCounterBusinessLogic_builder
  propertyStyle: 	Bean

- clickCounterBuilder_service: 	org.fulib.classmodel.AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	clickCounterBuilder
  id: 	ClickCounterBuilder_service
  modified: 	false
  name: 	service
  other: 	clickCounterService_builder
  propertyStyle: 	Bean

- clickCounterService_history: 	org.fulib.classmodel.Attribute
  clazz: 	clickCounterService
  id: 	ClickCounterService_history
  initialization: 	"new LinkedHashMap<>()"
  modified: 	false
  name: 	history
  propertyStyle: 	Bean
  type: 	"LinkedHashMap<String, Event>"
  typeSignature: 	"LinkedHashMap<String,Event>"

- clickCounterService_port: 	org.fulib.classmodel.Attribute
  clazz: 	clickCounterService
  id: 	ClickCounterService_port
  initialization: 	42001
  modified: 	false
  name: 	port
  propertyStyle: 	Bean
  type: 	int
  typeSignature: 	int

- clickCounterService_spark: 	org.fulib.classmodel.Attribute
  clazz: 	clickCounterService
  id: 	ClickCounterService_spark
  modified: 	false
  name: 	spark
  propertyStyle: 	Bean
  type: 	Service
  typeSignature: 	Service

- clickCounterService_model: 	org.fulib.classmodel.Attribute
  clazz: 	clickCounterService
  id: 	ClickCounterService_model
  modified: 	false
  name: 	model
  propertyStyle: 	Bean
  type: 	ClickCounterModel
  typeSignature: 	ClickCounterModel

- clickCounterService_query: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	clickCounterService
  declaration: 	"public Query query(Query query)"
  id: 	ClickCounterService_query
  methodBody: 	"      DataEvent dataEvent = getBuilder().getEventStore().get(query.getKey());

      if (dataEvent == null) {
         return query;
      }

      if (dataEvent instanceof DataGroup) {
         DataGroup group = (DataGroup) dataEvent;
         query.withResults(group.getElements());
      }
      else {
         query.withResults(dataEvent);
      }

      return query;"
  modified: 	false
  modifiers: 	public
  name: 	query
  paramsString: 	"Query query"
  returnType: 	Query
  signature: 	"class/ClickCounterService/method/query(Query)"

- clickCounterService_isoNow: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	clickCounterService
  declaration: 	"public String isoNow()"
  id: 	ClickCounterService_isoNow
  methodBody: 	"return DateTimeFormatter.ISO_INSTANT.format(Instant.now());
"
  modified: 	false
  modifiers: 	public
  name: 	isoNow
  paramsString: 	""
  returnType: 	String
  signature: 	"class/ClickCounterService/method/isoNow()"

- clickCounterService_start: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	clickCounterService
  declaration: 	"public void start()"
  id: 	ClickCounterService_start
  methodBody: 	"Unirest.setTimeouts(3*60*1000, 3*60*1000);
model = new ClickCounterModel();
setBuilder(new ClickCounterBuilder().setModel(model));
setBusinessLogic(new ClickCounterBusinessLogic());
businessLogic.setBuilder(getBuilder());
businessLogic.setModel(model);
ExecutorService executor = Executors.newSingleThreadExecutor();
spark = Service.ignite();
spark.port(port);
spark.get(\"/page/:id\", (req, res) -> executor.submit(() -> this.getPage(req, res)).get());
spark.get(\"/\", (req, res) -> executor.submit(() -> this.getHello(req, res)).get());
spark.post(\"/apply\", (req, res) -> executor.submit(() -> this.postApply(req, res)).get());
spark.init();
executor.submit(this::subscribeAndLoadOldEvents);
Logger.getGlobal().info(\"ClickCounter service is up and running on port \" + port);
"
  modified: 	false
  modifiers: 	public
  name: 	start
  paramsString: 	""
  returnType: 	void
  signature: 	"class/ClickCounterService/method/start()"

- clickCounterService_stop: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	clickCounterService
  declaration: 	"public void stop()"
  id: 	ClickCounterService_stop
  methodBody: 	"spark.stop();
"
  modified: 	false
  modifiers: 	public
  name: 	stop
  paramsString: 	""
  returnType: 	void
  signature: 	"class/ClickCounterService/method/stop()"

- clickCounterService_getHello: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	clickCounterService
  declaration: 	"private String getHello(Request req, Response res)"
  id: 	ClickCounterService_getHello
  methodBody: 	"try {
   String events = Yaml.encodeSimple(getHistory().values().toArray());
   String objects = Yaml.encodeSimple(model.getModelMap().values().toArray());
   return \"<p id='ClickCounter'>This is the ClickCounter service. </p>\n\" +
         \"<pre id=\\"history\\">\" + events + \"</pre>\n\" +
         \"<pre id=\\"data\\">\" + objects + \"</pre>\n\" +
         \"\";
}
catch (Exception e) {
   Logger.getGlobal().log(Level.SEVERE, e.getMessage(), e);
   return \"ClickCounter Error \" + e.getMessage();
}
"
  modified: 	false
  modifiers: 	private
  name: 	getHello
  paramsString: 	"Request req, Response res"
  returnType: 	String
  signature: 	"class/ClickCounterService/method/getHello(Request,Response)"

- clickCounterService_subscribeAndLoadOldEvents: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	clickCounterService
  declaration: 	"private void subscribeAndLoadOldEvents()"
  id: 	ClickCounterService_subscribeAndLoadOldEvents
  methodBody: 	"ServiceSubscribed serviceSubscribed = new ServiceSubscribed()
      .setServiceUrl(String.format(\"http://localhost:%d/apply\", port));
String json = Yaml.encodeSimple(serviceSubscribed);
try {
   String url = \"http://localhost:42000/subscribe\";
   HttpResponse<String> response = Unirest
         .post(url)
         .body(json)
         .asString();
   String body = response.getBody();
   YamlIdMap idMap = new YamlIdMap(Event.class.getPackageName());
   idMap.decode(body);
   Map<String, Object> objectMap = idMap.getObjIdMap();
   for (Object obj : objectMap.values()) {
      apply((Event) obj);
   }
}
catch (UnirestException e) {
   e.printStackTrace();
}"
  modified: 	false
  modifiers: 	private
  name: 	subscribeAndLoadOldEvents
  paramsString: 	""
  returnType: 	void
  signature: 	"class/ClickCounterService/method/subscribeAndLoadOldEvents()"

- clickCounterService_apply: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	clickCounterService
  declaration: 	"public void apply(Event event)"
  id: 	ClickCounterService_apply
  methodBody: 	"if (history.get(event.getId()) != null) {
   return;
}
businessLogic.initEventHandlerMap();
Consumer<Event> handler = businessLogic.getHandler(event);
handler.accept(event);
history.put(event.getId(), event);
firePropertyChange(PROPERTY_HISTORY, null, event);
publish(event);"
  modified: 	false
  modifiers: 	public
  name: 	apply
  paramsString: 	"Event event"
  returnType: 	void
  signature: 	"class/ClickCounterService/method/apply(Event)"

- clickCounterService_getPage: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	clickCounterService
  declaration: 	"public String getPage(Request request, Response response)"
  id: 	ClickCounterService_getPage
  methodBody: 	"// to protect manuel changes to this method insert a 'no' in front of fulib in the next line
// fulib
return getDemoPage(request, response);
"
  modified: 	false
  modifiers: 	public
  name: 	getPage
  paramsString: 	"Request request, Response response"
  returnType: 	String
  signature: 	"class/ClickCounterService/method/getPage(Request,Response)"

- clickCounterService_getDemoPage: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	clickCounterService
  declaration: 	"public String getDemoPage(Request request, Response response)"
  id: 	ClickCounterService_getDemoPage
  methodBody: 	"StringBuilder html = new StringBuilder();
String id = request.params(\"id\");
String event = request.queryParams(\"event\");

if (\"do count a\".equals(event)) {

   // create DoCountCommand: do count a
   DoCountCommand e120101 = new DoCountCommand();
   e120101.setId(\"12:01:01\");
   apply(e120101);
}

if (\"do count b\".equals(event)) {

   // create DoCountCommand: do count b
   DoCountCommand e120201 = new DoCountCommand();
   e120201.setId(\"12:02:01\");
   apply(e120201);
}

if (\"do count c\".equals(event)) {

   // create DoCountCommand: do count c
   DoCountCommand e120301 = new DoCountCommand();
   e120301.setId(\"12:03:01\");
   apply(e120301);
}



// 12:01
if (id.equals(\"12_01\")) {
   html.append(\"<form action=\\"/page/12_02\\" method=\\"get\\">\n\");
   // ClickCounter 12:01
   html.append(\"   <p><input id=\\"event\\" name=\\"event\\" type=\\"hidden\\" value=\\"do count a\\"></p>\n\");
   html.append(\"   <p><input id=\\"Click_Me\\" name=\\"button\\" type=\\"submit\\" value=\\"Click_Me\\"></p>\n\");
   html.append(\"   <p>click count is 0</p>\n\");
   html.append(\"</form>\n\");
   return html.toString();
}

// 12:02
if (id.equals(\"12_02\")) {
   html.append(\"<form action=\\"/page/12_03\\" method=\\"get\\">\n\");
   // ClickCounter 12:02
   html.append(\"   <p><input id=\\"event\\" name=\\"event\\" type=\\"hidden\\" value=\\"do count b\\"></p>\n\");
   html.append(\"   <p><input id=\\"Click_Me\\" name=\\"button\\" type=\\"submit\\" value=\\"Click_Me\\"></p>\n\");
   html.append(\"   <p>click count is 1</p>\n\");
   html.append(\"</form>\n\");
   return html.toString();
}

// 12:03
if (id.equals(\"12_03\")) {
   html.append(\"<form action=\\"/page/12_04\\" method=\\"get\\">\n\");
   // ClickCounter 12:03
   html.append(\"   <p><input id=\\"event\\" name=\\"event\\" type=\\"hidden\\" value=\\"do count c\\"></p>\n\");
   html.append(\"   <p><input id=\\"Click_Me\\" name=\\"button\\" type=\\"submit\\" value=\\"Click_Me\\"></p>\n\");
   html.append(\"   <p>click count is 2</p>\n\");
   html.append(\"</form>\n\");
   return html.toString();
}

// 12:04
if (id.equals(\"12_04\")) {
   html.append(\"<form action=\\"/page/next_page\\" method=\\"get\\">\n\");
   // ClickCounter 12:04
   html.append(\"   <p><input id=\\"Click_Me\\" name=\\"button\\" type=\\"submit\\" value=\\"Click_Me\\"></p>\n\");
   html.append(\"   <p>click count is 3</p>\n\");
   html.append(\"</form>\n\");
   return html.toString();
}



html.append(\"This is the Shop Service page \" + id + \"\n\");
return html.toString();"
  modified: 	false
  modifiers: 	public
  name: 	getDemoPage
  paramsString: 	"Request request, Response response"
  returnType: 	String
  signature: 	"class/ClickCounterService/method/getDemoPage(Request,Response)"

- clickCounterService_publish: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	clickCounterService
  declaration: 	"public void publish(Event event)"
  id: 	ClickCounterService_publish
  methodBody: 	"String json = Yaml.encodeSimple(event);

try {
   HttpResponse<String> response = Unirest
         .post(\"http://localhost:42000/publish\")
         .body(json)
         .asString();
}
catch (UnirestException e) {
   e.printStackTrace();
}"
  modified: 	false
  modifiers: 	public
  name: 	publish
  paramsString: 	"Event event"
  returnType: 	void
  signature: 	"class/ClickCounterService/method/publish(Event)"

- clickCounterService_postApply: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	clickCounterService
  declaration: 	"private String postApply(Request req, Response res)"
  id: 	ClickCounterService_postApply
  methodBody: 	"      String body = req.body();
      try {
         YamlIdMap idMap = new YamlIdMap(Event.class.getPackageName());
         idMap.decode(body);
         Map<String, Object> map = idMap.getObjIdMap();
         for (Object value : map.values()) {
            Event event = (Event) value;
            apply(event);
         }
      }
      catch (Exception e) {
         String message = e.getMessage();
         if (message.contains(\"ReflectorMap could not find class description\")) {
            Logger.getGlobal().info(\"post apply ignores unknown event \" + body);
         }
         else {
            Logger.getGlobal().log(Level.SEVERE, \"postApply failed\", e);
         }
      }
      return \"apply done\";"
  modified: 	false
  modifiers: 	private
  name: 	postApply
  paramsString: 	"Request req, Response res"
  returnType: 	String
  signature: 	"class/ClickCounterService/method/postApply(Request,Response)"

- clickCounterService_businessLogic: 	org.fulib.classmodel.AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	clickCounterService
  id: 	ClickCounterService_businessLogic
  modified: 	false
  name: 	businessLogic
  other: 	clickCounterBusinessLogic_service
  propertyStyle: 	Bean

- clickCounterService_builder: 	org.fulib.classmodel.AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	clickCounterService
  id: 	ClickCounterService_builder
  modified: 	false
  name: 	builder
  other: 	clickCounterBuilder_service
  propertyStyle: 	Bean

- counter_id: 	org.fulib.classmodel.Attribute
  clazz: 	counter
  id: 	Counter_id
  modified: 	false
  name: 	id
  propertyStyle: 	Bean
  type: 	String
  typeSignature: 	String

- counter_count: 	org.fulib.classmodel.Attribute
  clazz: 	counter
  id: 	Counter_count
  modified: 	false
  name: 	count
  propertyStyle: 	Bean
  type: 	int
  typeSignature: 	int

