- c: 	org.fulib.classmodel.ClassModel
  classes: 	shopModel 	shopService
  defaultCollectionType: 	c1
  defaultPropertyStyle: 	Bean
  defaultRoleType: 	"java.util.ArrayList<%s>"
  mainJavaDir: 	"test/src/main/java"
  packageName: 	uks.debuggen.page.Shop
  packageSrcFolder: 	"test/src/main/java/uks/debuggen/page/Shop"

- shopModel: 	org.fulib.classmodel.Clazz
  attributes: 	shopModel_modelMap
  importList: 	"import java.util.LinkedHashMap;"
  imports: 	"import java.util.LinkedHashMap;"
  model: 	c
  modified: 	false
  name: 	ShopModel
  propertyStyle: 	Bean

- shopService: 	org.fulib.classmodel.Clazz
  attributes: 	shopService_history 	shopService_port 	shopService_spark 	shopService_model 	shopService_handlerMap
  importList: 	"import java.util.LinkedHashMap;" 	"import java.util.Map;" 	"import java.util.function.Consumer;" 	"import uks.debuggen.page.events.*;" 	"import org.fulib.yaml.Yaml;" 	"import spark.Service;" 	"import spark.Request;" 	"import spark.Response;" 	"import com.mashape.unirest.http.HttpResponse;" 	"import com.mashape.unirest.http.Unirest;" 	"import com.mashape.unirest.http.exceptions.UnirestException;" 	"import java.util.concurrent.ExecutorService;" 	"import java.util.concurrent.Executors;" 	"import java.util.logging.Logger;" 	"import java.util.logging.Level;"
  imports: 	"import java.util.LinkedHashMap;" 	"import java.util.Map;" 	"import java.util.function.Consumer;" 	"import uks.debuggen.page.events.*;" 	"import org.fulib.yaml.Yaml;" 	"import spark.Service;" 	"import spark.Request;" 	"import spark.Response;" 	"import com.mashape.unirest.http.HttpResponse;" 	"import com.mashape.unirest.http.Unirest;" 	"import com.mashape.unirest.http.exceptions.UnirestException;" 	"import java.util.concurrent.ExecutorService;" 	"import java.util.concurrent.Executors;" 	"import java.util.logging.Logger;" 	"import java.util.logging.Level;"
  methods: 	shopService_start 	shopService_getHello 	shopService_subscribeAndLoadOldEvents 	shopService_apply 	shopService_getPage 	shopService_initEventHandlerMap 	shopService_ignoreEvent 	shopService_publish 	shopService_postApply
  model: 	c
  modified: 	false
  name: 	ShopService
  propertyStyle: 	Bean

- c1: 	org.fulib.classmodel.CollectionType
  implClass: 	class java.util.ArrayList
  implTemplate: 	"java.util.ArrayList<%s>"
  itf: 	org.fulib.classmodel.CollectionInterface.List
  qualifiedImplName: 	java.util.ArrayList
  simpleImplName: 	ArrayList

- shopModel_modelMap: 	org.fulib.classmodel.Attribute
  clazz: 	shopModel
  id: 	ShopModel_modelMap
  initialization: 	"new LinkedHashMap<>()"
  modified: 	false
  name: 	modelMap
  propertyStyle: 	Bean
  type: 	"LinkedHashMap<String, Object>"
  typeSignature: 	"LinkedHashMap<String,Object>"

- shopService_history: 	org.fulib.classmodel.Attribute
  clazz: 	shopService
  id: 	ShopService_history
  initialization: 	"new LinkedHashMap<>()"
  modified: 	false
  name: 	history
  propertyStyle: 	Bean
  type: 	"LinkedHashMap<String, Event>"
  typeSignature: 	"LinkedHashMap<String,Event>"

- shopService_port: 	org.fulib.classmodel.Attribute
  clazz: 	shopService
  id: 	ShopService_port
  initialization: 	42001
  modified: 	false
  name: 	port
  propertyStyle: 	Bean
  type: 	int
  typeSignature: 	int

- shopService_spark: 	org.fulib.classmodel.Attribute
  clazz: 	shopService
  id: 	ShopService_spark
  modified: 	false
  name: 	spark
  propertyStyle: 	Bean
  type: 	Service
  typeSignature: 	Service

- shopService_model: 	org.fulib.classmodel.Attribute
  clazz: 	shopService
  id: 	ShopService_model
  modified: 	false
  name: 	model
  propertyStyle: 	Bean
  type: 	ShopModel
  typeSignature: 	ShopModel

- shopService_handlerMap: 	org.fulib.classmodel.Attribute
  clazz: 	shopService
  id: 	ShopService_handlerMap
  modified: 	false
  name: 	handlerMap
  propertyStyle: 	Bean
  type: 	"LinkedHashMap<Class, Consumer<Event>>"
  typeSignature: 	"LinkedHashMap<Class,Consumer<Event>>"

- shopService_start: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	shopService
  declaration: 	"public void start()"
  id: 	ShopService_start
  methodBody: 	"model = new ShopModel();
ExecutorService executor = Executors.newSingleThreadExecutor();
spark = Service.ignite();
spark.port(port);
spark.get(\"/page/:id\", (req, res) -> executor.submit(() -> this.getPage(req, res)).get());
spark.get(\"/\", (req, res) -> executor.submit(() -> this.getHello(req, res)).get());
spark.post(\"/apply\", (req, res) -> executor.submit(() -> this.postApply(req, res)).get());
executor.submit(this::subscribeAndLoadOldEvents);
Logger.getGlobal().info(\"Shop service is up and running on port \" + port);
"
  modified: 	false
  modifiers: 	public
  name: 	start
  paramsString: 	""
  returnType: 	void
  signature: 	"class/ShopService/method/start()"

- shopService_getHello: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	shopService
  declaration: 	"private String getHello(Request req, Response res)"
  id: 	ShopService_getHello
  methodBody: 	"try {
   String events = Yaml.encode(getHistory().values().toArray());
   String objects = Yaml.encode(model.getModelMap().values().toArray());
   return \"<p id='Shop'>This is the Shop service. </p>\n\" +
         \"<pre id=\\"history\\">\" + events + \"</pre>\n\" +
         \"<pre id=\\"data\\">\" + objects + \"</pre>\n\" +
         \"\";
}
catch (Exception e) {
   Logger.getGlobal().log(Level.SEVERE, e.getMessage(), e);
   return \"Shop Error \" + e.getMessage();
}
"
  modified: 	false
  modifiers: 	private
  name: 	getHello
  paramsString: 	"Request req, Response res"
  returnType: 	String
  signature: 	"class/ShopService/method/getHello(Request,Response)"

- shopService_subscribeAndLoadOldEvents: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	shopService
  declaration: 	"private void subscribeAndLoadOldEvents()"
  id: 	ShopService_subscribeAndLoadOldEvents
  methodBody: 	"ServiceSubscribed serviceSubscribed = new ServiceSubscribed()
      .setServiceUrl(\"http://localhost:42001/apply\");
String json = Yaml.encode(serviceSubscribed);
try {
   String url = \"http://localhost:42000/subscribe\";
   HttpResponse<String> response = Unirest
         .post(url)
         .body(json)
         .asString();
   String body = response.getBody();
   Map<String, Object> objectMap = Yaml.decode(body);
   for (Object obj : objectMap.values()) {
      apply((Event) obj);
   }
}
catch (UnirestException e) {
   e.printStackTrace();
}"
  modified: 	false
  modifiers: 	private
  name: 	subscribeAndLoadOldEvents
  paramsString: 	""
  returnType: 	void
  signature: 	"class/ShopService/method/subscribeAndLoadOldEvents()"

- shopService_apply: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	shopService
  declaration: 	"public void apply(Event event)"
  id: 	ShopService_apply
  methodBody: 	"if (history.get(event.getId()) != null) {
   return;
}
initEventHandlerMap();
Consumer<Event> handler = handlerMap.computeIfAbsent(event.getClass(), k -> this::ignoreEvent);
handler.accept(event);
history.put(event.getId(), event);
publish(event);"
  modified: 	false
  modifiers: 	public
  name: 	apply
  paramsString: 	"Event event"
  returnType: 	void
  signature: 	"class/ShopService/method/apply(Event)"

- shopService_getPage: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	shopService
  declaration: 	"public String getPage(Request request, Response response)"
  id: 	ShopService_getPage
  methodBody: 	"StringBuilder html = new StringBuilder();
String id = request.params(\"id\");

// 12:50
if (id.equals(\"12_50\")) {
   html.append(\"<form action=\\"/page/12_55\\" method=\\"get\\">\n\");
   // Shop 12:50
   html.append(\"   <p>Welcome to the event shop</p>\n\");
   html.append(\"   <p>What do you want?</p>\n\");
   html.append(\"   <p><input id=\\"event\\" name=\\"event\\" type=\\"hidden\\" value=\\"Shop shoes selected 12:51\\"></p>\n\");
   html.append(\"   <p><input id=\\"shoes\\" name=\\"button\\" type=\\"submit\\" value=\\"shoes\\"></p>\n\");
   html.append(\"   <p><input id=\\"tshirt\\" name=\\"button\\" type=\\"submit\\" value=\\"tshirt\\"></p>\n\");
   html.append(\"</form>\n\");
   return html.toString();
}

// 12:55
if (id.equals(\"12_55\")) {
   html.append(\"<form action=\\"/page/13_07\\" method=\\"get\\">\n\");
   // Shop 12:55
   html.append(\"   <p>Shoes order</p>\n\");
   html.append(\"   <p><input id=\\"count\\" name=\\"count\\" placeholder=\\"count?\\"></p>\n\");
   html.append(\"   <p><input id=\\"name\\" name=\\"name\\" placeholder=\\"name?\\"></p>\n\");
   html.append(\"   <p><input id=\\"address\\" name=\\"address\\" placeholder=\\"address?\\"></p>\n\");
   html.append(\"   <p><input id=\\"event\\" name=\\"event\\" type=\\"hidden\\" value=\\"order registered 13:00\\"></p>\n\");
   html.append(\"   <p><input id=\\"ok\\" name=\\"button\\" type=\\"submit\\" value=\\"ok\\"></p>\n\");
   html.append(\"</form>\n\");
   return html.toString();
}

// 13:07
if (id.equals(\"13_07\")) {
   html.append(\"<form action=\\"/page/next_page\\" method=\\"get\\">\n\");
   // Shop 13:07
   html.append(\"   <p>Your order</p>\n\");
   html.append(\"   <p>order1300 shoes is pending</p>\n\");
   html.append(\"   <p>What else do you want</p>\n\");
   html.append(\"   <p><input id=\\"shoes\\" name=\\"button\\" type=\\"submit\\" value=\\"shoes\\"></p>\n\");
   html.append(\"   <p><input id=\\"event\\" name=\\"event\\" type=\\"hidden\\" value=\\"Shop tshirt selected 13:10\\"></p>\n\");
   html.append(\"   <p><input id=\\"tshirt\\" name=\\"button\\" type=\\"submit\\" value=\\"tshirt\\"></p>\n\");
   html.append(\"</form>\n\");
   return html.toString();
}



html.append(\"This is the Shop Service page \" + id + \"\n\");
return html.toString();"
  modified: 	false
  modifiers: 	public
  name: 	getPage
  paramsString: 	"Request request, Response response"
  returnType: 	String
  signature: 	"class/ShopService/method/getPage(Request,Response)"

- shopService_initEventHandlerMap: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	shopService
  declaration: 	"private void initEventHandlerMap()"
  id: 	ShopService_initEventHandlerMap
  methodBody: 	"if (handlerMap == null) {
   handlerMap = new LinkedHashMap<>();
}
"
  modified: 	false
  modifiers: 	private
  name: 	initEventHandlerMap
  paramsString: 	""
  returnType: 	void
  signature: 	"class/ShopService/method/initEventHandlerMap()"

- shopService_ignoreEvent: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	shopService
  declaration: 	"private void ignoreEvent(Event event)"
  id: 	ShopService_ignoreEvent
  methodBody: 	"// empty
"
  modified: 	false
  modifiers: 	private
  name: 	ignoreEvent
  paramsString: 	"Event event"
  returnType: 	void
  signature: 	"class/ShopService/method/ignoreEvent(Event)"

- shopService_publish: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	shopService
  declaration: 	"public void publish(Event event)"
  id: 	ShopService_publish
  methodBody: 	"String json = Yaml.encode(event);

try {
   HttpResponse<String> response = Unirest
         .post(\"http://localhost:42000/publish\")
         .body(json)
         .asString();
}
catch (UnirestException e) {
   e.printStackTrace();
}"
  modified: 	false
  modifiers: 	public
  name: 	publish
  paramsString: 	"Event event"
  returnType: 	void
  signature: 	"class/ShopService/method/publish(Event)"

- shopService_postApply: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	shopService
  declaration: 	"private String postApply(Request req, Response res)"
  id: 	ShopService_postApply
  methodBody: 	"      try {
         String body = req.body();
         Map<String, Object> map = Yaml.decode(body);
         for (Object value : map.values()) {
            Event event = (Event) value;
            apply(event);
         }
      }
      catch (Exception e) {
         Logger.getGlobal().log(Level.SEVERE, \"postApply failed\", e);
      }
      return \"apply done\";"
  modified: 	false
  modifiers: 	private
  name: 	postApply
  paramsString: 	"Request req, Response res"
  returnType: 	String
  signature: 	"class/ShopService/method/postApply(Request,Response)"

