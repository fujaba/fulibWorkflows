- c: 	org.fulib.classmodel.ClassModel
  classes: 	studyRightModel 	studyRightService 	university 	room 	stop 	tour 	tourList
  defaultCollectionType: 	c1
  defaultPropertyStyle: 	Bean
  defaultRoleType: 	"java.util.ArrayList<%s>"
  mainJavaDir: 	"test/src/main/java"
  packageName: 	uks.debuggen.studyright.StudyRight
  packageSrcFolder: 	"test/src/main/java/uks/debuggen/studyright/StudyRight"

- studyRightModel: 	org.fulib.classmodel.Clazz
  attributes: 	studyRightModel_modelMap
  importList: 	"import java.util.LinkedHashMap;"
  imports: 	"import java.util.LinkedHashMap;"
  methods: 	studyRightModel_getOrCreateUniversity 	studyRightModel_getOrCreateRoom 	studyRightModel_getOrCreateStop 	studyRightModel_getOrCreateTour 	studyRightModel_getOrCreateTourList
  model: 	c
  modified: 	false
  name: 	StudyRightModel
  propertyStyle: 	Bean

- studyRightService: 	org.fulib.classmodel.Clazz
  attributes: 	studyRightService_history 	studyRightService_port 	studyRightService_spark 	studyRightService_model 	studyRightService_handlerMap
  importList: 	"import java.util.LinkedHashMap;" 	"import java.util.Map;" 	"import java.util.function.Consumer;" 	"import uks.debuggen.studyright.events.*;" 	"import org.fulib.yaml.Yaml;" 	"import spark.Service;" 	"import spark.Request;" 	"import spark.Response;" 	"import com.mashape.unirest.http.HttpResponse;" 	"import com.mashape.unirest.http.Unirest;" 	"import com.mashape.unirest.http.exceptions.UnirestException;" 	"import java.util.concurrent.ExecutorService;" 	"import java.util.concurrent.Executors;" 	"import java.util.logging.Logger;" 	"import java.util.logging.Level;"
  imports: 	"import java.util.LinkedHashMap;" 	"import java.util.Map;" 	"import java.util.function.Consumer;" 	"import uks.debuggen.studyright.events.*;" 	"import org.fulib.yaml.Yaml;" 	"import spark.Service;" 	"import spark.Request;" 	"import spark.Response;" 	"import com.mashape.unirest.http.HttpResponse;" 	"import com.mashape.unirest.http.Unirest;" 	"import com.mashape.unirest.http.exceptions.UnirestException;" 	"import java.util.concurrent.ExecutorService;" 	"import java.util.concurrent.Executors;" 	"import java.util.logging.Logger;" 	"import java.util.logging.Level;"
  methods: 	studyRightService_start 	studyRightService_getHello 	studyRightService_subscribeAndLoadOldEvents 	studyRightService_apply 	studyRightService_getPage 	studyRightService_getDemoPage 	studyRightService_handleRoomsLoaded 	studyRightService_handleDemoRoomsLoaded 	studyRightService_handleTourStarted 	studyRightService_handleDemoTourStarted 	studyRightService_handleRoomSelected 	studyRightService_handleDemoRoomSelected 	studyRightService_handleTourEndFound 	studyRightService_handleDemoTourEndFound 	studyRightService_handleUniversityEdited 	studyRightService_handleRoomEdited 	studyRightService_handleStopEdited 	studyRightService_handleTourEdited 	studyRightService_handleTourListEdited 	studyRightService_initEventHandlerMap 	studyRightService_ignoreEvent 	studyRightService_publish 	studyRightService_postApply 	studyRightService_stripBrackets
  model: 	c
  modified: 	false
  name: 	StudyRightService
  propertyStyle: 	Bean

- university: 	org.fulib.classmodel.Clazz
  attributes: 	university_id
  model: 	c
  modified: 	false
  name: 	University
  propertyStyle: 	Bean
  roles: 	university_rooms

- room: 	org.fulib.classmodel.Clazz
  attributes: 	room_id 	room_credits
  model: 	c
  modified: 	false
  name: 	Room
  propertyStyle: 	Bean
  roles: 	room_uni 	room_doors

- stop: 	org.fulib.classmodel.Clazz
  attributes: 	stop_id 	stop_motivation 	stop_room
  model: 	c
  modified: 	false
  name: 	Stop
  propertyStyle: 	Bean
  roles: 	stop_previousStop 	stop_nextStops

- tour: 	org.fulib.classmodel.Clazz
  attributes: 	tour_id 	tour_stops
  model: 	c
  modified: 	false
  name: 	Tour
  propertyStyle: 	Bean
  roles: 	tour_tourList

- tourList: 	org.fulib.classmodel.Clazz
  attributes: 	tourList_id
  model: 	c
  modified: 	false
  name: 	TourList
  propertyStyle: 	Bean
  roles: 	tourList_alternatives

- c1: 	org.fulib.classmodel.CollectionType
  implClass: 	class java.util.ArrayList
  implTemplate: 	"java.util.ArrayList<%s>"
  itf: 	org.fulib.classmodel.CollectionInterface.List
  qualifiedImplName: 	java.util.ArrayList
  simpleImplName: 	ArrayList

- studyRightModel_modelMap: 	org.fulib.classmodel.Attribute
  clazz: 	studyRightModel
  id: 	StudyRightModel_modelMap
  initialization: 	"new LinkedHashMap<>()"
  modified: 	false
  name: 	modelMap
  propertyStyle: 	Bean
  type: 	"LinkedHashMap<String, Object>"
  typeSignature: 	"LinkedHashMap<String,Object>"

- studyRightModel_getOrCreateUniversity: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	studyRightModel
  declaration: 	"public University getOrCreateUniversity(String id)"
  id: 	StudyRightModel_getOrCreateUniversity
  methodBody: 	"if (id == null) return null;
return (University) modelMap.computeIfAbsent(id, k -> new University().setId(k));
"
  modified: 	false
  modifiers: 	public
  name: 	getOrCreateUniversity
  paramsString: 	"String id"
  returnType: 	University
  signature: 	"class/StudyRightModel/method/getOrCreateUniversity(String)"

- studyRightModel_getOrCreateRoom: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	studyRightModel
  declaration: 	"public Room getOrCreateRoom(String id)"
  id: 	StudyRightModel_getOrCreateRoom
  methodBody: 	"if (id == null) return null;
return (Room) modelMap.computeIfAbsent(id, k -> new Room().setId(k));
"
  modified: 	false
  modifiers: 	public
  name: 	getOrCreateRoom
  paramsString: 	"String id"
  returnType: 	Room
  signature: 	"class/StudyRightModel/method/getOrCreateRoom(String)"

- studyRightModel_getOrCreateStop: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	studyRightModel
  declaration: 	"public Stop getOrCreateStop(String id)"
  id: 	StudyRightModel_getOrCreateStop
  methodBody: 	"if (id == null) return null;
return (Stop) modelMap.computeIfAbsent(id, k -> new Stop().setId(k));
"
  modified: 	false
  modifiers: 	public
  name: 	getOrCreateStop
  paramsString: 	"String id"
  returnType: 	Stop
  signature: 	"class/StudyRightModel/method/getOrCreateStop(String)"

- studyRightModel_getOrCreateTour: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	studyRightModel
  declaration: 	"public Tour getOrCreateTour(String id)"
  id: 	StudyRightModel_getOrCreateTour
  methodBody: 	"if (id == null) return null;
return (Tour) modelMap.computeIfAbsent(id, k -> new Tour().setId(k));
"
  modified: 	false
  modifiers: 	public
  name: 	getOrCreateTour
  paramsString: 	"String id"
  returnType: 	Tour
  signature: 	"class/StudyRightModel/method/getOrCreateTour(String)"

- studyRightModel_getOrCreateTourList: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	studyRightModel
  declaration: 	"public TourList getOrCreateTourList(String id)"
  id: 	StudyRightModel_getOrCreateTourList
  methodBody: 	"if (id == null) return null;
return (TourList) modelMap.computeIfAbsent(id, k -> new TourList().setId(k));
"
  modified: 	false
  modifiers: 	public
  name: 	getOrCreateTourList
  paramsString: 	"String id"
  returnType: 	TourList
  signature: 	"class/StudyRightModel/method/getOrCreateTourList(String)"

- studyRightService_history: 	org.fulib.classmodel.Attribute
  clazz: 	studyRightService
  id: 	StudyRightService_history
  initialization: 	"new LinkedHashMap<>()"
  modified: 	false
  name: 	history
  propertyStyle: 	Bean
  type: 	"LinkedHashMap<String, Event>"
  typeSignature: 	"LinkedHashMap<String,Event>"

- studyRightService_port: 	org.fulib.classmodel.Attribute
  clazz: 	studyRightService
  id: 	StudyRightService_port
  initialization: 	42400
  modified: 	false
  name: 	port
  propertyStyle: 	Bean
  type: 	int
  typeSignature: 	int

- studyRightService_spark: 	org.fulib.classmodel.Attribute
  clazz: 	studyRightService
  id: 	StudyRightService_spark
  modified: 	false
  name: 	spark
  propertyStyle: 	Bean
  type: 	Service
  typeSignature: 	Service

- studyRightService_model: 	org.fulib.classmodel.Attribute
  clazz: 	studyRightService
  id: 	StudyRightService_model
  modified: 	false
  name: 	model
  propertyStyle: 	Bean
  type: 	StudyRightModel
  typeSignature: 	StudyRightModel

- studyRightService_handlerMap: 	org.fulib.classmodel.Attribute
  clazz: 	studyRightService
  id: 	StudyRightService_handlerMap
  modified: 	false
  name: 	handlerMap
  propertyStyle: 	Bean
  type: 	"LinkedHashMap<Class, Consumer<Event>>"
  typeSignature: 	"LinkedHashMap<Class,Consumer<Event>>"

- studyRightService_start: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	studyRightService
  declaration: 	"public void start()"
  id: 	StudyRightService_start
  methodBody: 	"model = new StudyRightModel();
ExecutorService executor = Executors.newSingleThreadExecutor();
spark = Service.ignite();
spark.port(port);
spark.get(\"/page/:id\", (req, res) -> executor.submit(() -> this.getPage(req, res)).get());
spark.get(\"/\", (req, res) -> executor.submit(() -> this.getHello(req, res)).get());
spark.post(\"/apply\", (req, res) -> executor.submit(() -> this.postApply(req, res)).get());
executor.submit(this::subscribeAndLoadOldEvents);
Logger.getGlobal().info(\"StudyRight service is up and running on port \" + port);
"
  modified: 	false
  modifiers: 	public
  name: 	start
  paramsString: 	""
  returnType: 	void
  signature: 	"class/StudyRightService/method/start()"

- studyRightService_getHello: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	studyRightService
  declaration: 	"private String getHello(Request req, Response res)"
  id: 	StudyRightService_getHello
  methodBody: 	"try {
   String events = Yaml.encode(getHistory().values().toArray());
   String objects = Yaml.encode(model.getModelMap().values().toArray());
   return \"<p id='StudyRight'>This is the StudyRight service. </p>\n\" +
         \"<pre id=\\"history\\">\" + events + \"</pre>\n\" +
         \"<pre id=\\"data\\">\" + objects + \"</pre>\n\" +
         \"\";
}
catch (Exception e) {
   Logger.getGlobal().log(Level.SEVERE, e.getMessage(), e);
   return \"StudyRight Error \" + e.getMessage();
}
"
  modified: 	false
  modifiers: 	private
  name: 	getHello
  paramsString: 	"Request req, Response res"
  returnType: 	String
  signature: 	"class/StudyRightService/method/getHello(Request,Response)"

- studyRightService_subscribeAndLoadOldEvents: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	studyRightService
  declaration: 	"private void subscribeAndLoadOldEvents()"
  id: 	StudyRightService_subscribeAndLoadOldEvents
  methodBody: 	"ServiceSubscribed serviceSubscribed = new ServiceSubscribed()
      .setServiceUrl(\"http://localhost:42400/apply\");
String json = Yaml.encode(serviceSubscribed);
try {
   String url = \"http://localhost:42000/subscribe\";
   HttpResponse<String> response = Unirest
         .post(url)
         .body(json)
         .asString();
   String body = response.getBody();
   Map<String, Object> objectMap = Yaml.decode(body);
   for (Object obj : objectMap.values()) {
      apply((Event) obj);
   }
}
catch (UnirestException e) {
   e.printStackTrace();
}"
  modified: 	false
  modifiers: 	private
  name: 	subscribeAndLoadOldEvents
  paramsString: 	""
  returnType: 	void
  signature: 	"class/StudyRightService/method/subscribeAndLoadOldEvents()"

- studyRightService_apply: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	studyRightService
  declaration: 	"public void apply(Event event)"
  id: 	StudyRightService_apply
  methodBody: 	"if (history.get(event.getId()) != null) {
   return;
}
initEventHandlerMap();
Consumer<Event> handler = handlerMap.computeIfAbsent(event.getClass(), k -> this::ignoreEvent);
handler.accept(event);
history.put(event.getId(), event);
publish(event);"
  modified: 	false
  modifiers: 	public
  name: 	apply
  paramsString: 	"Event event"
  returnType: 	void
  signature: 	"class/StudyRightService/method/apply(Event)"

- studyRightService_getPage: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	studyRightService
  declaration: 	"public String getPage(Request request, Response response)"
  id: 	StudyRightService_getPage
  methodBody: 	"// no fulib
// add your page handling here
return getDemoPage(request, response);
"
  modified: 	false
  modifiers: 	public
  name: 	getPage
  paramsString: 	"Request request, Response response"
  returnType: 	String
  signature: 	"class/StudyRightService/method/getPage(Request,Response)"

- studyRightService_getDemoPage: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	studyRightService
  declaration: 	"public String getDemoPage(Request request, Response response)"
  id: 	StudyRightService_getDemoPage
  methodBody: 	"StringBuilder html = new StringBuilder();
String id = request.params(\"id\");
String event = request.queryParams(\"event\");

if (\"rooms loaded 12:00\".equals(event)) {

   // create RoomsLoaded: rooms loaded 12:00
   RoomsLoaded e1200 = new RoomsLoaded();
   e1200.setId(\"12:00\");
   apply(e1200);
}



// 11:00
if (id.equals(\"11_00\")) {
   html.append(\"<form action=\\"/page/12_13\\" method=\\"get\\">\n\");
   // StudyRight 11:00
   html.append(\"   <p>Welcome at Study Right</p>\n\");
   html.append(\"   <p>Find your way, start with math</p>\n\");
   html.append(\"   <p><input id=\\"event\\" name=\\"event\\" type=\\"hidden\\" value=\\"rooms loaded 12:00\\"></p>\n\");
   html.append(\"   <p><input id=\\"ok\\" name=\\"button\\" type=\\"submit\\" value=\\"ok\\"></p>\n\");
   html.append(\"</form>\n\");
   return html.toString();
}

// 12:13
if (id.equals(\"12_13\")) {
   html.append(\"<form action=\\"/page/next_page\\" method=\\"get\\">\n\");
   // StudyRight 12:13
   html.append(\"   <p>This are your alternatives</p>\n\");
   html.append(\"   <p>tour1 math algebra modeling exam</p>\n\");
   html.append(\"</form>\n\");
   return html.toString();
}



html.append(\"This is the Shop Service page \" + id + \"\n\");
return html.toString();"
  modified: 	false
  modifiers: 	public
  name: 	getDemoPage
  paramsString: 	"Request request, Response response"
  returnType: 	String
  signature: 	"class/StudyRightService/method/getDemoPage(Request,Response)"

- studyRightService_handleRoomsLoaded: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	studyRightService
  declaration: 	"private void handleRoomsLoaded(Event e)"
  id: 	StudyRightService_handleRoomsLoaded
  methodBody: 	"// no fulib
RoomsLoaded event = (RoomsLoaded) e;
handleDemoRoomsLoaded(event);
"
  modified: 	false
  modifiers: 	private
  name: 	handleRoomsLoaded
  paramsString: 	"Event e"
  returnType: 	void
  signature: 	"class/StudyRightService/method/handleRoomsLoaded(Event)"

- studyRightService_handleDemoRoomsLoaded: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	studyRightService
  declaration: 	"private void handleDemoRoomsLoaded(RoomsLoaded event)"
  id: 	StudyRightService_handleDemoRoomsLoaded
  methodBody: 	"if (event.getId().equals(\"12:00\")) {
   UniversityEdited studyRightEvent = new UniversityEdited();
   studyRightEvent.setId(\"12:00:00\");
   studyRightEvent.setIncrement(\"StudyRight\");
   studyRightEvent.setRooms(\"[math exam]\");
   apply(studyRightEvent);

   RoomEdited mathEvent = new RoomEdited();
   mathEvent.setId(\"12:00:01\");
   mathEvent.setIncrement(\"math\");
   mathEvent.setCredits(\"23\");
   mathEvent.setUni(\"StudyRight\");
   mathEvent.setDoors(\"[modeling algebra]\");
   apply(mathEvent);

   RoomEdited modelingEvent = new RoomEdited();
   modelingEvent.setId(\"12:00:02\");
   modelingEvent.setIncrement(\"modeling\");
   modelingEvent.setUni(\"StudyRight\");
   modelingEvent.setCredits(\"42\");
   modelingEvent.setDoors(\"[math algebra exam]\");
   apply(modelingEvent);

   RoomEdited algebraEvent = new RoomEdited();
   algebraEvent.setId(\"12:00:03\");
   algebraEvent.setIncrement(\"algebra\");
   algebraEvent.setUni(\"StudyRight\");
   algebraEvent.setCredits(\"12\");
   apply(algebraEvent);

   RoomEdited examEvent = new RoomEdited();
   examEvent.setId(\"12:00:04\");
   examEvent.setIncrement(\"exam\");
   examEvent.setCredits(\"0\");
   examEvent.setUni(\"StudyRight\");
   apply(examEvent);


   TourStarted e1201 = new TourStarted();

   e1201.setId(\"12:01\");
   e1201.setEvent(\"tour started 12:01\");
   apply(e1201);
}
"
  modified: 	false
  modifiers: 	private
  name: 	handleDemoRoomsLoaded
  paramsString: 	"RoomsLoaded event"
  returnType: 	void
  signature: 	"class/StudyRightService/method/handleDemoRoomsLoaded(RoomsLoaded)"

- studyRightService_handleTourStarted: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	studyRightService
  declaration: 	"private void handleTourStarted(Event e)"
  id: 	StudyRightService_handleTourStarted
  methodBody: 	"// no fulib
TourStarted event = (TourStarted) e;
handleDemoTourStarted(event);
"
  modified: 	false
  modifiers: 	private
  name: 	handleTourStarted
  paramsString: 	"Event e"
  returnType: 	void
  signature: 	"class/StudyRightService/method/handleTourStarted(Event)"

- studyRightService_handleDemoTourStarted: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	studyRightService
  declaration: 	"private void handleDemoTourStarted(TourStarted event)"
  id: 	StudyRightService_handleDemoTourStarted
  methodBody: 	"if (event.getId().equals(\"12:01\")) {
   StopEdited s01Event = new StopEdited();
   s01Event.setId(\"12:01:01\");
   s01Event.setIncrement(\"s01\");
   s01Event.setMotivation(\"77\");
   apply(s01Event);


   RoomSelected e1202 = new RoomSelected();

   e1202.setId(\"12:02\");
   e1202.setEvent(\"room selected 12:02\");
   e1202.setRoom(\"math\");
   e1202.setPreviousStop(\"s01\");
   apply(e1202);
}
"
  modified: 	false
  modifiers: 	private
  name: 	handleDemoTourStarted
  paramsString: 	"TourStarted event"
  returnType: 	void
  signature: 	"class/StudyRightService/method/handleDemoTourStarted(TourStarted)"

- studyRightService_handleRoomSelected: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	studyRightService
  declaration: 	"private void handleRoomSelected(Event e)"
  id: 	StudyRightService_handleRoomSelected
  methodBody: 	"// no fulib
RoomSelected event = (RoomSelected) e;
handleDemoRoomSelected(event);
"
  modified: 	false
  modifiers: 	private
  name: 	handleRoomSelected
  paramsString: 	"Event e"
  returnType: 	void
  signature: 	"class/StudyRightService/method/handleRoomSelected(Event)"

- studyRightService_handleDemoRoomSelected: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	studyRightService
  declaration: 	"private void handleDemoRoomSelected(RoomSelected event)"
  id: 	StudyRightService_handleDemoRoomSelected
  methodBody: 	"if (event.getId().equals(\"12:02\")) {
   StopEdited s02Event = new StopEdited();
   s02Event.setId(\"12:02:01\");
   s02Event.setIncrement(\"s02\");
   s02Event.setRoom(\"math\");
   s02Event.setMotivation(\"54\");
   s02Event.setPreviousStop(\"s01\");
   apply(s02Event);


   RoomSelected e1203 = new RoomSelected();

   e1203.setId(\"12:03\");
   e1203.setEvent(\"room selected 12:03\");
   e1203.setRoom(\"algebra\");
   e1203.setPreviousStop(\"s02\");
   apply(e1203);

   RoomSelected e1204 = new RoomSelected();

   e1204.setId(\"12:04\");
   e1204.setEvent(\"room selected 12:04\");
   e1204.setRoom(\"modeling\");
   e1204.setPreviousStop(\"s02\");
   apply(e1204);
}
if (event.getId().equals(\"12:03\")) {
   StopEdited s03Event = new StopEdited();
   s03Event.setId(\"12:03:01\");
   s03Event.setIncrement(\"s03\");
   s03Event.setRoom(\"algebra\");
   s03Event.setPreviousStop(\"s02\");
   s03Event.setMotivation(\"42\");
   apply(s03Event);


   RoomSelected e1205 = new RoomSelected();

   e1205.setId(\"12:05\");
   e1205.setEvent(\"room selected 12:05\");
   e1205.setPreviousStop(\"s03\");
   e1205.setRoom(\"modeling\");
   apply(e1205);

   RoomSelected e1206 = new RoomSelected();

   e1206.setId(\"12:06\");
   e1206.setEvent(\"room selected 12:06\");
   e1206.setPreviousStop(\"s03\");
   e1206.setRoom(\"math\");
   apply(e1206);
}
if (event.getId().equals(\"12:05\")) {
   StopEdited s05Event = new StopEdited();
   s05Event.setId(\"12:05:01\");
   s05Event.setIncrement(\"s05\");
   s05Event.setRoom(\"modeling\");
   s05Event.setPreviousStop(\"s03\");
   s05Event.setMotivation(\"0\");
   apply(s05Event);


   RoomSelected e1207 = new RoomSelected();

   e1207.setId(\"12:07\");
   e1207.setEvent(\"room selected 12:07\");
   e1207.setPreviousStop(\"s05\");
   e1207.setRoom(\"math\");
   apply(e1207);

   RoomSelected e1208 = new RoomSelected();

   e1208.setId(\"12:08\");
   e1208.setEvent(\"room selected 12:08\");
   e1208.setPreviousStop(\"s05\");
   e1208.setRoom(\"exam\");
   apply(e1208);
}
if (event.getId().equals(\"12:07\")) {
   StopEdited s07Event = new StopEdited();
   s07Event.setId(\"12:07:01\");
   s07Event.setIncrement(\"s07\");
   s07Event.setRoom(\"math\");
   s07Event.setPreviousStop(\"s05\");
   s07Event.setMotivation(\"-23\");
   apply(s07Event);

}
if (event.getId().equals(\"12:08\")) {
   StopEdited s08Event = new StopEdited();
   s08Event.setId(\"12:08:01\");
   s08Event.setIncrement(\"s08\");
   s08Event.setRoom(\"exam\");
   s08Event.setPreviousStop(\"s05\");
   s08Event.setMotivation(\"0\");
   apply(s08Event);

   TourEdited tour1Event = new TourEdited();
   tour1Event.setId(\"12:08:02\");
   tour1Event.setIncrement(\"tour1\");
   tour1Event.setStops(\"exam\");
   apply(tour1Event);

   TourListEdited allToursEvent = new TourListEdited();
   allToursEvent.setId(\"12:08:03\");
   allToursEvent.setIncrement(\"allTours\");
   allToursEvent.setAlternatives(\"[tour1]\");
   apply(allToursEvent);


   TourEndFound e1209 = new TourEndFound();

   e1209.setId(\"12:09\");
   e1209.setEvent(\"tour end found 12:09\");
   e1209.setStop(\"s08\");
   e1209.setTour(\"tour1\");
   e1209.setTourList(\"allTours\");
   apply(e1209);
}
"
  modified: 	false
  modifiers: 	private
  name: 	handleDemoRoomSelected
  paramsString: 	"RoomSelected event"
  returnType: 	void
  signature: 	"class/StudyRightService/method/handleDemoRoomSelected(RoomSelected)"

- studyRightService_handleTourEndFound: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	studyRightService
  declaration: 	"private void handleTourEndFound(Event e)"
  id: 	StudyRightService_handleTourEndFound
  methodBody: 	"// no fulib
TourEndFound event = (TourEndFound) e;
handleDemoTourEndFound(event);
"
  modified: 	false
  modifiers: 	private
  name: 	handleTourEndFound
  paramsString: 	"Event e"
  returnType: 	void
  signature: 	"class/StudyRightService/method/handleTourEndFound(Event)"

- studyRightService_handleDemoTourEndFound: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	studyRightService
  declaration: 	"private void handleDemoTourEndFound(TourEndFound event)"
  id: 	StudyRightService_handleDemoTourEndFound
  methodBody: 	"if (event.getId().equals(\"12:09\")) {
   TourEdited tour1Event = new TourEdited();
   tour1Event.setId(\"12:09:01\");
   tour1Event.setIncrement(\"tour1\");
   tour1Event.setStops(\"modeling exam\");
   tour1Event.setTourList(\"allTours\");
   apply(tour1Event);


   TourEndFound e1210 = new TourEndFound();

   e1210.setId(\"12:10\");
   e1210.setEvent(\"tour end found 12:10\");
   e1210.setStop(\"s05\");
   e1210.setTour(\"tour1\");
   apply(e1210);
}
if (event.getId().equals(\"12:10\")) {
   TourEdited tour1Event = new TourEdited();
   tour1Event.setId(\"12:10:01\");
   tour1Event.setIncrement(\"tour1\");
   tour1Event.setStops(\"algebra modeling exam\");
   apply(tour1Event);


   TourEndFound e1211 = new TourEndFound();

   e1211.setId(\"12:11\");
   e1211.setEvent(\"tour end found 12:11\");
   e1211.setStop(\"s03\");
   e1211.setTour(\"tour1\");
   apply(e1211);
}
if (event.getId().equals(\"12:11\")) {
   TourEdited tour1Event = new TourEdited();
   tour1Event.setId(\"12:11:01\");
   tour1Event.setIncrement(\"tour1\");
   tour1Event.setStops(\"math algebra modeling exam\");
   apply(tour1Event);


   TourEndFound e1212 = new TourEndFound();

   e1212.setId(\"12:12\");
   e1212.setEvent(\"tour end found 12:12\");
   e1212.setStop(\"s02\");
   e1212.setTour(\"tour1\");
   apply(e1212);
}
"
  modified: 	false
  modifiers: 	private
  name: 	handleDemoTourEndFound
  paramsString: 	"TourEndFound event"
  returnType: 	void
  signature: 	"class/StudyRightService/method/handleDemoTourEndFound(TourEndFound)"

- studyRightService_handleUniversityEdited: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	studyRightService
  declaration: 	"private void handleUniversityEdited(Event e)"
  id: 	StudyRightService_handleUniversityEdited
  methodBody: 	"UniversityEdited event = (UniversityEdited) e;
University object = model.getOrCreateUniversity(event.getIncrement());
for (String name : stripBrackets(event.getRooms()).split(\"\\s+\")) {
if (name.equals(\"\")) continue;
   object.withRooms(model.getOrCreateRoom(name));
}
"
  modified: 	false
  modifiers: 	private
  name: 	handleUniversityEdited
  paramsString: 	"Event e"
  returnType: 	void
  signature: 	"class/StudyRightService/method/handleUniversityEdited(Event)"

- studyRightService_handleRoomEdited: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	studyRightService
  declaration: 	"private void handleRoomEdited(Event e)"
  id: 	StudyRightService_handleRoomEdited
  methodBody: 	"RoomEdited event = (RoomEdited) e;
Room object = model.getOrCreateRoom(event.getIncrement());
object.setCredits(event.getCredits());
object.setUni(model.getOrCreateUniversity(event.getUni()));
for (String name : stripBrackets(event.getDoors()).split(\"\\s+\")) {
if (name.equals(\"\")) continue;
   object.withDoors(model.getOrCreateRoom(name));
}
"
  modified: 	false
  modifiers: 	private
  name: 	handleRoomEdited
  paramsString: 	"Event e"
  returnType: 	void
  signature: 	"class/StudyRightService/method/handleRoomEdited(Event)"

- studyRightService_handleStopEdited: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	studyRightService
  declaration: 	"private void handleStopEdited(Event e)"
  id: 	StudyRightService_handleStopEdited
  methodBody: 	"StopEdited event = (StopEdited) e;
Stop object = model.getOrCreateStop(event.getIncrement());
object.setMotivation(event.getMotivation());
object.setRoom(event.getRoom());
object.setPreviousStop(model.getOrCreateStop(event.getPreviousStop()));
"
  modified: 	false
  modifiers: 	private
  name: 	handleStopEdited
  paramsString: 	"Event e"
  returnType: 	void
  signature: 	"class/StudyRightService/method/handleStopEdited(Event)"

- studyRightService_handleTourEdited: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	studyRightService
  declaration: 	"private void handleTourEdited(Event e)"
  id: 	StudyRightService_handleTourEdited
  methodBody: 	"TourEdited event = (TourEdited) e;
Tour object = model.getOrCreateTour(event.getIncrement());
object.setStops(event.getStops());
object.setTourList(model.getOrCreateTourList(event.getTourList()));
"
  modified: 	false
  modifiers: 	private
  name: 	handleTourEdited
  paramsString: 	"Event e"
  returnType: 	void
  signature: 	"class/StudyRightService/method/handleTourEdited(Event)"

- studyRightService_handleTourListEdited: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	studyRightService
  declaration: 	"private void handleTourListEdited(Event e)"
  id: 	StudyRightService_handleTourListEdited
  methodBody: 	"TourListEdited event = (TourListEdited) e;
TourList object = model.getOrCreateTourList(event.getIncrement());
for (String name : stripBrackets(event.getAlternatives()).split(\"\\s+\")) {
if (name.equals(\"\")) continue;
   object.withAlternatives(model.getOrCreateTour(name));
}
"
  modified: 	false
  modifiers: 	private
  name: 	handleTourListEdited
  paramsString: 	"Event e"
  returnType: 	void
  signature: 	"class/StudyRightService/method/handleTourListEdited(Event)"

- studyRightService_initEventHandlerMap: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	studyRightService
  declaration: 	"private void initEventHandlerMap()"
  id: 	StudyRightService_initEventHandlerMap
  methodBody: 	"if (handlerMap == null) {
   handlerMap = new LinkedHashMap<>();
   handlerMap.put(RoomsLoaded.class, this::handleRoomsLoaded);
   handlerMap.put(TourStarted.class, this::handleTourStarted);
   handlerMap.put(RoomSelected.class, this::handleRoomSelected);
   handlerMap.put(TourEndFound.class, this::handleTourEndFound);
   handlerMap.put(UniversityEdited.class, this::handleUniversityEdited);
   handlerMap.put(RoomEdited.class, this::handleRoomEdited);
   handlerMap.put(StopEdited.class, this::handleStopEdited);
   handlerMap.put(TourEdited.class, this::handleTourEdited);
   handlerMap.put(TourListEdited.class, this::handleTourListEdited);
}
"
  modified: 	false
  modifiers: 	private
  name: 	initEventHandlerMap
  paramsString: 	""
  returnType: 	void
  signature: 	"class/StudyRightService/method/initEventHandlerMap()"

- studyRightService_ignoreEvent: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	studyRightService
  declaration: 	"private void ignoreEvent(Event event)"
  id: 	StudyRightService_ignoreEvent
  methodBody: 	"// empty
"
  modified: 	false
  modifiers: 	private
  name: 	ignoreEvent
  paramsString: 	"Event event"
  returnType: 	void
  signature: 	"class/StudyRightService/method/ignoreEvent(Event)"

- studyRightService_publish: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	studyRightService
  declaration: 	"public void publish(Event event)"
  id: 	StudyRightService_publish
  methodBody: 	"String json = Yaml.encode(event);

try {
   HttpResponse<String> response = Unirest
         .post(\"http://localhost:42000/publish\")
         .body(json)
         .asString();
}
catch (UnirestException e) {
   e.printStackTrace();
}"
  modified: 	false
  modifiers: 	public
  name: 	publish
  paramsString: 	"Event event"
  returnType: 	void
  signature: 	"class/StudyRightService/method/publish(Event)"

- studyRightService_postApply: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	studyRightService
  declaration: 	"private String postApply(Request req, Response res)"
  id: 	StudyRightService_postApply
  methodBody: 	"      try {
         String body = req.body();
         Map<String, Object> map = Yaml.decode(body);
         for (Object value : map.values()) {
            Event event = (Event) value;
            apply(event);
         }
      }
      catch (Exception e) {
         Logger.getGlobal().log(Level.SEVERE, \"postApply failed\", e);
      }
      return \"apply done\";"
  modified: 	false
  modifiers: 	private
  name: 	postApply
  paramsString: 	"Request req, Response res"
  returnType: 	String
  signature: 	"class/StudyRightService/method/postApply(Request,Response)"

- studyRightService_stripBrackets: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	studyRightService
  declaration: 	"public String stripBrackets(String back)"
  id: 	StudyRightService_stripBrackets
  methodBody: 	"      if (back == null) {
         return \"\";
      }
      int open = back.indexOf('[');
      int close = back.indexOf(']');
      if (open >= 0 && close >= 0) {
         back = back.substring(open + 1, close);
      }
      return back;"
  modified: 	false
  modifiers: 	public
  name: 	stripBrackets
  paramsString: 	"String back"
  returnType: 	String
  signature: 	"class/StudyRightService/method/stripBrackets(String)"

- university_id: 	org.fulib.classmodel.Attribute
  clazz: 	university
  id: 	University_id
  modified: 	false
  name: 	id
  propertyStyle: 	Bean
  type: 	String
  typeSignature: 	String

- university_rooms: 	org.fulib.classmodel.AssocRole
  aggregation: 	false
  cardinality: 	42
  clazz: 	university
  collectionType: 	c1
  id: 	University_rooms
  modified: 	false
  name: 	rooms
  other: 	room_uni
  propertyStyle: 	Bean
  roleType: 	"java.util.ArrayList<%s>"

- room_id: 	org.fulib.classmodel.Attribute
  clazz: 	room
  id: 	Room_id
  modified: 	false
  name: 	id
  propertyStyle: 	Bean
  type: 	String
  typeSignature: 	String

- room_credits: 	org.fulib.classmodel.Attribute
  clazz: 	room
  id: 	Room_credits
  modified: 	false
  name: 	credits
  propertyStyle: 	Bean
  type: 	String
  typeSignature: 	String

- room_uni: 	org.fulib.classmodel.AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	room
  id: 	Room_uni
  modified: 	false
  name: 	uni
  other: 	university_rooms
  propertyStyle: 	Bean

- room_doors: 	org.fulib.classmodel.AssocRole
  aggregation: 	false
  cardinality: 	42
  clazz: 	room
  collectionType: 	c1
  id: 	Room_doors
  modified: 	false
  name: 	doors
  other: 	room_doors
  propertyStyle: 	Bean
  roleType: 	"java.util.ArrayList<%s>"

- stop_id: 	org.fulib.classmodel.Attribute
  clazz: 	stop
  id: 	Stop_id
  modified: 	false
  name: 	id
  propertyStyle: 	Bean
  type: 	String
  typeSignature: 	String

- stop_motivation: 	org.fulib.classmodel.Attribute
  clazz: 	stop
  id: 	Stop_motivation
  modified: 	false
  name: 	motivation
  propertyStyle: 	Bean
  type: 	String
  typeSignature: 	String

- stop_room: 	org.fulib.classmodel.Attribute
  clazz: 	stop
  id: 	Stop_room
  modified: 	false
  name: 	room
  propertyStyle: 	Bean
  type: 	String
  typeSignature: 	String

- stop_previousStop: 	org.fulib.classmodel.AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	stop
  id: 	Stop_previousStop
  modified: 	false
  name: 	previousStop
  other: 	stop_nextStops
  propertyStyle: 	Bean

- stop_nextStops: 	org.fulib.classmodel.AssocRole
  aggregation: 	false
  cardinality: 	42
  clazz: 	stop
  collectionType: 	c1
  id: 	Stop_nextStops
  modified: 	false
  name: 	nextStops
  other: 	stop_previousStop
  propertyStyle: 	Bean
  roleType: 	"java.util.ArrayList<%s>"

- tour_id: 	org.fulib.classmodel.Attribute
  clazz: 	tour
  id: 	Tour_id
  modified: 	false
  name: 	id
  propertyStyle: 	Bean
  type: 	String
  typeSignature: 	String

- tour_stops: 	org.fulib.classmodel.Attribute
  clazz: 	tour
  id: 	Tour_stops
  modified: 	false
  name: 	stops
  propertyStyle: 	Bean
  type: 	String
  typeSignature: 	String

- tour_tourList: 	org.fulib.classmodel.AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	tour
  id: 	Tour_tourList
  modified: 	false
  name: 	tourList
  other: 	tourList_alternatives
  propertyStyle: 	Bean

- tourList_id: 	org.fulib.classmodel.Attribute
  clazz: 	tourList
  id: 	TourList_id
  modified: 	false
  name: 	id
  propertyStyle: 	Bean
  type: 	String
  typeSignature: 	String

- tourList_alternatives: 	org.fulib.classmodel.AssocRole
  aggregation: 	false
  cardinality: 	42
  clazz: 	tourList
  collectionType: 	c1
  id: 	TourList_alternatives
  modified: 	false
  name: 	alternatives
  other: 	tour_tourList
  propertyStyle: 	Bean
  roleType: 	"java.util.ArrayList<%s>"

