- c: 	org.fulib.classmodel.ClassModel
  classes: 	studyRightModel 	studyRightBusinessLogic 	studyRightBuilder 	studyRightService 	university 	room 	student 	tourList 	stop 	tour 	person
  defaultCollectionType: 	c1
  defaultPropertyStyle: 	Bean
  defaultRoleType: 	"java.util.ArrayList<%s>"
  mainJavaDir: 	"test/src/main/java"
  packageName: 	uks.debuggen.studyright.StudyRight
  packageSrcFolder: 	"test/src/main/java/uks/debuggen/studyright/StudyRight"

- studyRightModel: 	org.fulib.classmodel.Clazz
  attributes: 	studyRightModel_modelMap
  importList: 	"import java.util.LinkedHashMap;"
  imports: 	"import java.util.LinkedHashMap;"
  methods: 	studyRightModel_getOrCreateUniversity 	studyRightModel_getOrCreateRoom 	studyRightModel_getOrCreateStudent 	studyRightModel_getOrCreateTourList 	studyRightModel_getOrCreateStop 	studyRightModel_getOrCreateTour
  model: 	c
  modified: 	false
  name: 	StudyRightModel
  propertyStyle: 	Bean

- studyRightBusinessLogic: 	org.fulib.classmodel.Clazz
  attributes: 	studyRightBusinessLogic_model 	studyRightBusinessLogic_handlerMap
  importList: 	"import java.util.LinkedHashMap;" 	"import java.util.function.Consumer;" 	"import uks.debuggen.studyright.events.*;"
  imports: 	"import java.util.LinkedHashMap;" 	"import java.util.function.Consumer;" 	"import uks.debuggen.studyright.events.*;"
  methods: 	studyRightBusinessLogic_handleLoadRoomsCommand 	studyRightBusinessLogic_handleDemoLoadRoomsCommand 	studyRightBusinessLogic_handleFindToursCommand 	studyRightBusinessLogic_handleDemoFindToursCommand 	studyRightBusinessLogic_handleVisitRoomCommand 	studyRightBusinessLogic_handleDemoVisitRoomCommand 	studyRightBusinessLogic_handleCollectTourStopsCommand 	studyRightBusinessLogic_handleDemoCollectTourStopsCommand 	studyRightBusinessLogic_initEventHandlerMap 	studyRightBusinessLogic_ignoreEvent 	studyRightBusinessLogic_getHandler
  model: 	c
  modified: 	false
  name: 	StudyRightBusinessLogic
  propertyStyle: 	Bean
  roles: 	studyRightBusinessLogic_builder 	studyRightBusinessLogic_service

- studyRightBuilder: 	org.fulib.classmodel.Clazz
  attributes: 	studyRightBuilder_model 	studyRightBuilder_eventStore 	studyRightBuilder_loaderMap 	studyRightBuilder_groupStore
  importList: 	"import java.util.LinkedHashMap;" 	"import java.util.function.Consumer;" 	"import uks.debuggen.studyright.events.*;" 	"import java.util.function.Function;"
  imports: 	"import java.util.LinkedHashMap;" 	"import java.util.function.Consumer;" 	"import uks.debuggen.studyright.events.*;" 	"import java.util.function.Function;"
<<<<<<< HEAD
  methods: 	studyRightBuilder_outdated 	studyRightBuilder_storeUniversityBuilt 	studyRightBuilder_loadUniversityBuilt 	studyRightBuilder_storeRoomBuilt 	studyRightBuilder_loadRoomBuilt 	studyRightBuilder_storeStudentBuilt 	studyRightBuilder_loadStudentBuilt 	studyRightBuilder_storeTourListBuilt 	studyRightBuilder_loadTourListBuilt 	studyRightBuilder_storeStopBuilt 	studyRightBuilder_loadStopBuilt 	studyRightBuilder_storeTourBuilt 	studyRightBuilder_loadTourBuilt 	studyRightBuilder_load 	studyRightBuilder_initLoaderMap 	studyRightBuilder_getObjectId 	studyRightBuilder_addToGroup 	studyRightBuilder_stripBrackets
=======
  methods: 	studyRightBuilder_outdated 	studyRightBuilder_storeUniversityBuilt 	studyRightBuilder_loadUniversityBuilt 	studyRightBuilder_storeRoomBuilt 	studyRightBuilder_loadRoomBuilt 	studyRightBuilder_storeStudentBuilt 	studyRightBuilder_loadStudentBuilt 	studyRightBuilder_storeTourListBuilt 	studyRightBuilder_loadTourListBuilt 	studyRightBuilder_storeStopBuilt 	studyRightBuilder_loadStopBuilt 	studyRightBuilder_storeTourBuilt 	studyRightBuilder_loadTourBuilt 	studyRightBuilder_load 	studyRightBuilder_initLoaderMap 	studyRightBuilder_getVarName 	studyRightBuilder_addToGroup 	studyRightBuilder_stripBrackets
>>>>>>> d3ea970929d108027c425d763c0cb0d0be7e0237
  model: 	c
  modified: 	false
  name: 	StudyRightBuilder
  propertyStyle: 	Bean
  roles: 	studyRightBuilder_businessLogic 	studyRightBuilder_service

- studyRightService: 	org.fulib.classmodel.Clazz
  attributes: 	studyRightService_history 	studyRightService_port 	studyRightService_spark 	studyRightService_model
  importList: 	"import java.util.LinkedHashMap;" 	"import java.time.Instant;" 	"import java.time.format.DateTimeFormatter;" 	"import java.util.Map;" 	"import java.util.function.Consumer;" 	"import uks.debuggen.studyright.events.*;" 	"import org.fulib.yaml.Yaml;" 	"import org.fulib.yaml.YamlIdMap;" 	"import spark.Service;" 	"import spark.Request;" 	"import spark.Response;" 	"import com.mashape.unirest.http.HttpResponse;" 	"import com.mashape.unirest.http.Unirest;" 	"import com.mashape.unirest.http.exceptions.UnirestException;" 	"import java.util.concurrent.ExecutorService;" 	"import java.util.concurrent.Executors;" 	"import java.util.logging.Logger;" 	"import java.util.logging.Level;"
  imports: 	"import java.util.LinkedHashMap;" 	"import java.time.Instant;" 	"import java.time.format.DateTimeFormatter;" 	"import java.util.Map;" 	"import java.util.function.Consumer;" 	"import uks.debuggen.studyright.events.*;" 	"import org.fulib.yaml.Yaml;" 	"import org.fulib.yaml.YamlIdMap;" 	"import spark.Service;" 	"import spark.Request;" 	"import spark.Response;" 	"import com.mashape.unirest.http.HttpResponse;" 	"import com.mashape.unirest.http.Unirest;" 	"import com.mashape.unirest.http.exceptions.UnirestException;" 	"import java.util.concurrent.ExecutorService;" 	"import java.util.concurrent.Executors;" 	"import java.util.logging.Logger;" 	"import java.util.logging.Level;"
  methods: 	studyRightService_query 	studyRightService_isoNow 	studyRightService_start 	studyRightService_getHello 	studyRightService_subscribeAndLoadOldEvents 	studyRightService_apply 	studyRightService_getPage 	studyRightService_getDemoPage 	studyRightService_publish 	studyRightService_postApply
  model: 	c
  modified: 	false
  name: 	StudyRightService
  propertyStyle: 	Bean
  roles: 	studyRightService_businessLogic 	studyRightService_builder

- university: 	org.fulib.classmodel.Clazz
  attributes: 	university_id
  model: 	c
  modified: 	false
  name: 	University
  propertyStyle: 	Bean
  roles: 	university_rooms 	university_persons

- room: 	org.fulib.classmodel.Clazz
  attributes: 	room_id 	room_credits
  model: 	c
  modified: 	false
  name: 	Room
  propertyStyle: 	Bean
  roles: 	room_uni 	room_doors

- student: 	org.fulib.classmodel.Clazz
  attributes: 	student_name 	student_birthYear 	student_studentId 	student_uni
  model: 	c
  modified: 	false
  name: 	Student
  propertyStyle: 	Bean
  superClass: 	person

- tourList: 	org.fulib.classmodel.Clazz
  attributes: 	tourList_id
  model: 	c
  modified: 	false
  name: 	TourList
  propertyStyle: 	Bean
  roles: 	tourList_alternatives

- stop: 	org.fulib.classmodel.Clazz
  attributes: 	stop_id 	stop_motivation 	stop_room
  model: 	c
  modified: 	false
  name: 	Stop
  propertyStyle: 	Bean
  roles: 	stop_previousStop 	stop_nextStops

- tour: 	org.fulib.classmodel.Clazz
  attributes: 	tour_id 	tour_stops
  model: 	c
  modified: 	false
  name: 	Tour
  propertyStyle: 	Bean
  roles: 	tour_tourList

- person: 	org.fulib.classmodel.Clazz
  attributes: 	person_id 	person_name 	person_birthYear
  model: 	c
  modified: 	false
  name: 	Person
  propertyStyle: 	Bean
  roles: 	person_uni
  subClasses: 	student

- c1: 	org.fulib.classmodel.CollectionType
  implClass: 	class java.util.ArrayList
  implTemplate: 	"java.util.ArrayList<%s>"
  itf: 	org.fulib.classmodel.CollectionInterface.List
  qualifiedImplName: 	java.util.ArrayList
  simpleImplName: 	ArrayList

- studyRightModel_modelMap: 	org.fulib.classmodel.Attribute
  clazz: 	studyRightModel
  id: 	StudyRightModel_modelMap
  initialization: 	"new LinkedHashMap<>()"
  modified: 	false
  name: 	modelMap
  propertyStyle: 	Bean
  type: 	"LinkedHashMap<String, Object>"
  typeSignature: 	"LinkedHashMap<String,Object>"

- studyRightModel_getOrCreateUniversity: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	studyRightModel
  declaration: 	"public University getOrCreateUniversity(String id)"
  id: 	StudyRightModel_getOrCreateUniversity
  methodBody: 	"if (id == null) return null;
return (University) modelMap.computeIfAbsent(id, k -> new University().setId(k));
"
  modified: 	false
  modifiers: 	public
  name: 	getOrCreateUniversity
  paramsString: 	"String id"
  returnType: 	University
  signature: 	"class/StudyRightModel/method/getOrCreateUniversity(String)"

- studyRightModel_getOrCreateRoom: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	studyRightModel
  declaration: 	"public Room getOrCreateRoom(String id)"
  id: 	StudyRightModel_getOrCreateRoom
  methodBody: 	"if (id == null) return null;
return (Room) modelMap.computeIfAbsent(id, k -> new Room().setId(k));
"
  modified: 	false
  modifiers: 	public
  name: 	getOrCreateRoom
  paramsString: 	"String id"
  returnType: 	Room
  signature: 	"class/StudyRightModel/method/getOrCreateRoom(String)"

- studyRightModel_getOrCreateStudent: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	studyRightModel
  declaration: 	"public Student getOrCreateStudent(String id)"
  id: 	StudyRightModel_getOrCreateStudent
  methodBody: 	"if (id == null) return null;
return (Student) modelMap.computeIfAbsent(id, k -> new Student().setId(k));
"
  modified: 	false
  modifiers: 	public
  name: 	getOrCreateStudent
  paramsString: 	"String id"
  returnType: 	Student
  signature: 	"class/StudyRightModel/method/getOrCreateStudent(String)"

- studyRightModel_getOrCreateTourList: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	studyRightModel
  declaration: 	"public TourList getOrCreateTourList(String id)"
  id: 	StudyRightModel_getOrCreateTourList
  methodBody: 	"if (id == null) return null;
return (TourList) modelMap.computeIfAbsent(id, k -> new TourList().setId(k));
"
  modified: 	false
  modifiers: 	public
  name: 	getOrCreateTourList
  paramsString: 	"String id"
  returnType: 	TourList
  signature: 	"class/StudyRightModel/method/getOrCreateTourList(String)"

- studyRightModel_getOrCreateStop: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	studyRightModel
  declaration: 	"public Stop getOrCreateStop(String id)"
  id: 	StudyRightModel_getOrCreateStop
  methodBody: 	"if (id == null) return null;
return (Stop) modelMap.computeIfAbsent(id, k -> new Stop().setId(k));
"
  modified: 	false
  modifiers: 	public
  name: 	getOrCreateStop
  paramsString: 	"String id"
  returnType: 	Stop
  signature: 	"class/StudyRightModel/method/getOrCreateStop(String)"

- studyRightModel_getOrCreateTour: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	studyRightModel
  declaration: 	"public Tour getOrCreateTour(String id)"
  id: 	StudyRightModel_getOrCreateTour
  methodBody: 	"if (id == null) return null;
return (Tour) modelMap.computeIfAbsent(id, k -> new Tour().setId(k));
"
  modified: 	false
  modifiers: 	public
  name: 	getOrCreateTour
  paramsString: 	"String id"
  returnType: 	Tour
  signature: 	"class/StudyRightModel/method/getOrCreateTour(String)"

- studyRightBusinessLogic_model: 	org.fulib.classmodel.Attribute
  clazz: 	studyRightBusinessLogic
  id: 	StudyRightBusinessLogic_model
  modified: 	false
  name: 	model
  propertyStyle: 	Bean
  type: 	StudyRightModel
  typeSignature: 	StudyRightModel

- studyRightBusinessLogic_handlerMap: 	org.fulib.classmodel.Attribute
  clazz: 	studyRightBusinessLogic
  id: 	StudyRightBusinessLogic_handlerMap
  modified: 	false
  name: 	handlerMap
  propertyStyle: 	Bean
  type: 	"LinkedHashMap<Class, Consumer<Event>>"
  typeSignature: 	"LinkedHashMap<Class,Consumer<Event>>"

- studyRightBusinessLogic_handleLoadRoomsCommand: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	studyRightBusinessLogic
  declaration: 	"private void handleLoadRoomsCommand(Event e)"
  id: 	StudyRightBusinessLogic_handleLoadRoomsCommand
  methodBody: 	"// to protect manuel changes to this method insert a 'no' in front of fulib in the next line
// fulib
LoadRoomsCommand event = (LoadRoomsCommand) e;
handleDemoLoadRoomsCommand(event);
"
  modified: 	false
  modifiers: 	private
  name: 	handleLoadRoomsCommand
  paramsString: 	"Event e"
  returnType: 	void
  signature: 	"class/StudyRightBusinessLogic/method/handleLoadRoomsCommand(Event)"

- studyRightBusinessLogic_handleDemoLoadRoomsCommand: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	studyRightBusinessLogic
  declaration: 	"private void handleDemoLoadRoomsCommand(LoadRoomsCommand event)"
  id: 	StudyRightBusinessLogic_handleDemoLoadRoomsCommand
  methodBody: 	"if (event.getId().equals(\"12:00\")) {
   UniversityBuilt studyRightEvent = new UniversityBuilt();
   studyRightEvent.setId(\"12:00:00\");
   studyRightEvent.setBlockId(\"StudyRight\");
   studyRightEvent.setRooms(\"[math, exam]\");
   service.apply(studyRightEvent);

   RoomBuilt mathEvent = new RoomBuilt();
   mathEvent.setId(\"12:00:01\");
   mathEvent.setBlockId(\"math\");
   mathEvent.setCredits(\"23\");
   mathEvent.setUni(\"StudyRight\");
   mathEvent.setDoors(\"[modeling, algebra]\");
   service.apply(mathEvent);

   RoomBuilt modelingEvent = new RoomBuilt();
   modelingEvent.setId(\"12:00:02\");
   modelingEvent.setBlockId(\"modeling\");
   modelingEvent.setUni(\"StudyRight\");
   modelingEvent.setCredits(\"42\");
   modelingEvent.setDoors(\"[math, algebra, exam]\");
   service.apply(modelingEvent);

   RoomBuilt algebraEvent = new RoomBuilt();
   algebraEvent.setId(\"12:00:03\");
   algebraEvent.setBlockId(\"algebra\");
   algebraEvent.setUni(\"StudyRight\");
   algebraEvent.setCredits(\"12\");
   service.apply(algebraEvent);

   RoomBuilt examEvent = new RoomBuilt();
   examEvent.setId(\"12:00:04\");
   examEvent.setBlockId(\"exam\");
   examEvent.setCredits(\"0\");
   examEvent.setUni(\"StudyRight\");
   service.apply(examEvent);

   StudentBuilt carliEvent = new StudentBuilt();
   carliEvent.setId(\"12:00:05\");
   carliEvent.setBlockId(\"carli\");
   carliEvent.setName(\"Carli\");
   carliEvent.setBirthYear(\"1970\");
   carliEvent.setStudentId(\"stud42\");
   carliEvent.setUni(\"StudyRight\");
   service.apply(carliEvent);


   RoomsLoadedEvent e120006 = new RoomsLoadedEvent();

   e120006.setId(\"12:00:06\");
   service.apply(e120006);
}
"
  modified: 	false
  modifiers: 	private
  name: 	handleDemoLoadRoomsCommand
  paramsString: 	"LoadRoomsCommand event"
  returnType: 	void
  signature: 	"class/StudyRightBusinessLogic/method/handleDemoLoadRoomsCommand(LoadRoomsCommand)"

- studyRightBusinessLogic_handleFindToursCommand: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	studyRightBusinessLogic
  declaration: 	"private void handleFindToursCommand(Event e)"
  id: 	StudyRightBusinessLogic_handleFindToursCommand
  methodBody: 	"// to protect manuel changes to this method insert a 'no' in front of fulib in the next line
// fulib
FindToursCommand event = (FindToursCommand) e;
handleDemoFindToursCommand(event);
"
  modified: 	false
  modifiers: 	private
  name: 	handleFindToursCommand
  paramsString: 	"Event e"
  returnType: 	void
  signature: 	"class/StudyRightBusinessLogic/method/handleFindToursCommand(Event)"

- studyRightBusinessLogic_handleDemoFindToursCommand: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	studyRightBusinessLogic
  declaration: 	"private void handleDemoFindToursCommand(FindToursCommand event)"
  id: 	StudyRightBusinessLogic_handleDemoFindToursCommand
  methodBody: 	"if (event.getId().equals(\"12:01\")) {
   TourListBuilt allToursEvent = new TourListBuilt();
   allToursEvent.setId(\"12:01:00\");
   allToursEvent.setBlockId(\"allTours\");
   service.apply(allToursEvent);

   StopBuilt s01Event = new StopBuilt();
   s01Event.setId(\"12:01:01\");
   s01Event.setBlockId(\"s01\");
   s01Event.setMotivation(\"77\");
   service.apply(s01Event);

}
"
  modified: 	false
  modifiers: 	private
  name: 	handleDemoFindToursCommand
  paramsString: 	"FindToursCommand event"
  returnType: 	void
  signature: 	"class/StudyRightBusinessLogic/method/handleDemoFindToursCommand(FindToursCommand)"

- studyRightBusinessLogic_handleVisitRoomCommand: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	studyRightBusinessLogic
  declaration: 	"private void handleVisitRoomCommand(Event e)"
  id: 	StudyRightBusinessLogic_handleVisitRoomCommand
  methodBody: 	"// to protect manuel changes to this method insert a 'no' in front of fulib in the next line
// fulib
VisitRoomCommand event = (VisitRoomCommand) e;
handleDemoVisitRoomCommand(event);
"
  modified: 	false
  modifiers: 	private
  name: 	handleVisitRoomCommand
  paramsString: 	"Event e"
  returnType: 	void
  signature: 	"class/StudyRightBusinessLogic/method/handleVisitRoomCommand(Event)"

- studyRightBusinessLogic_handleDemoVisitRoomCommand: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	studyRightBusinessLogic
  declaration: 	"private void handleDemoVisitRoomCommand(VisitRoomCommand event)"
  id: 	StudyRightBusinessLogic_handleDemoVisitRoomCommand
  methodBody: 	"if (event.getId().equals(\"12:02\")) {
   StopBuilt s02Event = new StopBuilt();
   s02Event.setId(\"12:02:01\");
   s02Event.setBlockId(\"s02\");
   s02Event.setRoom(\"math\");
   s02Event.setMotivation(\"54\");
   s02Event.setPreviousStop(\"s01\");
   service.apply(s02Event);

}
if (event.getId().equals(\"12:03\")) {
   StopBuilt s03Event = new StopBuilt();
   s03Event.setId(\"12:03:01\");
   s03Event.setBlockId(\"s03\");
   s03Event.setRoom(\"algebra\");
   s03Event.setPreviousStop(\"s02\");
   s03Event.setMotivation(\"42\");
   service.apply(s03Event);

}
if (event.getId().equals(\"12:05\")) {
   StopBuilt s05Event = new StopBuilt();
   s05Event.setId(\"12:05:01\");
   s05Event.setBlockId(\"s05\");
   s05Event.setRoom(\"modeling\");
   s05Event.setPreviousStop(\"s03\");
   s05Event.setMotivation(\"0\");
   service.apply(s05Event);

}
if (event.getId().equals(\"12:07\")) {
   StopBuilt s07Event = new StopBuilt();
   s07Event.setId(\"12:07:01\");
   s07Event.setBlockId(\"s07\");
   s07Event.setRoom(\"math\");
   s07Event.setPreviousStop(\"s05\");
   s07Event.setMotivation(\"-23\");
   service.apply(s07Event);


   TourFailedEvent e120702 = new TourFailedEvent();

   e120702.setId(\"12:07:02\");
   e120702.setStop(\"s07\");
   e120702.setRoom(\"math\");
   e120702.setCredits(\"-23\");
   service.apply(e120702);
}
if (event.getId().equals(\"12:08\")) {
   StopBuilt s08Event = new StopBuilt();
   s08Event.setId(\"12:08:01\");
   s08Event.setBlockId(\"s08\");
   s08Event.setRoom(\"exam\");
   s08Event.setPreviousStop(\"s05\");
   s08Event.setMotivation(\"0\");
   service.apply(s08Event);

}
"
  modified: 	false
  modifiers: 	private
  name: 	handleDemoVisitRoomCommand
  paramsString: 	"VisitRoomCommand event"
  returnType: 	void
  signature: 	"class/StudyRightBusinessLogic/method/handleDemoVisitRoomCommand(VisitRoomCommand)"

- studyRightBusinessLogic_handleCollectTourStopsCommand: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	studyRightBusinessLogic
  declaration: 	"private void handleCollectTourStopsCommand(Event e)"
  id: 	StudyRightBusinessLogic_handleCollectTourStopsCommand
  methodBody: 	"// to protect manuel changes to this method insert a 'no' in front of fulib in the next line
// fulib
CollectTourStopsCommand event = (CollectTourStopsCommand) e;
handleDemoCollectTourStopsCommand(event);
"
  modified: 	false
  modifiers: 	private
  name: 	handleCollectTourStopsCommand
  paramsString: 	"Event e"
  returnType: 	void
  signature: 	"class/StudyRightBusinessLogic/method/handleCollectTourStopsCommand(Event)"

- studyRightBusinessLogic_handleDemoCollectTourStopsCommand: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	studyRightBusinessLogic
  declaration: 	"private void handleDemoCollectTourStopsCommand(CollectTourStopsCommand event)"
  id: 	StudyRightBusinessLogic_handleDemoCollectTourStopsCommand
  methodBody: 	"if (event.getId().equals(\"12:09\")) {
   TourBuilt tour1Event = new TourBuilt();
   tour1Event.setId(\"12:09:02\");
   tour1Event.setBlockId(\"tour1\");
   tour1Event.setTourList(\"allTours\");
   tour1Event.setStops(\"exam\");
   service.apply(tour1Event);

}
if (event.getId().equals(\"12:10\")) {
   TourBuilt tour1Event = new TourBuilt();
   tour1Event.setId(\"12:10:01\");
   tour1Event.setBlockId(\"tour1\");
   tour1Event.setStops(\"modeling exam\");
   service.apply(tour1Event);

}
if (event.getId().equals(\"12:11\")) {
   TourBuilt tour1Event = new TourBuilt();
   tour1Event.setId(\"12:11:01\");
   tour1Event.setBlockId(\"tour1\");
   tour1Event.setStops(\"algebra modeling exam\");
   service.apply(tour1Event);

}
if (event.getId().equals(\"12:12\")) {
   TourBuilt tour1Event = new TourBuilt();
   tour1Event.setId(\"12:12:01\");
   tour1Event.setBlockId(\"tour1\");
   tour1Event.setStops(\"math algebra modeling exam\");
   service.apply(tour1Event);


   TourFoundEvent e1213 = new TourFoundEvent();

   e1213.setId(\"12:13\");
   e1213.setTour(\"tour1\");
   service.apply(e1213);
}
"
  modified: 	false
  modifiers: 	private
  name: 	handleDemoCollectTourStopsCommand
  paramsString: 	"CollectTourStopsCommand event"
  returnType: 	void
  signature: 	"class/StudyRightBusinessLogic/method/handleDemoCollectTourStopsCommand(CollectTourStopsCommand)"

- studyRightBusinessLogic_initEventHandlerMap: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	studyRightBusinessLogic
  declaration: 	"public void initEventHandlerMap()"
  id: 	StudyRightBusinessLogic_initEventHandlerMap
  methodBody: 	"if (handlerMap == null) {
   handlerMap = new LinkedHashMap<>();
   handlerMap.put(UniversityBuilt.class, builder::storeUniversityBuilt);
   handlerMap.put(RoomBuilt.class, builder::storeRoomBuilt);
   handlerMap.put(StudentBuilt.class, builder::storeStudentBuilt);
   handlerMap.put(TourListBuilt.class, builder::storeTourListBuilt);
   handlerMap.put(StopBuilt.class, builder::storeStopBuilt);
   handlerMap.put(TourBuilt.class, builder::storeTourBuilt);
   handlerMap.put(LoadRoomsCommand.class, this::handleLoadRoomsCommand);
   handlerMap.put(FindToursCommand.class, this::handleFindToursCommand);
   handlerMap.put(VisitRoomCommand.class, this::handleVisitRoomCommand);
   handlerMap.put(CollectTourStopsCommand.class, this::handleCollectTourStopsCommand);
}
"
  modified: 	false
  modifiers: 	public
  name: 	initEventHandlerMap
  paramsString: 	""
  returnType: 	void
  signature: 	"class/StudyRightBusinessLogic/method/initEventHandlerMap()"

- studyRightBusinessLogic_ignoreEvent: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	studyRightBusinessLogic
  declaration: 	"private void ignoreEvent(Event event)"
  id: 	StudyRightBusinessLogic_ignoreEvent
  methodBody: 	"// empty
"
  modified: 	false
  modifiers: 	private
  name: 	ignoreEvent
  paramsString: 	"Event event"
  returnType: 	void
  signature: 	"class/StudyRightBusinessLogic/method/ignoreEvent(Event)"

- studyRightBusinessLogic_getHandler: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	studyRightBusinessLogic
  declaration: 	"public Consumer<Event> getHandler(Event event)"
  id: 	StudyRightBusinessLogic_getHandler
  methodBody: 	"return getHandlerMap().computeIfAbsent(event.getClass(), k -> this::ignoreEvent);
"
  modified: 	false
  modifiers: 	public
  name: 	getHandler
  paramsString: 	"Event event"
  returnType: 	"Consumer<Event>"
  signature: 	"class/StudyRightBusinessLogic/method/getHandler(Event)"

- studyRightBusinessLogic_builder: 	org.fulib.classmodel.AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	studyRightBusinessLogic
  id: 	StudyRightBusinessLogic_builder
  modified: 	false
  name: 	builder
  other: 	studyRightBuilder_businessLogic
  propertyStyle: 	Bean

- studyRightBusinessLogic_service: 	org.fulib.classmodel.AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	studyRightBusinessLogic
  id: 	StudyRightBusinessLogic_service
  modified: 	false
  name: 	service
  other: 	studyRightService_businessLogic
  propertyStyle: 	Bean

- studyRightBuilder_model: 	org.fulib.classmodel.Attribute
  clazz: 	studyRightBuilder
  id: 	StudyRightBuilder_model
  modified: 	false
  name: 	model
  propertyStyle: 	Bean
  type: 	StudyRightModel
  typeSignature: 	StudyRightModel

- studyRightBuilder_eventStore: 	org.fulib.classmodel.Attribute
  clazz: 	studyRightBuilder
  id: 	StudyRightBuilder_eventStore
  initialization: 	"new LinkedHashMap<>()"
  modified: 	false
  name: 	eventStore
  propertyStyle: 	Bean
  type: 	"LinkedHashMap<String, DataEvent>"
  typeSignature: 	"LinkedHashMap<String,DataEvent>"

- studyRightBuilder_loaderMap: 	org.fulib.classmodel.Attribute
  clazz: 	studyRightBuilder
  id: 	StudyRightBuilder_loaderMap
  modified: 	false
  name: 	loaderMap
  propertyStyle: 	Bean
  type: 	"LinkedHashMap<Class, Function<Event, Object>>"
  typeSignature: 	"LinkedHashMap<Class,Function<Event,Object>>"

- studyRightBuilder_groupStore: 	org.fulib.classmodel.Attribute
  clazz: 	studyRightBuilder
  id: 	StudyRightBuilder_groupStore
  initialization: 	"new LinkedHashMap<>()"
  modified: 	false
  name: 	groupStore
  propertyStyle: 	Bean
  type: 	"LinkedHashMap<String, LinkedHashMap<String, DataEvent>>"
  typeSignature: 	"LinkedHashMap<String,LinkedHashMap<String,DataEvent>>"

- studyRightBuilder_outdated: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	studyRightBuilder
  declaration: 	"private boolean outdated(DataEvent event)"
  id: 	StudyRightBuilder_outdated
  methodBody: 	"      DataEvent oldEvent = getEventStore().get(event.getBlockId());

      if (oldEvent == null) {
         eventStore.put(event.getBlockId(), event);
         return false;
      }

      if (oldEvent.getId().compareTo(event.getId()) < 0) {
<<<<<<< HEAD
         new org.fulib.yaml.Yamler2().mergeObjects(oldEvent, event);
=======
>>>>>>> d3ea970929d108027c425d763c0cb0d0be7e0237
         eventStore.put(event.getBlockId(), event);
         return false;
      }

      return true;"
  modified: 	false
  modifiers: 	private
  name: 	outdated
  paramsString: 	"DataEvent event"
  returnType: 	boolean
  signature: 	"class/StudyRightBuilder/method/outdated(DataEvent)"

- studyRightBuilder_storeUniversityBuilt: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	studyRightBuilder
  declaration: 	"public void storeUniversityBuilt(Event e)"
  id: 	StudyRightBuilder_storeUniversityBuilt
  methodBody: 	"UniversityBuilt event = (UniversityBuilt) e;
if (outdated(event)) {
   return;
}
// please insert a no before fulib in the next line and insert addToGroup commands as necessary
// fulib
"
  modified: 	false
  modifiers: 	public
  name: 	storeUniversityBuilt
  paramsString: 	"Event e"
  returnType: 	void
  signature: 	"class/StudyRightBuilder/method/storeUniversityBuilt(Event)"

- studyRightBuilder_loadUniversityBuilt: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	studyRightBuilder
  declaration: 	"public University loadUniversityBuilt(Event e)"
  id: 	StudyRightBuilder_loadUniversityBuilt
  methodBody: 	"UniversityBuilt event = (UniversityBuilt) e;
University object = model.getOrCreateUniversity(event.getBlockId());
for (String name : stripBrackets(event.getRooms()).split(\",\\s+\")) {
   if (name.equals(\"\")) continue;
<<<<<<< HEAD
   object.withRooms(model.getOrCreateRoom(getObjectId(name)));
}
return object;
"
  modified: 	false
  modifiers: 	public
  name: 	loadUniversityBuilt
  paramsString: 	"Event e"
  returnType: 	University
  signature: 	"class/StudyRightBuilder/method/loadUniversityBuilt(Event)"

- studyRightBuilder_storeRoomBuilt: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	studyRightBuilder
  declaration: 	"public void storeRoomBuilt(Event e)"
  id: 	StudyRightBuilder_storeRoomBuilt
  methodBody: 	"RoomBuilt event = (RoomBuilt) e;
if (outdated(event)) {
   return;
}
// please insert a no before fulib in the next line and insert addToGroup commands as necessary
// fulib
"
  modified: 	false
  modifiers: 	public
=======
   object.withRooms(model.getOrCreateRoom(getVarName(name)));
}
return object;
"
  modified: 	false
  modifiers: 	public
  name: 	loadUniversityBuilt
  paramsString: 	"Event e"
  returnType: 	University
  signature: 	"class/StudyRightBuilder/method/loadUniversityBuilt(Event)"

- studyRightBuilder_storeRoomBuilt: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	studyRightBuilder
  declaration: 	"public void storeRoomBuilt(Event e)"
  id: 	StudyRightBuilder_storeRoomBuilt
  methodBody: 	"RoomBuilt event = (RoomBuilt) e;
if (outdated(event)) {
   return;
}
// please insert a no before fulib in the next line and insert addToGroup commands as necessary
// fulib
"
  modified: 	false
  modifiers: 	public
>>>>>>> d3ea970929d108027c425d763c0cb0d0be7e0237
  name: 	storeRoomBuilt
  paramsString: 	"Event e"
  returnType: 	void
  signature: 	"class/StudyRightBuilder/method/storeRoomBuilt(Event)"

- studyRightBuilder_loadRoomBuilt: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	studyRightBuilder
  declaration: 	"public Room loadRoomBuilt(Event e)"
  id: 	StudyRightBuilder_loadRoomBuilt
  methodBody: 	"RoomBuilt event = (RoomBuilt) e;
Room object = model.getOrCreateRoom(event.getBlockId());
object.setCredits(event.getCredits());
<<<<<<< HEAD
object.setUni(model.getOrCreateUniversity(getObjectId(event.getUni())));
for (String name : stripBrackets(event.getDoors()).split(\",\\s+\")) {
   if (name.equals(\"\")) continue;
   object.withDoors(model.getOrCreateRoom(getObjectId(name)));
}
return object;
"
  modified: 	false
  modifiers: 	public
  name: 	loadRoomBuilt
  paramsString: 	"Event e"
  returnType: 	Room
  signature: 	"class/StudyRightBuilder/method/loadRoomBuilt(Event)"

- studyRightBuilder_storeStudentBuilt: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	studyRightBuilder
  declaration: 	"public void storeStudentBuilt(Event e)"
  id: 	StudyRightBuilder_storeStudentBuilt
  methodBody: 	"StudentBuilt event = (StudentBuilt) e;
if (outdated(event)) {
   return;
}
// please insert a no before fulib in the next line and insert addToGroup commands as necessary
// fulib
"
  modified: 	false
  modifiers: 	public
=======
object.setUni(model.getOrCreateUniversity(getVarName(event.getUni())));
for (String name : stripBrackets(event.getDoors()).split(\",\\s+\")) {
   if (name.equals(\"\")) continue;
   object.withDoors(model.getOrCreateRoom(getVarName(name)));
}
return object;
"
  modified: 	false
  modifiers: 	public
  name: 	loadRoomBuilt
  paramsString: 	"Event e"
  returnType: 	Room
  signature: 	"class/StudyRightBuilder/method/loadRoomBuilt(Event)"

- studyRightBuilder_storeStudentBuilt: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	studyRightBuilder
  declaration: 	"public void storeStudentBuilt(Event e)"
  id: 	StudyRightBuilder_storeStudentBuilt
  methodBody: 	"StudentBuilt event = (StudentBuilt) e;
if (outdated(event)) {
   return;
}
// please insert a no before fulib in the next line and insert addToGroup commands as necessary
// fulib
"
  modified: 	false
  modifiers: 	public
>>>>>>> d3ea970929d108027c425d763c0cb0d0be7e0237
  name: 	storeStudentBuilt
  paramsString: 	"Event e"
  returnType: 	void
  signature: 	"class/StudyRightBuilder/method/storeStudentBuilt(Event)"

- studyRightBuilder_loadStudentBuilt: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	studyRightBuilder
  declaration: 	"public Student loadStudentBuilt(Event e)"
  id: 	StudyRightBuilder_loadStudentBuilt
  methodBody: 	"StudentBuilt event = (StudentBuilt) e;
Student object = model.getOrCreateStudent(event.getBlockId());
object.setName(event.getName());
object.setBirthYear(event.getBirthYear());
object.setStudentId(event.getStudentId());
object.setUni(event.getUni());
return object;
"
  modified: 	false
  modifiers: 	public
  name: 	loadStudentBuilt
  paramsString: 	"Event e"
  returnType: 	Student
  signature: 	"class/StudyRightBuilder/method/loadStudentBuilt(Event)"

- studyRightBuilder_storeTourListBuilt: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	studyRightBuilder
  declaration: 	"public void storeTourListBuilt(Event e)"
  id: 	StudyRightBuilder_storeTourListBuilt
  methodBody: 	"TourListBuilt event = (TourListBuilt) e;
if (outdated(event)) {
   return;
}
// please insert a no before fulib in the next line and insert addToGroup commands as necessary
// fulib
"
  modified: 	false
  modifiers: 	public
  name: 	storeTourListBuilt
  paramsString: 	"Event e"
  returnType: 	void
  signature: 	"class/StudyRightBuilder/method/storeTourListBuilt(Event)"

- studyRightBuilder_loadTourListBuilt: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	studyRightBuilder
  declaration: 	"public TourList loadTourListBuilt(Event e)"
  id: 	StudyRightBuilder_loadTourListBuilt
  methodBody: 	"TourListBuilt event = (TourListBuilt) e;
TourList object = model.getOrCreateTourList(event.getBlockId());
return object;
"
  modified: 	false
  modifiers: 	public
  name: 	loadTourListBuilt
  paramsString: 	"Event e"
  returnType: 	TourList
  signature: 	"class/StudyRightBuilder/method/loadTourListBuilt(Event)"

- studyRightBuilder_storeStopBuilt: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	studyRightBuilder
  declaration: 	"public void storeStopBuilt(Event e)"
  id: 	StudyRightBuilder_storeStopBuilt
  methodBody: 	"StopBuilt event = (StopBuilt) e;
if (outdated(event)) {
   return;
}
// please insert a no before fulib in the next line and insert addToGroup commands as necessary
// fulib
"
  modified: 	false
  modifiers: 	public
  name: 	storeStopBuilt
  paramsString: 	"Event e"
  returnType: 	void
  signature: 	"class/StudyRightBuilder/method/storeStopBuilt(Event)"

- studyRightBuilder_loadStopBuilt: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	studyRightBuilder
  declaration: 	"public Stop loadStopBuilt(Event e)"
  id: 	StudyRightBuilder_loadStopBuilt
  methodBody: 	"StopBuilt event = (StopBuilt) e;
Stop object = model.getOrCreateStop(event.getBlockId());
object.setMotivation(event.getMotivation());
object.setRoom(event.getRoom());
<<<<<<< HEAD
object.setPreviousStop(model.getOrCreateStop(getObjectId(event.getPreviousStop())));
return object;
"
  modified: 	false
  modifiers: 	public
  name: 	loadStopBuilt
  paramsString: 	"Event e"
  returnType: 	Stop
  signature: 	"class/StudyRightBuilder/method/loadStopBuilt(Event)"

- studyRightBuilder_storeTourBuilt: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	studyRightBuilder
  declaration: 	"public void storeTourBuilt(Event e)"
  id: 	StudyRightBuilder_storeTourBuilt
  methodBody: 	"TourBuilt event = (TourBuilt) e;
if (outdated(event)) {
   return;
}
// please insert a no before fulib in the next line and insert addToGroup commands as necessary
// fulib
"
  modified: 	false
  modifiers: 	public
=======
object.setPreviousStop(model.getOrCreateStop(getVarName(event.getPreviousStop())));
return object;
"
  modified: 	false
  modifiers: 	public
  name: 	loadStopBuilt
  paramsString: 	"Event e"
  returnType: 	Stop
  signature: 	"class/StudyRightBuilder/method/loadStopBuilt(Event)"

- studyRightBuilder_storeTourBuilt: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	studyRightBuilder
  declaration: 	"public void storeTourBuilt(Event e)"
  id: 	StudyRightBuilder_storeTourBuilt
  methodBody: 	"TourBuilt event = (TourBuilt) e;
if (outdated(event)) {
   return;
}
// please insert a no before fulib in the next line and insert addToGroup commands as necessary
// fulib
"
  modified: 	false
  modifiers: 	public
>>>>>>> d3ea970929d108027c425d763c0cb0d0be7e0237
  name: 	storeTourBuilt
  paramsString: 	"Event e"
  returnType: 	void
  signature: 	"class/StudyRightBuilder/method/storeTourBuilt(Event)"

- studyRightBuilder_loadTourBuilt: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	studyRightBuilder
  declaration: 	"public Tour loadTourBuilt(Event e)"
  id: 	StudyRightBuilder_loadTourBuilt
  methodBody: 	"TourBuilt event = (TourBuilt) e;
Tour object = model.getOrCreateTour(event.getBlockId());
<<<<<<< HEAD
object.setTourList(model.getOrCreateTourList(getObjectId(event.getTourList())));
=======
object.setTourList(model.getOrCreateTourList(getVarName(event.getTourList())));
>>>>>>> d3ea970929d108027c425d763c0cb0d0be7e0237
object.setStops(event.getStops());
return object;
"
  modified: 	false
  modifiers: 	public
  name: 	loadTourBuilt
  paramsString: 	"Event e"
  returnType: 	Tour
  signature: 	"class/StudyRightBuilder/method/loadTourBuilt(Event)"

- studyRightBuilder_load: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	studyRightBuilder
  declaration: 	"public Object load(String blockId)"
  id: 	StudyRightBuilder_load
  methodBody: 	"      DataEvent dataEvent = eventStore.get(blockId);
      if (dataEvent == null) {
         return null;
      }

      initLoaderMap();
      Function<Event, Object> loader = loaderMap.get(dataEvent.getClass());
      Object object = loader.apply(dataEvent);

      LinkedHashMap<String, DataEvent> group = groupStore.computeIfAbsent(blockId, k -> new LinkedHashMap<>());
      for (DataEvent element : group.values()) {
         loader = loaderMap.get(element.getClass());
         loader.apply(element);
      }

      return object;"
  modified: 	false
  modifiers: 	public
  name: 	load
  paramsString: 	"String blockId"
  returnType: 	Object
  signature: 	"class/StudyRightBuilder/method/load(String)"

- studyRightBuilder_initLoaderMap: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	studyRightBuilder
  declaration: 	"private void initLoaderMap()"
  id: 	StudyRightBuilder_initLoaderMap
  methodBody: 	"if (loaderMap == null) {
   loaderMap = new LinkedHashMap<>();
   loaderMap.put(UniversityBuilt.class, this::loadUniversityBuilt);
   loaderMap.put(RoomBuilt.class, this::loadRoomBuilt);
   loaderMap.put(StudentBuilt.class, this::loadStudentBuilt);
   loaderMap.put(TourListBuilt.class, this::loadTourListBuilt);
   loaderMap.put(StopBuilt.class, this::loadStopBuilt);
   loaderMap.put(TourBuilt.class, this::loadTourBuilt);
}
"
  modified: 	false
  modifiers: 	private
  name: 	initLoaderMap
  paramsString: 	""
<<<<<<< HEAD
  returnType: 	void
  signature: 	"class/StudyRightBuilder/method/initLoaderMap()"

- studyRightBuilder_getObjectId: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	studyRightBuilder
  declaration: 	"public String getObjectId(String value)"
  id: 	StudyRightBuilder_getObjectId
  methodBody: 	"      if (value == null) {
         return null;
      }
      return value.replaceAll(\"\\W+\", \"_\");"
  modified: 	false
  modifiers: 	public
  name: 	getObjectId
  paramsString: 	"String value"
  returnType: 	String
  signature: 	"class/StudyRightBuilder/method/getObjectId(String)"

- studyRightBuilder_addToGroup: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	studyRightBuilder
  declaration: 	"private void addToGroup(String groupId, String elementId)"
  id: 	StudyRightBuilder_addToGroup
  methodBody: 	"      DataEvent dataEvent = eventStore.get(elementId);

      if (dataEvent == null) {
         java.util.logging.Logger.getGlobal().severe(String.format(\"could not find element event %s for group %s \", elementId, groupId));
         return;
      }

      LinkedHashMap<String, DataEvent> group = groupStore.computeIfAbsent(groupId, k -> new LinkedHashMap<>());
      group.put(elementId, dataEvent);"
  modified: 	false
  modifiers: 	private
  name: 	addToGroup
  paramsString: 	"String groupId, String elementId"
  returnType: 	void
=======
  returnType: 	void
  signature: 	"class/StudyRightBuilder/method/initLoaderMap()"

- studyRightBuilder_getVarName: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	studyRightBuilder
  declaration: 	"public String getVarName(String value)"
  id: 	StudyRightBuilder_getVarName
  methodBody: 	"      if (value == null) {
         return null;
      }
      String[] split = value.split(\"\\s+\");
      String varName = split[0];
      for (int i = 1; i < split.length; i++) {
         varName += org.fulib.StrUtil.cap(split[i]);
      }
      return varName;"
  modified: 	false
  modifiers: 	public
  name: 	getVarName
  paramsString: 	"String value"
  returnType: 	String
  signature: 	"class/StudyRightBuilder/method/getVarName(String)"

- studyRightBuilder_addToGroup: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	studyRightBuilder
  declaration: 	"private void addToGroup(String groupId, String elementId)"
  id: 	StudyRightBuilder_addToGroup
  methodBody: 	"      DataEvent dataEvent = eventStore.get(elementId);

      if (dataEvent == null) {
         java.util.logging.Logger.getGlobal().severe(String.format(\"could not find element event %s for group %s \", elementId, groupId));
         return;
      }

      LinkedHashMap<String, DataEvent> group = groupStore.computeIfAbsent(groupId, k -> new LinkedHashMap<>());
      group.put(elementId, dataEvent);"
  modified: 	false
  modifiers: 	private
  name: 	addToGroup
  paramsString: 	"String groupId, String elementId"
  returnType: 	void
>>>>>>> d3ea970929d108027c425d763c0cb0d0be7e0237
  signature: 	"class/StudyRightBuilder/method/addToGroup(String,String)"

- studyRightBuilder_stripBrackets: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	studyRightBuilder
  declaration: 	"public String stripBrackets(String back)"
  id: 	StudyRightBuilder_stripBrackets
  methodBody: 	"      if (back == null) {
         return \"\";
      }
      int open = back.indexOf('[');
      int close = back.indexOf(']');
      if (open >= 0 && close >= 0) {
         back = back.substring(open + 1, close);
      }
      return back;"
  modified: 	false
  modifiers: 	public
  name: 	stripBrackets
  paramsString: 	"String back"
  returnType: 	String
  signature: 	"class/StudyRightBuilder/method/stripBrackets(String)"

- studyRightBuilder_businessLogic: 	org.fulib.classmodel.AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	studyRightBuilder
  id: 	StudyRightBuilder_businessLogic
  modified: 	false
  name: 	businessLogic
  other: 	studyRightBusinessLogic_builder
  propertyStyle: 	Bean

- studyRightBuilder_service: 	org.fulib.classmodel.AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	studyRightBuilder
  id: 	StudyRightBuilder_service
  modified: 	false
  name: 	service
  other: 	studyRightService_builder
  propertyStyle: 	Bean

- studyRightService_history: 	org.fulib.classmodel.Attribute
  clazz: 	studyRightService
  id: 	StudyRightService_history
  initialization: 	"new LinkedHashMap<>()"
  modified: 	false
  name: 	history
  propertyStyle: 	Bean
  type: 	"LinkedHashMap<String, Event>"
  typeSignature: 	"LinkedHashMap<String,Event>"

- studyRightService_port: 	org.fulib.classmodel.Attribute
  clazz: 	studyRightService
  id: 	StudyRightService_port
  initialization: 	42400
  modified: 	false
  name: 	port
  propertyStyle: 	Bean
  type: 	int
  typeSignature: 	int

- studyRightService_spark: 	org.fulib.classmodel.Attribute
  clazz: 	studyRightService
  id: 	StudyRightService_spark
  modified: 	false
  name: 	spark
  propertyStyle: 	Bean
  type: 	Service
  typeSignature: 	Service

- studyRightService_model: 	org.fulib.classmodel.Attribute
  clazz: 	studyRightService
  id: 	StudyRightService_model
  modified: 	false
  name: 	model
  propertyStyle: 	Bean
  type: 	StudyRightModel
  typeSignature: 	StudyRightModel

- studyRightService_query: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	studyRightService
  declaration: 	"public Query query(Query query)"
  id: 	StudyRightService_query
  methodBody: 	"      DataEvent dataEvent = getBuilder().getEventStore().get(query.getKey());

      if (dataEvent == null) {
         return query;
      }

      if (dataEvent instanceof DataGroup) {
         DataGroup group = (DataGroup) dataEvent;
         query.withResults(group.getElements());
      }
      else {
         query.withResults(dataEvent);
      }

      return query;"
  modified: 	false
  modifiers: 	public
  name: 	query
  paramsString: 	"Query query"
  returnType: 	Query
  signature: 	"class/StudyRightService/method/query(Query)"

- studyRightService_isoNow: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	studyRightService
  declaration: 	"public String isoNow()"
  id: 	StudyRightService_isoNow
  methodBody: 	"return DateTimeFormatter.ISO_INSTANT.format(Instant.now());
"
  modified: 	false
  modifiers: 	public
  name: 	isoNow
  paramsString: 	""
  returnType: 	String
  signature: 	"class/StudyRightService/method/isoNow()"

- studyRightService_start: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	studyRightService
  declaration: 	"public void start()"
  id: 	StudyRightService_start
  methodBody: 	"model = new StudyRightModel();
setBuilder(new StudyRightBuilder().setModel(model));
setBusinessLogic(new StudyRightBusinessLogic());
businessLogic.setBuilder(getBuilder());
businessLogic.setModel(model);
ExecutorService executor = Executors.newSingleThreadExecutor();
spark = Service.ignite();
spark.port(port);
spark.get(\"/page/:id\", (req, res) -> executor.submit(() -> this.getPage(req, res)).get());
spark.get(\"/\", (req, res) -> executor.submit(() -> this.getHello(req, res)).get());
spark.post(\"/apply\", (req, res) -> executor.submit(() -> this.postApply(req, res)).get());
executor.submit(this::subscribeAndLoadOldEvents);
Logger.getGlobal().info(\"StudyRight service is up and running on port \" + port);
"
  modified: 	false
  modifiers: 	public
  name: 	start
  paramsString: 	""
  returnType: 	void
  signature: 	"class/StudyRightService/method/start()"

- studyRightService_getHello: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	studyRightService
  declaration: 	"private String getHello(Request req, Response res)"
  id: 	StudyRightService_getHello
  methodBody: 	"try {
   String events = Yaml.encodeSimple(getHistory().values().toArray());
   String objects = Yaml.encodeSimple(model.getModelMap().values().toArray());
   return \"<p id='StudyRight'>This is the StudyRight service. </p>\n\" +
         \"<pre id=\\"history\\">\" + events + \"</pre>\n\" +
         \"<pre id=\\"data\\">\" + objects + \"</pre>\n\" +
         \"\";
}
catch (Exception e) {
   Logger.getGlobal().log(Level.SEVERE, e.getMessage(), e);
   return \"StudyRight Error \" + e.getMessage();
}
"
  modified: 	false
  modifiers: 	private
  name: 	getHello
  paramsString: 	"Request req, Response res"
  returnType: 	String
  signature: 	"class/StudyRightService/method/getHello(Request,Response)"

- studyRightService_subscribeAndLoadOldEvents: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	studyRightService
  declaration: 	"private void subscribeAndLoadOldEvents()"
  id: 	StudyRightService_subscribeAndLoadOldEvents
  methodBody: 	"ServiceSubscribed serviceSubscribed = new ServiceSubscribed()
      .setServiceUrl(String.format(\"http://localhost:%d/apply\", port));
String json = Yaml.encodeSimple(serviceSubscribed);
try {
   String url = \"http://localhost:42000/subscribe\";
   HttpResponse<String> response = Unirest
         .post(url)
         .body(json)
         .asString();
   String body = response.getBody();
   YamlIdMap idMap = new YamlIdMap(Event.class.getPackageName());
   idMap.decode(body);
   Map<String, Object> objectMap = idMap.getObjIdMap();
   for (Object obj : objectMap.values()) {
      apply((Event) obj);
   }
}
catch (UnirestException e) {
   e.printStackTrace();
}"
  modified: 	false
  modifiers: 	private
  name: 	subscribeAndLoadOldEvents
  paramsString: 	""
  returnType: 	void
  signature: 	"class/StudyRightService/method/subscribeAndLoadOldEvents()"

- studyRightService_apply: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	studyRightService
  declaration: 	"public void apply(Event event)"
  id: 	StudyRightService_apply
  methodBody: 	"if (history.get(event.getId()) != null) {
   return;
}
businessLogic.initEventHandlerMap();
Consumer<Event> handler = businessLogic.getHandler(event);
handler.accept(event);
history.put(event.getId(), event);
firePropertyChange(PROPERTY_HISTORY, null, event);
publish(event);"
  modified: 	false
  modifiers: 	public
  name: 	apply
  paramsString: 	"Event event"
  returnType: 	void
  signature: 	"class/StudyRightService/method/apply(Event)"

- studyRightService_getPage: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	studyRightService
  declaration: 	"public String getPage(Request request, Response response)"
  id: 	StudyRightService_getPage
  methodBody: 	"// to protect manuel changes to this method insert a 'no' in front of fulib in the next line
// fulib
return getDemoPage(request, response);
"
  modified: 	false
  modifiers: 	public
  name: 	getPage
  paramsString: 	"Request request, Response response"
  returnType: 	String
  signature: 	"class/StudyRightService/method/getPage(Request,Response)"

- studyRightService_getDemoPage: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	studyRightService
  declaration: 	"public String getDemoPage(Request request, Response response)"
  id: 	StudyRightService_getDemoPage
  methodBody: 	"StringBuilder html = new StringBuilder();
String id = request.params(\"id\");
String event = request.queryParams(\"event\");

if (\"load rooms 12:00\".equals(event)) {

   // create LoadRoomsCommand: load rooms 12:00
   LoadRoomsCommand e1200 = new LoadRoomsCommand();
   e1200.setId(\"12:00\");
   apply(e1200);
}



// 11:00
if (id.equals(\"11_00\")) {
   html.append(\"<form action=\\"/page/12_13\\" method=\\"get\\">\n\");
   // StudyRight 11:00
   html.append(\"   <p>Welcome at Study Right</p>\n\");
   html.append(\"   <p>Find your way, start with math</p>\n\");
   html.append(\"   <p><input id=\\"event\\" name=\\"event\\" type=\\"hidden\\" value=\\"load rooms 12:00\\"></p>\n\");
   html.append(\"   <p><input id=\\"ok\\" name=\\"button\\" type=\\"submit\\" value=\\"ok\\"></p>\n\");
   html.append(\"</form>\n\");
   return html.toString();
}

// 12:13
if (id.equals(\"12_13\")) {
   html.append(\"<form action=\\"/page/next_page\\" method=\\"get\\">\n\");
   // StudyRight 12:13
   html.append(\"   <p>This are your alternatives</p>\n\");
   html.append(\"   <p>tour1 math algebra modeling exam</p>\n\");
   html.append(\"</form>\n\");
   return html.toString();
}



html.append(\"This is the Shop Service page \" + id + \"\n\");
return html.toString();"
  modified: 	false
  modifiers: 	public
  name: 	getDemoPage
  paramsString: 	"Request request, Response response"
  returnType: 	String
  signature: 	"class/StudyRightService/method/getDemoPage(Request,Response)"

- studyRightService_publish: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	studyRightService
  declaration: 	"public void publish(Event event)"
  id: 	StudyRightService_publish
  methodBody: 	"String json = Yaml.encodeSimple(event);

try {
   HttpResponse<String> response = Unirest
         .post(\"http://localhost:42000/publish\")
         .body(json)
         .asString();
}
catch (UnirestException e) {
   e.printStackTrace();
}"
  modified: 	false
  modifiers: 	public
  name: 	publish
  paramsString: 	"Event event"
  returnType: 	void
  signature: 	"class/StudyRightService/method/publish(Event)"

- studyRightService_postApply: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	studyRightService
  declaration: 	"private String postApply(Request req, Response res)"
  id: 	StudyRightService_postApply
  methodBody: 	"      String body = req.body();
      try {
         YamlIdMap idMap = new YamlIdMap(Event.class.getPackageName());
         idMap.decode(body);
         Map<String, Object> map = idMap.getObjIdMap();
         for (Object value : map.values()) {
            Event event = (Event) value;
            apply(event);
         }
      }
      catch (Exception e) {
         String message = e.getMessage();
         if (message.contains(\"ReflectorMap could not find class description\")) {
            Logger.getGlobal().info(\"post apply ignores unknown event \" + body);
         }
         else {
            Logger.getGlobal().log(Level.SEVERE, \"postApply failed\", e);
         }
      }
      return \"apply done\";"
  modified: 	false
  modifiers: 	private
  name: 	postApply
  paramsString: 	"Request req, Response res"
  returnType: 	String
  signature: 	"class/StudyRightService/method/postApply(Request,Response)"

- studyRightService_businessLogic: 	org.fulib.classmodel.AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	studyRightService
  id: 	StudyRightService_businessLogic
  modified: 	false
  name: 	businessLogic
  other: 	studyRightBusinessLogic_service
  propertyStyle: 	Bean

- studyRightService_builder: 	org.fulib.classmodel.AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	studyRightService
  id: 	StudyRightService_builder
  modified: 	false
  name: 	builder
  other: 	studyRightBuilder_service
  propertyStyle: 	Bean

- university_id: 	org.fulib.classmodel.Attribute
  clazz: 	university
  id: 	University_id
  modified: 	false
  name: 	id
  propertyStyle: 	Bean
  type: 	String
  typeSignature: 	String

- university_rooms: 	org.fulib.classmodel.AssocRole
  aggregation: 	false
  cardinality: 	42
  clazz: 	university
  collectionType: 	c1
  id: 	University_rooms
  modified: 	false
  name: 	rooms
  other: 	room_uni
  propertyStyle: 	Bean
  roleType: 	"java.util.ArrayList<%s>"

- university_persons: 	org.fulib.classmodel.AssocRole
  aggregation: 	false
  cardinality: 	42
  clazz: 	university
  collectionType: 	c1
  id: 	University_persons
  modified: 	false
  name: 	persons
  other: 	person_uni
  propertyStyle: 	Bean
  roleType: 	"java.util.ArrayList<%s>"

- room_id: 	org.fulib.classmodel.Attribute
  clazz: 	room
  id: 	Room_id
  modified: 	false
  name: 	id
  propertyStyle: 	Bean
  type: 	String
  typeSignature: 	String

- room_credits: 	org.fulib.classmodel.Attribute
  clazz: 	room
  id: 	Room_credits
  modified: 	false
  name: 	credits
  propertyStyle: 	Bean
  type: 	String
  typeSignature: 	String

- room_uni: 	org.fulib.classmodel.AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	room
  id: 	Room_uni
  modified: 	false
  name: 	uni
  other: 	university_rooms
  propertyStyle: 	Bean

- room_doors: 	org.fulib.classmodel.AssocRole
  aggregation: 	false
  cardinality: 	42
  clazz: 	room
  collectionType: 	c1
  id: 	Room_doors
  modified: 	false
  name: 	doors
  other: 	room_doors
  propertyStyle: 	Bean
  roleType: 	"java.util.ArrayList<%s>"

- student_name: 	org.fulib.classmodel.Attribute
  clazz: 	student
  id: 	Student_name
  modified: 	false
  name: 	name
  propertyStyle: 	Bean
  type: 	String
  typeSignature: 	String

- student_birthYear: 	org.fulib.classmodel.Attribute
  clazz: 	student
  id: 	Student_birthYear
  modified: 	false
  name: 	birthYear
  propertyStyle: 	Bean
  type: 	String
  typeSignature: 	String

- student_studentId: 	org.fulib.classmodel.Attribute
  clazz: 	student
  id: 	Student_studentId
  modified: 	false
  name: 	studentId
  propertyStyle: 	Bean
  type: 	String
  typeSignature: 	String

- student_uni: 	org.fulib.classmodel.Attribute
  clazz: 	student
  id: 	Student_uni
  modified: 	false
  name: 	uni
  propertyStyle: 	Bean
  type: 	String
  typeSignature: 	String

- tourList_id: 	org.fulib.classmodel.Attribute
  clazz: 	tourList
  id: 	TourList_id
  modified: 	false
  name: 	id
  propertyStyle: 	Bean
  type: 	String
  typeSignature: 	String

- tourList_alternatives: 	org.fulib.classmodel.AssocRole
  aggregation: 	false
  cardinality: 	42
  clazz: 	tourList
  collectionType: 	c1
  id: 	TourList_alternatives
  modified: 	false
  name: 	alternatives
  other: 	tour_tourList
  propertyStyle: 	Bean
  roleType: 	"java.util.ArrayList<%s>"

- stop_id: 	org.fulib.classmodel.Attribute
  clazz: 	stop
  id: 	Stop_id
  modified: 	false
  name: 	id
  propertyStyle: 	Bean
  type: 	String
  typeSignature: 	String

- stop_motivation: 	org.fulib.classmodel.Attribute
  clazz: 	stop
  id: 	Stop_motivation
  modified: 	false
  name: 	motivation
  propertyStyle: 	Bean
  type: 	String
  typeSignature: 	String

- stop_room: 	org.fulib.classmodel.Attribute
  clazz: 	stop
  id: 	Stop_room
  modified: 	false
  name: 	room
  propertyStyle: 	Bean
  type: 	String
  typeSignature: 	String

- stop_previousStop: 	org.fulib.classmodel.AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	stop
  id: 	Stop_previousStop
  modified: 	false
  name: 	previousStop
  other: 	stop_nextStops
  propertyStyle: 	Bean

- stop_nextStops: 	org.fulib.classmodel.AssocRole
  aggregation: 	false
  cardinality: 	42
  clazz: 	stop
  collectionType: 	c1
  id: 	Stop_nextStops
  modified: 	false
  name: 	nextStops
  other: 	stop_previousStop
  propertyStyle: 	Bean
  roleType: 	"java.util.ArrayList<%s>"

- tour_id: 	org.fulib.classmodel.Attribute
  clazz: 	tour
  id: 	Tour_id
  modified: 	false
  name: 	id
  propertyStyle: 	Bean
  type: 	String
  typeSignature: 	String

- tour_stops: 	org.fulib.classmodel.Attribute
  clazz: 	tour
  id: 	Tour_stops
  modified: 	false
  name: 	stops
  propertyStyle: 	Bean
  type: 	String
  typeSignature: 	String

- tour_tourList: 	org.fulib.classmodel.AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	tour
  id: 	Tour_tourList
  modified: 	false
  name: 	tourList
  other: 	tourList_alternatives
  propertyStyle: 	Bean

- person_id: 	org.fulib.classmodel.Attribute
  clazz: 	person
  id: 	Person_id
  modified: 	false
  name: 	id
  propertyStyle: 	Bean
  type: 	String
  typeSignature: 	String

- person_name: 	org.fulib.classmodel.Attribute
  clazz: 	person
  id: 	Person_name
  modified: 	false
  name: 	name
  propertyStyle: 	Bean
  type: 	String
  typeSignature: 	String

- person_birthYear: 	org.fulib.classmodel.Attribute
  clazz: 	person
  id: 	Person_birthYear
  modified: 	false
  name: 	birthYear
  propertyStyle: 	Bean
  type: 	int
  typeSignature: 	int

- person_uni: 	org.fulib.classmodel.AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	person
  id: 	Person_uni
  modified: 	false
  name: 	uni
  other: 	university_persons
  propertyStyle: 	Bean

