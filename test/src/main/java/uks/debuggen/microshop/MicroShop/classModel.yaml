- c: 	org.fulib.classmodel.ClassModel
  classes: 	microShopModel 	microShopBusinessLogic 	microShopBuilder 	microShopService 	product 	order
  defaultCollectionType: 	c1
  defaultPropertyStyle: 	Bean
  defaultRoleType: 	"java.util.ArrayList<%s>"
  mainJavaDir: 	"test/src/main/java"
  packageName: 	uks.debuggen.microshop.MicroShop
  packageSrcFolder: 	"test/src/main/java/uks/debuggen/microshop/MicroShop"

- microShopModel: 	org.fulib.classmodel.Clazz
  attributes: 	microShopModel_modelMap
  importList: 	"import java.util.LinkedHashMap;"
  imports: 	"import java.util.LinkedHashMap;"
  methods: 	microShopModel_getOrCreateProduct 	microShopModel_getOrCreateOrder
  model: 	c
  modified: 	false
  name: 	MicroShopModel
  propertyStyle: 	Bean

- microShopBusinessLogic: 	org.fulib.classmodel.Clazz
  attributes: 	microShopBusinessLogic_model 	microShopBusinessLogic_handlerMap
  importList: 	"import java.util.LinkedHashMap;" 	"import java.util.function.Consumer;" 	"import uks.debuggen.microshop.events.*;"
  imports: 	"import java.util.LinkedHashMap;" 	"import java.util.function.Consumer;" 	"import uks.debuggen.microshop.events.*;"
  methods: 	microShopBusinessLogic_handleAddCommand 	microShopBusinessLogic_handleDemoAddCommand 	microShopBusinessLogic_handlePlaceCommand 	microShopBusinessLogic_handleDemoPlaceCommand 	microShopBusinessLogic_handlePickTaskCreatedEvent 	microShopBusinessLogic_handleDemoPickTaskCreatedEvent 	microShopBusinessLogic_handleOrderPickedEvent 	microShopBusinessLogic_handleDemoOrderPickedEvent 	microShopBusinessLogic_handleCommand 	microShopBusinessLogic_handleDemoCommand 	microShopBusinessLogic_initEventHandlerMap 	microShopBusinessLogic_ignoreEvent 	microShopBusinessLogic_getHandler
  model: 	c
  modified: 	false
  name: 	MicroShopBusinessLogic
  propertyStyle: 	Bean
  roles: 	microShopBusinessLogic_builder 	microShopBusinessLogic_service

- microShopBuilder: 	org.fulib.classmodel.Clazz
  attributes: 	microShopBuilder_model 	microShopBuilder_eventStore 	microShopBuilder_loaderMap 	microShopBuilder_groupStore
  importList: 	"import java.util.LinkedHashMap;" 	"import java.util.function.Consumer;" 	"import uks.debuggen.microshop.events.*;" 	"import java.util.function.Function;"
  imports: 	"import java.util.LinkedHashMap;" 	"import java.util.function.Consumer;" 	"import uks.debuggen.microshop.events.*;" 	"import java.util.function.Function;"
  methods: 	microShopBuilder_outdated 	microShopBuilder_storeProductBuilt 	microShopBuilder_loadProductBuilt 	microShopBuilder_storeOrderBuilt 	microShopBuilder_loadOrderBuilt 	microShopBuilder_load 	microShopBuilder_initLoaderMap 	microShopBuilder_getObjectId 	microShopBuilder_addToGroup 	microShopBuilder_stripBrackets
  model: 	c
  modified: 	false
  name: 	MicroShopBuilder
  propertyStyle: 	Bean
  roles: 	microShopBuilder_businessLogic 	microShopBuilder_service

- microShopService: 	org.fulib.classmodel.Clazz
  attributes: 	microShopService_history 	microShopService_port 	microShopService_spark 	microShopService_model
  importList: 	"import java.util.LinkedHashMap;" 	"import java.time.Instant;" 	"import java.time.format.DateTimeFormatter;" 	"import java.util.Map;" 	"import java.util.function.Consumer;" 	"import uks.debuggen.microshop.events.*;" 	"import org.fulib.yaml.Yaml;" 	"import org.fulib.yaml.YamlIdMap;" 	"import spark.Service;" 	"import spark.Request;" 	"import spark.Response;" 	"import com.mashape.unirest.http.HttpResponse;" 	"import com.mashape.unirest.http.Unirest;" 	"import com.mashape.unirest.http.exceptions.UnirestException;" 	"import java.util.concurrent.ExecutorService;" 	"import java.util.concurrent.Executors;" 	"import java.util.logging.Logger;" 	"import java.util.logging.Level;"
  imports: 	"import java.util.LinkedHashMap;" 	"import java.time.Instant;" 	"import java.time.format.DateTimeFormatter;" 	"import java.util.Map;" 	"import java.util.function.Consumer;" 	"import uks.debuggen.microshop.events.*;" 	"import org.fulib.yaml.Yaml;" 	"import org.fulib.yaml.YamlIdMap;" 	"import spark.Service;" 	"import spark.Request;" 	"import spark.Response;" 	"import com.mashape.unirest.http.HttpResponse;" 	"import com.mashape.unirest.http.Unirest;" 	"import com.mashape.unirest.http.exceptions.UnirestException;" 	"import java.util.concurrent.ExecutorService;" 	"import java.util.concurrent.Executors;" 	"import java.util.logging.Logger;" 	"import java.util.logging.Level;"
  methods: 	microShopService_query 	microShopService_isoNow 	microShopService_start 	microShopService_stop 	microShopService_getHello 	microShopService_subscribeAndLoadOldEvents 	microShopService_apply 	microShopService_getPage 	microShopService_getDemoPage 	microShopService_publish 	microShopService_postApply
  model: 	c
  modified: 	false
  name: 	MicroShopService
  propertyStyle: 	Bean
  roles: 	microShopService_businessLogic 	microShopService_builder

- product: 	org.fulib.classmodel.Clazz
  attributes: 	product_id 	product_name 	product_price
  model: 	c
  modified: 	false
  name: 	Product
  propertyStyle: 	Bean

- order: 	org.fulib.classmodel.Clazz
  attributes: 	order_id 	order_code 	order_product 	order_customer 	order_address 	order_state
  model: 	c
  modified: 	false
  name: 	Order
  propertyStyle: 	Bean

- c1: 	org.fulib.classmodel.CollectionType
  implClass: 	class java.util.ArrayList
  implTemplate: 	"java.util.ArrayList<%s>"
  itf: 	org.fulib.classmodel.CollectionInterface.List
  qualifiedImplName: 	java.util.ArrayList
  simpleImplName: 	ArrayList

- microShopModel_modelMap: 	org.fulib.classmodel.Attribute
  clazz: 	microShopModel
  id: 	MicroShopModel_modelMap
  initialization: 	"new LinkedHashMap<>()"
  modified: 	false
  name: 	modelMap
  propertyStyle: 	Bean
  type: 	"LinkedHashMap<String, Object>"
  typeSignature: 	"LinkedHashMap<String,Object>"

- microShopModel_getOrCreateProduct: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	microShopModel
  declaration: 	"public Product getOrCreateProduct(String id)"
  id: 	MicroShopModel_getOrCreateProduct
  methodBody: 	"if (id == null) return null;
return (Product) modelMap.computeIfAbsent(id, k -> new Product().setId(k));
"
  modified: 	false
  modifiers: 	public
  name: 	getOrCreateProduct
  paramsString: 	"String id"
  returnType: 	Product
  signature: 	"class/MicroShopModel/method/getOrCreateProduct(String)"

- microShopModel_getOrCreateOrder: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	microShopModel
  declaration: 	"public Order getOrCreateOrder(String id)"
  id: 	MicroShopModel_getOrCreateOrder
  methodBody: 	"if (id == null) return null;
return (Order) modelMap.computeIfAbsent(id, k -> new Order().setId(k));
"
  modified: 	false
  modifiers: 	public
  name: 	getOrCreateOrder
  paramsString: 	"String id"
  returnType: 	Order
  signature: 	"class/MicroShopModel/method/getOrCreateOrder(String)"

- microShopBusinessLogic_model: 	org.fulib.classmodel.Attribute
  clazz: 	microShopBusinessLogic
  id: 	MicroShopBusinessLogic_model
  modified: 	false
  name: 	model
  propertyStyle: 	Bean
  type: 	MicroShopModel
  typeSignature: 	MicroShopModel

- microShopBusinessLogic_handlerMap: 	org.fulib.classmodel.Attribute
  clazz: 	microShopBusinessLogic
  id: 	MicroShopBusinessLogic_handlerMap
  modified: 	false
  name: 	handlerMap
  propertyStyle: 	Bean
  type: 	"LinkedHashMap<Class, Consumer<Event>>"
  typeSignature: 	"LinkedHashMap<Class,Consumer<Event>>"

- microShopBusinessLogic_handleAddCommand: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	microShopBusinessLogic
  declaration: 	"private void handleAddCommand(Event e)"
  id: 	MicroShopBusinessLogic_handleAddCommand
  methodBody: 	"// to protect manuel changes to this method insert a 'no' in front of fulib in the next line
// fulib
AddCommand event = (AddCommand) e;
handleDemoAddCommand(event);
"
  modified: 	false
  modifiers: 	private
  name: 	handleAddCommand
  paramsString: 	"Event e"
  returnType: 	void
  signature: 	"class/MicroShopBusinessLogic/method/handleAddCommand(Event)"

- microShopBusinessLogic_handleDemoAddCommand: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	microShopBusinessLogic
  declaration: 	"private void handleDemoAddCommand(AddCommand event)"
  id: 	MicroShopBusinessLogic_handleDemoAddCommand
  methodBody: 	"if (event.getId().equals(\"12:12:01\")) {
   ProductBuilt red_shoesEvent = new ProductBuilt();
   red_shoesEvent.setId(\"12:12:02\");
   red_shoesEvent.setBlockId(\"red_shoes\");
   red_shoesEvent.setName(\"red shoes\");
   red_shoesEvent.setPrice(\"$42\");
   service.apply(red_shoesEvent);


   ProductOfferedEvent e1213 = new ProductOfferedEvent();

   e1213.setId(\"12:13\");
   e1213.setName(\"red shoes\");
   e1213.setPrice(\"$42\");
   service.apply(e1213);
}
if (event.getId().equals(\"12:15:01\")) {
   ProductBuilt blue_jeansEvent = new ProductBuilt();
   blue_jeansEvent.setId(\"12:15:02\");
   blue_jeansEvent.setBlockId(\"blue_jeans\");
   blue_jeansEvent.setName(\"blue jeans\");
   blue_jeansEvent.setPrice(\"$63\");
   service.apply(blue_jeansEvent);


   ProductOfferedEvent e1216 = new ProductOfferedEvent();

   e1216.setId(\"12:16\");
   e1216.setName(\"blue jeans\");
   e1216.setPrice(\"$63\");
   service.apply(e1216);
}
"
  modified: 	false
  modifiers: 	private
  name: 	handleDemoAddCommand
  paramsString: 	"AddCommand event"
  returnType: 	void
  signature: 	"class/MicroShopBusinessLogic/method/handleDemoAddCommand(AddCommand)"

- microShopBusinessLogic_handlePlaceCommand: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	microShopBusinessLogic
  declaration: 	"private void handlePlaceCommand(Event e)"
  id: 	MicroShopBusinessLogic_handlePlaceCommand
  methodBody: 	"// to protect manuel changes to this method insert a 'no' in front of fulib in the next line
// fulib
PlaceCommand event = (PlaceCommand) e;
handleDemoPlaceCommand(event);
"
  modified: 	false
  modifiers: 	private
  name: 	handlePlaceCommand
  paramsString: 	"Event e"
  returnType: 	void
  signature: 	"class/MicroShopBusinessLogic/method/handlePlaceCommand(Event)"

- microShopBusinessLogic_handleDemoPlaceCommand: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	microShopBusinessLogic
  declaration: 	"private void handleDemoPlaceCommand(PlaceCommand event)"
  id: 	MicroShopBusinessLogic_handleDemoPlaceCommand
  methodBody: 	"if (event.getId().equals(\"12:19:01\")) {
   OrderBuilt o0925_1Event = new OrderBuilt();
   o0925_1Event.setId(\"12:19:02\");
   o0925_1Event.setBlockId(\"o0925_1\");
   o0925_1Event.setCode(\"o0925_1\");
   o0925_1Event.setProduct(\"red shoes\");
   o0925_1Event.setCustomer(\"Carli Customer\");
   o0925_1Event.setAddress(\"Wonderland 1\");
   o0925_1Event.setState(\"new order\");
   service.apply(o0925_1Event);


   ProductOrderedEvent e1220 = new ProductOrderedEvent();

   e1220.setId(\"12:20\");
   e1220.setCode(\"o0925_1\");
   e1220.setProduct(\"red shoes\");
   e1220.setCustomer(\"Carli Customer\");
   e1220.setAddress(\"Wonderland 1\");
   service.apply(e1220);
}
"
  modified: 	false
  modifiers: 	private
  name: 	handleDemoPlaceCommand
  paramsString: 	"PlaceCommand event"
  returnType: 	void
  signature: 	"class/MicroShopBusinessLogic/method/handleDemoPlaceCommand(PlaceCommand)"

- microShopBusinessLogic_handlePickTaskCreatedEvent: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	microShopBusinessLogic
  declaration: 	"private void handlePickTaskCreatedEvent(Event e)"
  id: 	MicroShopBusinessLogic_handlePickTaskCreatedEvent
  methodBody: 	"// to protect manuel changes to this method insert a 'no' in front of fulib in the next line
// fulib
PickTaskCreatedEvent event = (PickTaskCreatedEvent) e;
handleDemoPickTaskCreatedEvent(event);
"
  modified: 	false
  modifiers: 	private
  name: 	handlePickTaskCreatedEvent
  paramsString: 	"Event e"
  returnType: 	void
  signature: 	"class/MicroShopBusinessLogic/method/handlePickTaskCreatedEvent(Event)"

- microShopBusinessLogic_handleDemoPickTaskCreatedEvent: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	microShopBusinessLogic
  declaration: 	"private void handleDemoPickTaskCreatedEvent(PickTaskCreatedEvent event)"
  id: 	MicroShopBusinessLogic_handleDemoPickTaskCreatedEvent
  methodBody: 	"if (event.getId().equals(\"12:21\")) {
   OrderBuilt o0925_1Event = new OrderBuilt();
   o0925_1Event.setId(\"12:21:01\");
   o0925_1Event.setBlockId(\"o0925_1\");
   o0925_1Event.setCode(\"o0925_1\");
   o0925_1Event.setState(\"picking\");
   service.apply(o0925_1Event);

}
"
  modified: 	false
  modifiers: 	private
  name: 	handleDemoPickTaskCreatedEvent
  paramsString: 	"PickTaskCreatedEvent event"
  returnType: 	void
  signature: 	"class/MicroShopBusinessLogic/method/handleDemoPickTaskCreatedEvent(PickTaskCreatedEvent)"

- microShopBusinessLogic_handleOrderPickedEvent: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	microShopBusinessLogic
  declaration: 	"private void handleOrderPickedEvent(Event e)"
  id: 	MicroShopBusinessLogic_handleOrderPickedEvent
  methodBody: 	"// to protect manuel changes to this method insert a 'no' in front of fulib in the next line
// fulib
OrderPickedEvent event = (OrderPickedEvent) e;
handleDemoOrderPickedEvent(event);
"
  modified: 	false
  modifiers: 	private
  name: 	handleOrderPickedEvent
  paramsString: 	"Event e"
  returnType: 	void
  signature: 	"class/MicroShopBusinessLogic/method/handleOrderPickedEvent(Event)"

- microShopBusinessLogic_handleDemoOrderPickedEvent: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	microShopBusinessLogic
  declaration: 	"private void handleDemoOrderPickedEvent(OrderPickedEvent event)"
  id: 	MicroShopBusinessLogic_handleDemoOrderPickedEvent
  methodBody: 	"if (event.getId().equals(\"12:25\")) {
   OrderBuilt o0925_1Event = new OrderBuilt();
   o0925_1Event.setId(\"12:25:01\");
   o0925_1Event.setBlockId(\"o0925_1\");
   o0925_1Event.setCode(\"o0925_1\");
   o0925_1Event.setState(\"shipping\");
   service.apply(o0925_1Event);

}
"
  modified: 	false
  modifiers: 	private
  name: 	handleDemoOrderPickedEvent
  paramsString: 	"OrderPickedEvent event"
  returnType: 	void
  signature: 	"class/MicroShopBusinessLogic/method/handleDemoOrderPickedEvent(OrderPickedEvent)"

- microShopBusinessLogic_handleCommand: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	microShopBusinessLogic
  declaration: 	"private void handleCommand(Event e)"
  id: 	MicroShopBusinessLogic_handleCommand
  methodBody: 	"// to protect manuel changes to this method insert a 'no' in front of fulib in the next line
// fulib
Command event = (Command) e;
handleDemoCommand(event);
"
  modified: 	false
  modifiers: 	private
  name: 	handleCommand
  paramsString: 	"Event e"
  returnType: 	void
  signature: 	"class/MicroShopBusinessLogic/method/handleCommand(Event)"

- microShopBusinessLogic_handleDemoCommand: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	microShopBusinessLogic
  declaration: 	"private void handleDemoCommand(Command event)"
  id: 	MicroShopBusinessLogic_handleDemoCommand
  methodBody: 	"if (event.getId().equals(\"12:27:01\")) {
   OrderBuilt o0925_1Event = new OrderBuilt();
   o0925_1Event.setId(\"12:27:02\");
   o0925_1Event.setBlockId(\"o0925_1\");
   o0925_1Event.setCode(\"o0925_1\");
   o0925_1Event.setState(\"delivered\");
   service.apply(o0925_1Event);


   OrderDeliveredEvent e1228 = new OrderDeliveredEvent();

   e1228.setId(\"12:28\");
   e1228.setOrder(\"o0925_1\");
   service.apply(e1228);
}
"
  modified: 	false
  modifiers: 	private
  name: 	handleDemoCommand
  paramsString: 	"Command event"
  returnType: 	void
  signature: 	"class/MicroShopBusinessLogic/method/handleDemoCommand(Command)"

- microShopBusinessLogic_initEventHandlerMap: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	microShopBusinessLogic
  declaration: 	"public void initEventHandlerMap()"
  id: 	MicroShopBusinessLogic_initEventHandlerMap
  methodBody: 	"if (handlerMap == null) {
   handlerMap = new LinkedHashMap<>();
   handlerMap.put(ProductBuilt.class, builder::storeProductBuilt);
   handlerMap.put(OrderBuilt.class, builder::storeOrderBuilt);
   handlerMap.put(AddCommand.class, this::handleAddCommand);
   handlerMap.put(PlaceCommand.class, this::handlePlaceCommand);
   handlerMap.put(PickTaskCreatedEvent.class, this::handlePickTaskCreatedEvent);
   handlerMap.put(OrderPickedEvent.class, this::handleOrderPickedEvent);
   handlerMap.put(Command.class, this::handleCommand);
}
"
  modified: 	false
  modifiers: 	public
  name: 	initEventHandlerMap
  paramsString: 	""
  returnType: 	void
  signature: 	"class/MicroShopBusinessLogic/method/initEventHandlerMap()"

- microShopBusinessLogic_ignoreEvent: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	microShopBusinessLogic
  declaration: 	"private void ignoreEvent(Event event)"
  id: 	MicroShopBusinessLogic_ignoreEvent
  methodBody: 	"// empty
"
  modified: 	false
  modifiers: 	private
  name: 	ignoreEvent
  paramsString: 	"Event event"
  returnType: 	void
  signature: 	"class/MicroShopBusinessLogic/method/ignoreEvent(Event)"

- microShopBusinessLogic_getHandler: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	microShopBusinessLogic
  declaration: 	"public Consumer<Event> getHandler(Event event)"
  id: 	MicroShopBusinessLogic_getHandler
  methodBody: 	"return getHandlerMap().computeIfAbsent(event.getClass(), k -> this::ignoreEvent);
"
  modified: 	false
  modifiers: 	public
  name: 	getHandler
  paramsString: 	"Event event"
  returnType: 	"Consumer<Event>"
  signature: 	"class/MicroShopBusinessLogic/method/getHandler(Event)"

- microShopBusinessLogic_builder: 	org.fulib.classmodel.AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	microShopBusinessLogic
  id: 	MicroShopBusinessLogic_builder
  modified: 	false
  name: 	builder
  other: 	microShopBuilder_businessLogic
  propertyStyle: 	Bean

- microShopBusinessLogic_service: 	org.fulib.classmodel.AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	microShopBusinessLogic
  id: 	MicroShopBusinessLogic_service
  modified: 	false
  name: 	service
  other: 	microShopService_businessLogic
  propertyStyle: 	Bean

- microShopBuilder_model: 	org.fulib.classmodel.Attribute
  clazz: 	microShopBuilder
  id: 	MicroShopBuilder_model
  modified: 	false
  name: 	model
  propertyStyle: 	Bean
  type: 	MicroShopModel
  typeSignature: 	MicroShopModel

- microShopBuilder_eventStore: 	org.fulib.classmodel.Attribute
  clazz: 	microShopBuilder
  id: 	MicroShopBuilder_eventStore
  initialization: 	"new LinkedHashMap<>()"
  modified: 	false
  name: 	eventStore
  propertyStyle: 	Bean
  type: 	"LinkedHashMap<String, DataEvent>"
  typeSignature: 	"LinkedHashMap<String,DataEvent>"

- microShopBuilder_loaderMap: 	org.fulib.classmodel.Attribute
  clazz: 	microShopBuilder
  id: 	MicroShopBuilder_loaderMap
  modified: 	false
  name: 	loaderMap
  propertyStyle: 	Bean
  type: 	"LinkedHashMap<Class, Function<Event, Object>>"
  typeSignature: 	"LinkedHashMap<Class,Function<Event,Object>>"

- microShopBuilder_groupStore: 	org.fulib.classmodel.Attribute
  clazz: 	microShopBuilder
  id: 	MicroShopBuilder_groupStore
  initialization: 	"new LinkedHashMap<>()"
  modified: 	false
  name: 	groupStore
  propertyStyle: 	Bean
  type: 	"LinkedHashMap<String, LinkedHashMap<String, DataEvent>>"
  typeSignature: 	"LinkedHashMap<String,LinkedHashMap<String,DataEvent>>"

- microShopBuilder_outdated: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	microShopBuilder
  declaration: 	"private boolean outdated(DataEvent event)"
  id: 	MicroShopBuilder_outdated
  methodBody: 	"      DataEvent oldEvent = getEventStore().get(event.getBlockId());

      if (oldEvent == null) {
         eventStore.put(event.getBlockId(), event);
         return false;
      }

      if (oldEvent.getId().compareTo(event.getId()) < 0) {
         new org.fulib.yaml.Yamler2().mergeObjects(oldEvent, event);
         eventStore.put(event.getBlockId(), event);
         return false;
      }

      return true;"
  modified: 	false
  modifiers: 	private
  name: 	outdated
  paramsString: 	"DataEvent event"
  returnType: 	boolean
  signature: 	"class/MicroShopBuilder/method/outdated(DataEvent)"

- microShopBuilder_storeProductBuilt: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	microShopBuilder
  declaration: 	"public void storeProductBuilt(Event e)"
  id: 	MicroShopBuilder_storeProductBuilt
  methodBody: 	"ProductBuilt event = (ProductBuilt) e;
if (outdated(event)) {
   return;
}
// please insert a no before fulib in the next line and insert addToGroup commands as necessary
// fulib
"
  modified: 	false
  modifiers: 	public
  name: 	storeProductBuilt
  paramsString: 	"Event e"
  returnType: 	void
  signature: 	"class/MicroShopBuilder/method/storeProductBuilt(Event)"

- microShopBuilder_loadProductBuilt: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	microShopBuilder
  declaration: 	"public Product loadProductBuilt(Event e)"
  id: 	MicroShopBuilder_loadProductBuilt
  methodBody: 	"ProductBuilt event = (ProductBuilt) e;
Product object = model.getOrCreateProduct(event.getBlockId());
object.setName(event.getName());
object.setPrice(event.getPrice());
return object;
"
  modified: 	false
  modifiers: 	public
  name: 	loadProductBuilt
  paramsString: 	"Event e"
  returnType: 	Product
  signature: 	"class/MicroShopBuilder/method/loadProductBuilt(Event)"

- microShopBuilder_storeOrderBuilt: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	microShopBuilder
  declaration: 	"public void storeOrderBuilt(Event e)"
  id: 	MicroShopBuilder_storeOrderBuilt
  methodBody: 	"OrderBuilt event = (OrderBuilt) e;
if (outdated(event)) {
   return;
}
// please insert a no before fulib in the next line and insert addToGroup commands as necessary
// fulib
"
  modified: 	false
  modifiers: 	public
  name: 	storeOrderBuilt
  paramsString: 	"Event e"
  returnType: 	void
  signature: 	"class/MicroShopBuilder/method/storeOrderBuilt(Event)"

- microShopBuilder_loadOrderBuilt: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	microShopBuilder
  declaration: 	"public Order loadOrderBuilt(Event e)"
  id: 	MicroShopBuilder_loadOrderBuilt
  methodBody: 	"OrderBuilt event = (OrderBuilt) e;
Order object = model.getOrCreateOrder(event.getBlockId());
object.setCode(event.getCode());
object.setProduct(event.getProduct());
object.setCustomer(event.getCustomer());
object.setAddress(event.getAddress());
object.setState(event.getState());
return object;
"
  modified: 	false
  modifiers: 	public
  name: 	loadOrderBuilt
  paramsString: 	"Event e"
  returnType: 	Order
  signature: 	"class/MicroShopBuilder/method/loadOrderBuilt(Event)"

- microShopBuilder_load: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	microShopBuilder
  declaration: 	"public Object load(String blockId)"
  id: 	MicroShopBuilder_load
  methodBody: 	"      DataEvent dataEvent = eventStore.get(blockId);
      if (dataEvent == null) {
         return null;
      }

      initLoaderMap();
      Function<Event, Object> loader = loaderMap.get(dataEvent.getClass());
      Object object = loader.apply(dataEvent);

      LinkedHashMap<String, DataEvent> group = groupStore.computeIfAbsent(blockId, k -> new LinkedHashMap<>());
      for (DataEvent element : group.values()) {
         loader = loaderMap.get(element.getClass());
         loader.apply(element);
      }

      return object;"
  modified: 	false
  modifiers: 	public
  name: 	load
  paramsString: 	"String blockId"
  returnType: 	Object
  signature: 	"class/MicroShopBuilder/method/load(String)"

- microShopBuilder_initLoaderMap: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	microShopBuilder
  declaration: 	"private void initLoaderMap()"
  id: 	MicroShopBuilder_initLoaderMap
  methodBody: 	"if (loaderMap == null) {
   loaderMap = new LinkedHashMap<>();
   loaderMap.put(ProductBuilt.class, this::loadProductBuilt);
   loaderMap.put(OrderBuilt.class, this::loadOrderBuilt);
}
"
  modified: 	false
  modifiers: 	private
  name: 	initLoaderMap
  paramsString: 	""
  returnType: 	void
  signature: 	"class/MicroShopBuilder/method/initLoaderMap()"

- microShopBuilder_getObjectId: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	microShopBuilder
  declaration: 	"public String getObjectId(String value)"
  id: 	MicroShopBuilder_getObjectId
  methodBody: 	"      if (value == null) {
         return null;
      }
      return value.replaceAll(\"\\W+\", \"_\");"
  modified: 	false
  modifiers: 	public
  name: 	getObjectId
  paramsString: 	"String value"
  returnType: 	String
  signature: 	"class/MicroShopBuilder/method/getObjectId(String)"

- microShopBuilder_addToGroup: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	microShopBuilder
  declaration: 	"private void addToGroup(String groupId, String elementId)"
  id: 	MicroShopBuilder_addToGroup
  methodBody: 	"      DataEvent dataEvent = eventStore.get(elementId);

      if (dataEvent == null) {
         java.util.logging.Logger.getGlobal().severe(String.format(\"could not find element event %s for group %s \", elementId, groupId));
         return;
      }

      LinkedHashMap<String, DataEvent> group = groupStore.computeIfAbsent(groupId, k -> new LinkedHashMap<>());
      group.put(elementId, dataEvent);"
  modified: 	false
  modifiers: 	private
  name: 	addToGroup
  paramsString: 	"String groupId, String elementId"
  returnType: 	void
  signature: 	"class/MicroShopBuilder/method/addToGroup(String,String)"

- microShopBuilder_stripBrackets: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	microShopBuilder
  declaration: 	"public String stripBrackets(String back)"
  id: 	MicroShopBuilder_stripBrackets
  methodBody: 	"      if (back == null) {
         return \"\";
      }
      int open = back.indexOf('[');
      int close = back.indexOf(']');
      if (open >= 0 && close >= 0) {
         back = back.substring(open + 1, close);
      }
      return back;"
  modified: 	false
  modifiers: 	public
  name: 	stripBrackets
  paramsString: 	"String back"
  returnType: 	String
  signature: 	"class/MicroShopBuilder/method/stripBrackets(String)"

- microShopBuilder_businessLogic: 	org.fulib.classmodel.AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	microShopBuilder
  id: 	MicroShopBuilder_businessLogic
  modified: 	false
  name: 	businessLogic
  other: 	microShopBusinessLogic_builder
  propertyStyle: 	Bean

- microShopBuilder_service: 	org.fulib.classmodel.AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	microShopBuilder
  id: 	MicroShopBuilder_service
  modified: 	false
  name: 	service
  other: 	microShopService_builder
  propertyStyle: 	Bean

- microShopService_history: 	org.fulib.classmodel.Attribute
  clazz: 	microShopService
  id: 	MicroShopService_history
  initialization: 	"new LinkedHashMap<>()"
  modified: 	false
  name: 	history
  propertyStyle: 	Bean
  type: 	"LinkedHashMap<String, Event>"
  typeSignature: 	"LinkedHashMap<String,Event>"

- microShopService_port: 	org.fulib.classmodel.Attribute
  clazz: 	microShopService
  id: 	MicroShopService_port
  initialization: 	42002
  modified: 	false
  name: 	port
  propertyStyle: 	Bean
  type: 	int
  typeSignature: 	int

- microShopService_spark: 	org.fulib.classmodel.Attribute
  clazz: 	microShopService
  id: 	MicroShopService_spark
  modified: 	false
  name: 	spark
  propertyStyle: 	Bean
  type: 	Service
  typeSignature: 	Service

- microShopService_model: 	org.fulib.classmodel.Attribute
  clazz: 	microShopService
  id: 	MicroShopService_model
  modified: 	false
  name: 	model
  propertyStyle: 	Bean
  type: 	MicroShopModel
  typeSignature: 	MicroShopModel

- microShopService_query: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	microShopService
  declaration: 	"public Query query(Query query)"
  id: 	MicroShopService_query
  methodBody: 	"      DataEvent dataEvent = getBuilder().getEventStore().get(query.getKey());

      if (dataEvent == null) {
         return query;
      }

      if (dataEvent instanceof DataGroup) {
         DataGroup group = (DataGroup) dataEvent;
         query.withResults(group.getElements());
      }
      else {
         query.withResults(dataEvent);
      }

      return query;"
  modified: 	false
  modifiers: 	public
  name: 	query
  paramsString: 	"Query query"
  returnType: 	Query
  signature: 	"class/MicroShopService/method/query(Query)"

- microShopService_isoNow: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	microShopService
  declaration: 	"public String isoNow()"
  id: 	MicroShopService_isoNow
  methodBody: 	"return DateTimeFormatter.ISO_INSTANT.format(Instant.now());
"
  modified: 	false
  modifiers: 	public
  name: 	isoNow
  paramsString: 	""
  returnType: 	String
  signature: 	"class/MicroShopService/method/isoNow()"

- microShopService_start: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	microShopService
  declaration: 	"public void start()"
  id: 	MicroShopService_start
  methodBody: 	"model = new MicroShopModel();
setBuilder(new MicroShopBuilder().setModel(model));
setBusinessLogic(new MicroShopBusinessLogic());
businessLogic.setBuilder(getBuilder());
businessLogic.setModel(model);
ExecutorService executor = Executors.newSingleThreadExecutor();
spark = Service.ignite();
spark.port(port);
spark.get(\"/page/:id\", (req, res) -> executor.submit(() -> this.getPage(req, res)).get());
spark.get(\"/\", (req, res) -> executor.submit(() -> this.getHello(req, res)).get());
spark.post(\"/apply\", (req, res) -> executor.submit(() -> this.postApply(req, res)).get());
executor.submit(this::subscribeAndLoadOldEvents);
Logger.getGlobal().info(\"MicroShop service is up and running on port \" + port);
"
  modified: 	false
  modifiers: 	public
  name: 	start
  paramsString: 	""
  returnType: 	void
  signature: 	"class/MicroShopService/method/start()"

- microShopService_stop: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	microShopService
  declaration: 	"public void stop()"
  id: 	MicroShopService_stop
  methodBody: 	"spark.stop();
"
  modified: 	false
  modifiers: 	public
  name: 	stop
  paramsString: 	""
  returnType: 	void
  signature: 	"class/MicroShopService/method/stop()"

- microShopService_getHello: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	microShopService
  declaration: 	"private String getHello(Request req, Response res)"
  id: 	MicroShopService_getHello
  methodBody: 	"try {
   String events = Yaml.encodeSimple(getHistory().values().toArray());
   String objects = Yaml.encodeSimple(model.getModelMap().values().toArray());
   return \"<p id='MicroShop'>This is the MicroShop service. </p>\n\" +
         \"<pre id=\\"history\\">\" + events + \"</pre>\n\" +
         \"<pre id=\\"data\\">\" + objects + \"</pre>\n\" +
         \"\";
}
catch (Exception e) {
   Logger.getGlobal().log(Level.SEVERE, e.getMessage(), e);
   return \"MicroShop Error \" + e.getMessage();
}
"
  modified: 	false
  modifiers: 	private
  name: 	getHello
  paramsString: 	"Request req, Response res"
  returnType: 	String
  signature: 	"class/MicroShopService/method/getHello(Request,Response)"

- microShopService_subscribeAndLoadOldEvents: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	microShopService
  declaration: 	"private void subscribeAndLoadOldEvents()"
  id: 	MicroShopService_subscribeAndLoadOldEvents
  methodBody: 	"ServiceSubscribed serviceSubscribed = new ServiceSubscribed()
      .setServiceUrl(String.format(\"http://localhost:%d/apply\", port));
String json = Yaml.encodeSimple(serviceSubscribed);
try {
   String url = \"http://localhost:42000/subscribe\";
   HttpResponse<String> response = Unirest
         .post(url)
         .body(json)
         .asString();
   String body = response.getBody();
   YamlIdMap idMap = new YamlIdMap(Event.class.getPackageName());
   idMap.decode(body);
   Map<String, Object> objectMap = idMap.getObjIdMap();
   for (Object obj : objectMap.values()) {
      apply((Event) obj);
   }
}
catch (UnirestException e) {
   e.printStackTrace();
}"
  modified: 	false
  modifiers: 	private
  name: 	subscribeAndLoadOldEvents
  paramsString: 	""
  returnType: 	void
  signature: 	"class/MicroShopService/method/subscribeAndLoadOldEvents()"

- microShopService_apply: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	microShopService
  declaration: 	"public void apply(Event event)"
  id: 	MicroShopService_apply
  methodBody: 	"if (history.get(event.getId()) != null) {
   return;
}
businessLogic.initEventHandlerMap();
Consumer<Event> handler = businessLogic.getHandler(event);
handler.accept(event);
history.put(event.getId(), event);
firePropertyChange(PROPERTY_HISTORY, null, event);
publish(event);"
  modified: 	false
  modifiers: 	public
  name: 	apply
  paramsString: 	"Event event"
  returnType: 	void
  signature: 	"class/MicroShopService/method/apply(Event)"

- microShopService_getPage: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	microShopService
  declaration: 	"public String getPage(Request request, Response response)"
  id: 	MicroShopService_getPage
  methodBody: 	"// to protect manuel changes to this method insert a 'no' in front of fulib in the next line
// fulib
return getDemoPage(request, response);
"
  modified: 	false
  modifiers: 	public
  name: 	getPage
  paramsString: 	"Request request, Response response"
  returnType: 	String
  signature: 	"class/MicroShopService/method/getPage(Request,Response)"

- microShopService_getDemoPage: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	microShopService
  declaration: 	"public String getDemoPage(Request request, Response response)"
  id: 	MicroShopService_getDemoPage
  methodBody: 	"StringBuilder html = new StringBuilder();
String id = request.params(\"id\");
String event = request.queryParams(\"event\");

if (\"add offer\".equals(event)) {

   // create AddCommand: add offer
   AddCommand e121201 = new AddCommand();
   e121201.setId(\"12:12:01\");
   e121201.setProduct(request.queryParams(\"product\"));
   e121201.setPrice(request.queryParams(\"price\"));
   apply(e121201);
}

if (\"add offer\".equals(event)) {

   // create AddCommand: add offer
   AddCommand e121501 = new AddCommand();
   e121501.setId(\"12:15:01\");
   e121501.setProduct(request.queryParams(\"product\"));
   e121501.setPrice(request.queryParams(\"price\"));
   apply(e121501);
}

if (\"place order\".equals(event)) {

   // create PlaceCommand: place order
   PlaceCommand e121901 = new PlaceCommand();
   e121901.setId(\"12:19:01\");
   e121901.setProduct(request.queryParams(\"product\"));
   e121901.setCustomer(request.queryParams(\"customer\"));
   e121901.setAddress(request.queryParams(\"address\"));
   apply(e121901);
}



// 12:11
if (id.equals(\"12_11\")) {
   html.append(\"<form action=\\"/page/12_12\\" method=\\"get\\">\n\");
   // MicroShop offers 12:11
   html.append(\"   <p>Offers overview</p>\n\");
   html.append(\"   <p><input id=\\"add\\" name=\\"button\\" type=\\"submit\\" value=\\"add\\"></p>\n\");
   html.append(\"   <p>no offers yet</p>\n\");
   html.append(\"</form>\n\");
   return html.toString();
}

// 12:12
if (id.equals(\"12_12\")) {
   html.append(\"<form action=\\"/page/12_14\\" method=\\"get\\">\n\");
   // MicroShop add offer 12:12
   html.append(\"   <p>make new offer</p>\n\");
   html.append(\"   <p><input id=\\"product\\" name=\\"product\\" placeholder=\\"product?\\"></p>\n\");
   html.append(\"   <p><input id=\\"price\\" name=\\"price\\" placeholder=\\"price?\\"></p>\n\");
   html.append(\"   <p><input id=\\"event\\" name=\\"event\\" type=\\"hidden\\" value=\\"add offer\\"></p>\n\");
   html.append(\"   <p><input id=\\"ok\\" name=\\"button\\" type=\\"submit\\" value=\\"ok\\"></p>\n\");
   html.append(\"</form>\n\");
   return html.toString();
}

// 12:14
if (id.equals(\"12_14\")) {
   html.append(\"<form action=\\"/page/12_15\\" method=\\"get\\">\n\");
   // MicroShop offers 12:14
   html.append(\"   <p>Offers overview</p>\n\");
   html.append(\"   <p><input id=\\"add\\" name=\\"button\\" type=\\"submit\\" value=\\"add\\"></p>\n\");
   html.append(\"   <p>red shoes, $42</p>\n\");
   html.append(\"</form>\n\");
   return html.toString();
}

// 12:15
if (id.equals(\"12_15\")) {
   html.append(\"<form action=\\"/page/12_17\\" method=\\"get\\">\n\");
   // MicroShop add offer 12:15
   html.append(\"   <p>make new offer</p>\n\");
   html.append(\"   <p><input id=\\"product\\" name=\\"product\\" placeholder=\\"product?\\"></p>\n\");
   html.append(\"   <p><input id=\\"price\\" name=\\"price\\" placeholder=\\"price?\\"></p>\n\");
   html.append(\"   <p><input id=\\"event\\" name=\\"event\\" type=\\"hidden\\" value=\\"add offer\\"></p>\n\");
   html.append(\"   <p><input id=\\"ok\\" name=\\"button\\" type=\\"submit\\" value=\\"ok\\"></p>\n\");
   html.append(\"</form>\n\");
   return html.toString();
}

// 12:17
if (id.equals(\"12_17\")) {
   html.append(\"<form action=\\"/page/next_page\\" method=\\"get\\">\n\");
   // MicroShop offers 12:17
   html.append(\"   <p>Offers overview</p>\n\");
   html.append(\"   <p><input id=\\"add\\" name=\\"button\\" type=\\"submit\\" value=\\"add\\"></p>\n\");
   html.append(\"   <p>red shoes, $42</p>\n\");
   html.append(\"   <p>blue jeans, $63</p>\n\");
   html.append(\"</form>\n\");
   return html.toString();
}

// 12:18
if (id.equals(\"12_18\")) {
   html.append(\"<form action=\\"/page/12_19\\" method=\\"get\\">\n\");
   // MicroShop offers 12:18
   html.append(\"   <p>Welcome to our micro shop</p>\n\");
   html.append(\"   <p>We have</p>\n\");
   html.append(\"   <p>red shoes for $42</p>\n\");
   html.append(\"   <p>blue jeans for $63</p>\n\");
   html.append(\"   <p><input id=\\"order\\" name=\\"button\\" type=\\"submit\\" value=\\"order\\"></p>\n\");
   html.append(\"</form>\n\");
   return html.toString();
}

// 12:19
if (id.equals(\"12_19\")) {
   html.append(\"<form action=\\"/page/12_22\\" method=\\"get\\">\n\");
   // MicroShop buy 12:19
   html.append(\"   <p>Welcome to our micro shop</p>\n\");
   html.append(\"   <p><input id=\\"product\\" name=\\"product\\" placeholder=\\"product?\\"></p>\n\");
   html.append(\"   <p><input id=\\"customer\\" name=\\"customer\\" placeholder=\\"customer?\\"></p>\n\");
   html.append(\"   <p><input id=\\"address\\" name=\\"address\\" placeholder=\\"address?\\"></p>\n\");
   html.append(\"   <p><input id=\\"event\\" name=\\"event\\" type=\\"hidden\\" value=\\"place order\\"></p>\n\");
   html.append(\"   <p><input id=\\"buy\\" name=\\"button\\" type=\\"submit\\" value=\\"buy\\"></p>\n\");
   html.append(\"</form>\n\");
   return html.toString();
}

// 12:22
if (id.equals(\"12_22\")) {
   html.append(\"<form action=\\"/page/next_page\\" method=\\"get\\">\n\");
   // MicroShop Carli overview 12:22
   html.append(\"   <p>Welcome Carli</p>\n\");
   html.append(\"   <p>Your orders are</p>\n\");
   html.append(\"   <p>red shoes for $42, picking</p>\n\");
   html.append(\"   <p><input id=\\"order\\" name=\\"button\\" type=\\"submit\\" value=\\"order\\"></p>\n\");
   html.append(\"</form>\n\");
   return html.toString();
}



html.append(\"This is the Shop Service page \" + id + \"\n\");
return html.toString();"
  modified: 	false
  modifiers: 	public
  name: 	getDemoPage
  paramsString: 	"Request request, Response response"
  returnType: 	String
  signature: 	"class/MicroShopService/method/getDemoPage(Request,Response)"

- microShopService_publish: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	microShopService
  declaration: 	"public void publish(Event event)"
  id: 	MicroShopService_publish
  methodBody: 	"String json = Yaml.encodeSimple(event);

try {
   HttpResponse<String> response = Unirest
         .post(\"http://localhost:42000/publish\")
         .body(json)
         .asString();
}
catch (UnirestException e) {
   e.printStackTrace();
}"
  modified: 	false
  modifiers: 	public
  name: 	publish
  paramsString: 	"Event event"
  returnType: 	void
  signature: 	"class/MicroShopService/method/publish(Event)"

- microShopService_postApply: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	microShopService
  declaration: 	"private String postApply(Request req, Response res)"
  id: 	MicroShopService_postApply
  methodBody: 	"      String body = req.body();
      try {
         YamlIdMap idMap = new YamlIdMap(Event.class.getPackageName());
         idMap.decode(body);
         Map<String, Object> map = idMap.getObjIdMap();
         for (Object value : map.values()) {
            Event event = (Event) value;
            apply(event);
         }
      }
      catch (Exception e) {
         String message = e.getMessage();
         if (message.contains(\"ReflectorMap could not find class description\")) {
            Logger.getGlobal().info(\"post apply ignores unknown event \" + body);
         }
         else {
            Logger.getGlobal().log(Level.SEVERE, \"postApply failed\", e);
         }
      }
      return \"apply done\";"
  modified: 	false
  modifiers: 	private
  name: 	postApply
  paramsString: 	"Request req, Response res"
  returnType: 	String
  signature: 	"class/MicroShopService/method/postApply(Request,Response)"

- microShopService_businessLogic: 	org.fulib.classmodel.AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	microShopService
  id: 	MicroShopService_businessLogic
  modified: 	false
  name: 	businessLogic
  other: 	microShopBusinessLogic_service
  propertyStyle: 	Bean

- microShopService_builder: 	org.fulib.classmodel.AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	microShopService
  id: 	MicroShopService_builder
  modified: 	false
  name: 	builder
  other: 	microShopBuilder_service
  propertyStyle: 	Bean

- product_id: 	org.fulib.classmodel.Attribute
  clazz: 	product
  id: 	Product_id
  modified: 	false
  name: 	id
  propertyStyle: 	Bean
  type: 	String
  typeSignature: 	String

- product_name: 	org.fulib.classmodel.Attribute
  clazz: 	product
  id: 	Product_name
  modified: 	false
  name: 	name
  propertyStyle: 	Bean
  type: 	String
  typeSignature: 	String

- product_price: 	org.fulib.classmodel.Attribute
  clazz: 	product
  id: 	Product_price
  modified: 	false
  name: 	price
  propertyStyle: 	Bean
  type: 	String
  typeSignature: 	String

- order_id: 	org.fulib.classmodel.Attribute
  clazz: 	order
  id: 	Order_id
  modified: 	false
  name: 	id
  propertyStyle: 	Bean
  type: 	String
  typeSignature: 	String

- order_code: 	org.fulib.classmodel.Attribute
  clazz: 	order
  id: 	Order_code
  modified: 	false
  name: 	code
  propertyStyle: 	Bean
  type: 	String
  typeSignature: 	String

- order_product: 	org.fulib.classmodel.Attribute
  clazz: 	order
  id: 	Order_product
  modified: 	false
  name: 	product
  propertyStyle: 	Bean
  type: 	String
  typeSignature: 	String

- order_customer: 	org.fulib.classmodel.Attribute
  clazz: 	order
  id: 	Order_customer
  modified: 	false
  name: 	customer
  propertyStyle: 	Bean
  type: 	String
  typeSignature: 	String

- order_address: 	org.fulib.classmodel.Attribute
  clazz: 	order
  id: 	Order_address
  modified: 	false
  name: 	address
  propertyStyle: 	Bean
  type: 	String
  typeSignature: 	String

- order_state: 	org.fulib.classmodel.Attribute
  clazz: 	order
  id: 	Order_state
  modified: 	false
  name: 	state
  propertyStyle: 	Bean
  type: 	String
  typeSignature: 	String

