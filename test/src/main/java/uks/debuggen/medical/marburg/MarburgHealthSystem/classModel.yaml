- c: 	org.fulib.classmodel.ClassModel
  classes: 	marburgHealthSystemModel 	marburgHealthSystemBusinessLogic 	marburgHealthSystemBuilder 	marburgHealthSystemService 	name
  defaultCollectionType: 	c1
  defaultPropertyStyle: 	Bean
  defaultRoleType: 	"java.util.ArrayList<%s>"
  mainJavaDir: 	"test/src/main/java"
  packageName: 	uks.debuggen.medical.marburg.MarburgHealthSystem
  packageSrcFolder: 	"test/src/main/java/uks/debuggen/medical/marburg/MarburgHealthSystem"

- marburgHealthSystemModel: 	org.fulib.classmodel.Clazz
  attributes: 	marburgHealthSystemModel_modelMap
  importList: 	"import java.util.LinkedHashMap;"
  imports: 	"import java.util.LinkedHashMap;"
  methods: 	marburgHealthSystemModel_getOrCreateName
  model: 	c
  modified: 	false
  name: 	MarburgHealthSystemModel
  propertyStyle: 	Bean

- marburgHealthSystemBusinessLogic: 	org.fulib.classmodel.Clazz
  attributes: 	marburgHealthSystemBusinessLogic_model 	marburgHealthSystemBusinessLogic_handlerMap
  importList: 	"import java.util.LinkedHashMap;" 	"import java.util.function.Consumer;" 	"import uks.debuggen.medical.marburg.events.*;"
  imports: 	"import java.util.LinkedHashMap;" 	"import java.util.function.Consumer;" 	"import uks.debuggen.medical.marburg.events.*;"
  methods: 	marburgHealthSystemBusinessLogic_handleLoadDiseasesCommand 	marburgHealthSystemBusinessLogic_handleDemoLoadDiseasesCommand 	marburgHealthSystemBusinessLogic_initEventHandlerMap 	marburgHealthSystemBusinessLogic_ignoreEvent 	marburgHealthSystemBusinessLogic_getHandler
  model: 	c
  modified: 	false
  name: 	MarburgHealthSystemBusinessLogic
  propertyStyle: 	Bean
  roles: 	marburgHealthSystemBusinessLogic_builder 	marburgHealthSystemBusinessLogic_service

- marburgHealthSystemBuilder: 	org.fulib.classmodel.Clazz
  attributes: 	marburgHealthSystemBuilder_model 	marburgHealthSystemBuilder_eventStore 	marburgHealthSystemBuilder_loaderMap 	marburgHealthSystemBuilder_groupStore
  importList: 	"import java.util.LinkedHashMap;" 	"import java.util.function.Consumer;" 	"import uks.debuggen.medical.marburg.events.*;" 	"import java.util.function.Function;"
  imports: 	"import java.util.LinkedHashMap;" 	"import java.util.function.Consumer;" 	"import uks.debuggen.medical.marburg.events.*;" 	"import java.util.function.Function;"
  methods: 	marburgHealthSystemBuilder_outdated 	marburgHealthSystemBuilder_storeNameBuilt 	marburgHealthSystemBuilder_loadNameBuilt 	marburgHealthSystemBuilder_load 	marburgHealthSystemBuilder_initLoaderMap 	marburgHealthSystemBuilder_addToGroup 	marburgHealthSystemBuilder_stripBrackets
  model: 	c
  modified: 	false
  name: 	MarburgHealthSystemBuilder
  propertyStyle: 	Bean
  roles: 	marburgHealthSystemBuilder_businessLogic 	marburgHealthSystemBuilder_service

- marburgHealthSystemService: 	org.fulib.classmodel.Clazz
  attributes: 	marburgHealthSystemService_history 	marburgHealthSystemService_port 	marburgHealthSystemService_spark 	marburgHealthSystemService_model
  importList: 	"import java.util.LinkedHashMap;" 	"import java.time.Instant;" 	"import java.time.format.DateTimeFormatter;" 	"import java.util.Map;" 	"import java.util.function.Consumer;" 	"import uks.debuggen.medical.marburg.events.*;" 	"import org.fulib.yaml.Yaml;" 	"import org.fulib.yaml.YamlIdMap;" 	"import spark.Service;" 	"import spark.Request;" 	"import spark.Response;" 	"import com.mashape.unirest.http.HttpResponse;" 	"import com.mashape.unirest.http.Unirest;" 	"import com.mashape.unirest.http.exceptions.UnirestException;" 	"import java.util.concurrent.ExecutorService;" 	"import java.util.concurrent.Executors;" 	"import java.util.logging.Logger;" 	"import java.util.logging.Level;"
  imports: 	"import java.util.LinkedHashMap;" 	"import java.time.Instant;" 	"import java.time.format.DateTimeFormatter;" 	"import java.util.Map;" 	"import java.util.function.Consumer;" 	"import uks.debuggen.medical.marburg.events.*;" 	"import org.fulib.yaml.Yaml;" 	"import org.fulib.yaml.YamlIdMap;" 	"import spark.Service;" 	"import spark.Request;" 	"import spark.Response;" 	"import com.mashape.unirest.http.HttpResponse;" 	"import com.mashape.unirest.http.Unirest;" 	"import com.mashape.unirest.http.exceptions.UnirestException;" 	"import java.util.concurrent.ExecutorService;" 	"import java.util.concurrent.Executors;" 	"import java.util.logging.Logger;" 	"import java.util.logging.Level;"
  methods: 	marburgHealthSystemService_query 	marburgHealthSystemService_isoNow 	marburgHealthSystemService_start 	marburgHealthSystemService_getHello 	marburgHealthSystemService_subscribeAndLoadOldEvents 	marburgHealthSystemService_apply 	marburgHealthSystemService_getPage 	marburgHealthSystemService_getDemoPage 	marburgHealthSystemService_publish 	marburgHealthSystemService_postApply
  model: 	c
  modified: 	false
  name: 	MarburgHealthSystemService
  propertyStyle: 	Bean
  roles: 	marburgHealthSystemService_businessLogic 	marburgHealthSystemService_builder

- name: 	org.fulib.classmodel.Clazz
  attributes: 	name_id 	name_symptoms 	name_counterSymptoms
  model: 	c
  modified: 	false
  name: 	Name
  propertyStyle: 	Bean

- c1: 	org.fulib.classmodel.CollectionType
  implClass: 	class java.util.ArrayList
  implTemplate: 	"java.util.ArrayList<%s>"
  itf: 	org.fulib.classmodel.CollectionInterface.List
  qualifiedImplName: 	java.util.ArrayList
  simpleImplName: 	ArrayList

- marburgHealthSystemModel_modelMap: 	org.fulib.classmodel.Attribute
  clazz: 	marburgHealthSystemModel
  id: 	MarburgHealthSystemModel_modelMap
  initialization: 	"new LinkedHashMap<>()"
  modified: 	false
  name: 	modelMap
  propertyStyle: 	Bean
  type: 	"LinkedHashMap<String, Object>"
  typeSignature: 	"LinkedHashMap<String,Object>"

- marburgHealthSystemModel_getOrCreateName: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	marburgHealthSystemModel
  declaration: 	"public Name getOrCreateName(String id)"
  id: 	MarburgHealthSystemModel_getOrCreateName
  methodBody: 	"if (id == null) return null;
return (Name) modelMap.computeIfAbsent(id, k -> new Name().setId(k));
"
  modified: 	false
  modifiers: 	public
  name: 	getOrCreateName
  paramsString: 	"String id"
  returnType: 	Name
  signature: 	"class/MarburgHealthSystemModel/method/getOrCreateName(String)"

- marburgHealthSystemBusinessLogic_model: 	org.fulib.classmodel.Attribute
  clazz: 	marburgHealthSystemBusinessLogic
  id: 	MarburgHealthSystemBusinessLogic_model
  modified: 	false
  name: 	model
  propertyStyle: 	Bean
  type: 	MarburgHealthSystemModel
  typeSignature: 	MarburgHealthSystemModel

- marburgHealthSystemBusinessLogic_handlerMap: 	org.fulib.classmodel.Attribute
  clazz: 	marburgHealthSystemBusinessLogic
  id: 	MarburgHealthSystemBusinessLogic_handlerMap
  modified: 	false
  name: 	handlerMap
  propertyStyle: 	Bean
  type: 	"LinkedHashMap<Class, Consumer<Event>>"
  typeSignature: 	"LinkedHashMap<Class,Consumer<Event>>"

- marburgHealthSystemBusinessLogic_handleLoadDiseasesCommand: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	marburgHealthSystemBusinessLogic
  declaration: 	"private void handleLoadDiseasesCommand(Event e)"
  id: 	MarburgHealthSystemBusinessLogic_handleLoadDiseasesCommand
  methodBody: 	"// to protect manuel changes to this method insert a 'no' in front of fulib in the next line
// fulib
LoadDiseasesCommand event = (LoadDiseasesCommand) e;
handleDemoLoadDiseasesCommand(event);
"
  modified: 	false
  modifiers: 	private
  name: 	handleLoadDiseasesCommand
  paramsString: 	"Event e"
  returnType: 	void
  signature: 	"class/MarburgHealthSystemBusinessLogic/method/handleLoadDiseasesCommand(Event)"

- marburgHealthSystemBusinessLogic_handleDemoLoadDiseasesCommand: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	marburgHealthSystemBusinessLogic
  declaration: 	"private void handleDemoLoadDiseasesCommand(LoadDiseasesCommand event)"
  id: 	MarburgHealthSystemBusinessLogic_handleDemoLoadDiseasesCommand
  methodBody: 	"if (event.getId().equals(\"12:00\")) {
   NameBuilt common coldEvent = new NameBuilt();
   common coldEvent.setId(\"Disease\");
   common coldEvent.setBlockId(\"common cold\");
   common coldEvent.setSymptoms(\"[cough, runny nose, hoarseness, fever]\");
   common coldEvent.setCounterSymptoms(\"[chills, joint pain]\");
   service.apply(common coldEvent);

   NameBuilt influenzaEvent = new NameBuilt();
   influenzaEvent.setId(\"Disease\");
   influenzaEvent.setBlockId(\"influenza\");
   influenzaEvent.setSymptoms(\"[cough, medium fever, chills, joint pain, headache]\");
   influenzaEvent.setCounterSymptoms(\"[lung noises]\");
   service.apply(influenzaEvent);

   NameBuilt pneumoniaEvent = new NameBuilt();
   pneumoniaEvent.setId(\"Disease\");
   pneumoniaEvent.setBlockId(\"pneumonia\");
   pneumoniaEvent.setSymptoms(\"[cough, medium fever, chills, joint pain, headache, lung noises]\");
   service.apply(pneumoniaEvent);

}
"
  modified: 	false
  modifiers: 	private
  name: 	handleDemoLoadDiseasesCommand
  paramsString: 	"LoadDiseasesCommand event"
  returnType: 	void
  signature: 	"class/MarburgHealthSystemBusinessLogic/method/handleDemoLoadDiseasesCommand(LoadDiseasesCommand)"

- marburgHealthSystemBusinessLogic_initEventHandlerMap: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	marburgHealthSystemBusinessLogic
  declaration: 	"public void initEventHandlerMap()"
  id: 	MarburgHealthSystemBusinessLogic_initEventHandlerMap
  methodBody: 	"if (handlerMap == null) {
   handlerMap = new LinkedHashMap<>();
   handlerMap.put(LoadDiseasesCommand.class, this::handleLoadDiseasesCommand);
   handlerMap.put(NameBuilt.class, builder::storeNameBuilt);
}
"
  modified: 	false
  modifiers: 	public
  name: 	initEventHandlerMap
  paramsString: 	""
  returnType: 	void
  signature: 	"class/MarburgHealthSystemBusinessLogic/method/initEventHandlerMap()"

- marburgHealthSystemBusinessLogic_ignoreEvent: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	marburgHealthSystemBusinessLogic
  declaration: 	"private void ignoreEvent(Event event)"
  id: 	MarburgHealthSystemBusinessLogic_ignoreEvent
  methodBody: 	"// empty
"
  modified: 	false
  modifiers: 	private
  name: 	ignoreEvent
  paramsString: 	"Event event"
  returnType: 	void
  signature: 	"class/MarburgHealthSystemBusinessLogic/method/ignoreEvent(Event)"

- marburgHealthSystemBusinessLogic_getHandler: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	marburgHealthSystemBusinessLogic
  declaration: 	"public Consumer<Event> getHandler(Event event)"
  id: 	MarburgHealthSystemBusinessLogic_getHandler
  methodBody: 	"return getHandlerMap().computeIfAbsent(event.getClass(), k -> this::ignoreEvent);
"
  modified: 	false
  modifiers: 	public
  name: 	getHandler
  paramsString: 	"Event event"
  returnType: 	"Consumer<Event>"
  signature: 	"class/MarburgHealthSystemBusinessLogic/method/getHandler(Event)"

- marburgHealthSystemBusinessLogic_builder: 	org.fulib.classmodel.AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	marburgHealthSystemBusinessLogic
  id: 	MarburgHealthSystemBusinessLogic_builder
  modified: 	false
  name: 	builder
  other: 	marburgHealthSystemBuilder_businessLogic
  propertyStyle: 	Bean

- marburgHealthSystemBusinessLogic_service: 	org.fulib.classmodel.AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	marburgHealthSystemBusinessLogic
  id: 	MarburgHealthSystemBusinessLogic_service
  modified: 	false
  name: 	service
  other: 	marburgHealthSystemService_businessLogic
  propertyStyle: 	Bean

- marburgHealthSystemBuilder_model: 	org.fulib.classmodel.Attribute
  clazz: 	marburgHealthSystemBuilder
  id: 	MarburgHealthSystemBuilder_model
  modified: 	false
  name: 	model
  propertyStyle: 	Bean
  type: 	MarburgHealthSystemModel
  typeSignature: 	MarburgHealthSystemModel

- marburgHealthSystemBuilder_eventStore: 	org.fulib.classmodel.Attribute
  clazz: 	marburgHealthSystemBuilder
  id: 	MarburgHealthSystemBuilder_eventStore
  initialization: 	"new LinkedHashMap<>()"
  modified: 	false
  name: 	eventStore
  propertyStyle: 	Bean
  type: 	"LinkedHashMap<String, DataEvent>"
  typeSignature: 	"LinkedHashMap<String,DataEvent>"

- marburgHealthSystemBuilder_loaderMap: 	org.fulib.classmodel.Attribute
  clazz: 	marburgHealthSystemBuilder
  id: 	MarburgHealthSystemBuilder_loaderMap
  modified: 	false
  name: 	loaderMap
  propertyStyle: 	Bean
  type: 	"LinkedHashMap<Class, Function<Event, Object>>"
  typeSignature: 	"LinkedHashMap<Class,Function<Event,Object>>"

- marburgHealthSystemBuilder_groupStore: 	org.fulib.classmodel.Attribute
  clazz: 	marburgHealthSystemBuilder
  id: 	MarburgHealthSystemBuilder_groupStore
  initialization: 	"new LinkedHashMap<>()"
  modified: 	false
  name: 	groupStore
  propertyStyle: 	Bean
  type: 	"LinkedHashMap<String, LinkedHashMap<String, DataEvent>>"
  typeSignature: 	"LinkedHashMap<String,LinkedHashMap<String,DataEvent>>"

- marburgHealthSystemBuilder_outdated: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	marburgHealthSystemBuilder
  declaration: 	"private boolean outdated(DataEvent event)"
  id: 	MarburgHealthSystemBuilder_outdated
  methodBody: 	"      DataEvent oldEvent = getEventStore().get(event.getBlockId());

      if (oldEvent == null) {
         eventStore.put(event.getBlockId(), event);
         return false;
      }

      if (oldEvent.getId().compareTo(event.getId()) < 0) {
         eventStore.put(event.getBlockId(), event);
         return false;
      }

      return true;"
  modified: 	false
  modifiers: 	private
  name: 	outdated
  paramsString: 	"DataEvent event"
  returnType: 	boolean
  signature: 	"class/MarburgHealthSystemBuilder/method/outdated(DataEvent)"

- marburgHealthSystemBuilder_storeNameBuilt: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	marburgHealthSystemBuilder
  declaration: 	"public void storeNameBuilt(Event e)"
  id: 	MarburgHealthSystemBuilder_storeNameBuilt
  methodBody: 	"NameBuilt event = (NameBuilt) e;
if (outdated(event)) {
   return;
}
// please insert a no before fulib in the next line and insert addToGroup commands as necessary
// fulib
"
  modified: 	false
  modifiers: 	public
  name: 	storeNameBuilt
  paramsString: 	"Event e"
  returnType: 	void
  signature: 	"class/MarburgHealthSystemBuilder/method/storeNameBuilt(Event)"

- marburgHealthSystemBuilder_loadNameBuilt: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	marburgHealthSystemBuilder
  declaration: 	"public Name loadNameBuilt(Event e)"
  id: 	MarburgHealthSystemBuilder_loadNameBuilt
  methodBody: 	"NameBuilt event = (NameBuilt) e;
Name object = model.getOrCreateName(event.getBlockId());
object.setSymptoms(event.getSymptoms());
object.setCounterSymptoms(event.getCounterSymptoms());
return object;
"
  modified: 	false
  modifiers: 	public
  name: 	loadNameBuilt
  paramsString: 	"Event e"
  returnType: 	Name
  signature: 	"class/MarburgHealthSystemBuilder/method/loadNameBuilt(Event)"

- marburgHealthSystemBuilder_load: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	marburgHealthSystemBuilder
  declaration: 	"public Object load(String blockId)"
  id: 	MarburgHealthSystemBuilder_load
  methodBody: 	"      DataEvent dataEvent = eventStore.get(blockId);
      if (dataEvent == null) {
         return null;
      }

      initLoaderMap();
      Function<Event, Object> loader = loaderMap.get(dataEvent.getClass());
      Object object = loader.apply(dataEvent);

      LinkedHashMap<String, DataEvent> group = groupStore.computeIfAbsent(blockId, k -> new LinkedHashMap<>());
      for (DataEvent element : group.values()) {
         loader = loaderMap.get(element.getClass());
         loader.apply(element);
      }

      return object;"
  modified: 	false
  modifiers: 	public
  name: 	load
  paramsString: 	"String blockId"
  returnType: 	Object
  signature: 	"class/MarburgHealthSystemBuilder/method/load(String)"

- marburgHealthSystemBuilder_initLoaderMap: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	marburgHealthSystemBuilder
  declaration: 	"private void initLoaderMap()"
  id: 	MarburgHealthSystemBuilder_initLoaderMap
  methodBody: 	"if (loaderMap == null) {
   loaderMap = new LinkedHashMap<>();
   loaderMap.put(NameBuilt.class, this::loadNameBuilt);
}
"
  modified: 	false
  modifiers: 	private
  name: 	initLoaderMap
  paramsString: 	""
  returnType: 	void
  signature: 	"class/MarburgHealthSystemBuilder/method/initLoaderMap()"

- marburgHealthSystemBuilder_addToGroup: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	marburgHealthSystemBuilder
  declaration: 	"private void addToGroup(String groupId, String elementId)"
  id: 	MarburgHealthSystemBuilder_addToGroup
  methodBody: 	"      DataEvent dataEvent = eventStore.get(elementId);

      if (dataEvent == null) {
         java.util.logging.Logger.getGlobal().severe(String.format(\"could not find element event %s for group %s \", elementId, groupId));
         return;
      }

      LinkedHashMap<String, DataEvent> group = groupStore.computeIfAbsent(groupId, k -> new LinkedHashMap<>());
      group.put(elementId, dataEvent);"
  modified: 	false
  modifiers: 	private
  name: 	addToGroup
  paramsString: 	"String groupId, String elementId"
  returnType: 	void
  signature: 	"class/MarburgHealthSystemBuilder/method/addToGroup(String,String)"

- marburgHealthSystemBuilder_stripBrackets: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	marburgHealthSystemBuilder
  declaration: 	"public String stripBrackets(String back)"
  id: 	MarburgHealthSystemBuilder_stripBrackets
  methodBody: 	"      if (back == null) {
         return \"\";
      }
      int open = back.indexOf('[');
      int close = back.indexOf(']');
      if (open >= 0 && close >= 0) {
         back = back.substring(open + 1, close);
      }
      return back;"
  modified: 	false
  modifiers: 	public
  name: 	stripBrackets
  paramsString: 	"String back"
  returnType: 	String
  signature: 	"class/MarburgHealthSystemBuilder/method/stripBrackets(String)"

- marburgHealthSystemBuilder_businessLogic: 	org.fulib.classmodel.AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	marburgHealthSystemBuilder
  id: 	MarburgHealthSystemBuilder_businessLogic
  modified: 	false
  name: 	businessLogic
  other: 	marburgHealthSystemBusinessLogic_builder
  propertyStyle: 	Bean

- marburgHealthSystemBuilder_service: 	org.fulib.classmodel.AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	marburgHealthSystemBuilder
  id: 	MarburgHealthSystemBuilder_service
  modified: 	false
  name: 	service
  other: 	marburgHealthSystemService_builder
  propertyStyle: 	Bean

- marburgHealthSystemService_history: 	org.fulib.classmodel.Attribute
  clazz: 	marburgHealthSystemService
  id: 	MarburgHealthSystemService_history
  initialization: 	"new LinkedHashMap<>()"
  modified: 	false
  name: 	history
  propertyStyle: 	Bean
  type: 	"LinkedHashMap<String, Event>"
  typeSignature: 	"LinkedHashMap<String,Event>"

- marburgHealthSystemService_port: 	org.fulib.classmodel.Attribute
  clazz: 	marburgHealthSystemService
  id: 	MarburgHealthSystemService_port
  initialization: 	42001
  modified: 	false
  name: 	port
  propertyStyle: 	Bean
  type: 	int
  typeSignature: 	int

- marburgHealthSystemService_spark: 	org.fulib.classmodel.Attribute
  clazz: 	marburgHealthSystemService
  id: 	MarburgHealthSystemService_spark
  modified: 	false
  name: 	spark
  propertyStyle: 	Bean
  type: 	Service
  typeSignature: 	Service

- marburgHealthSystemService_model: 	org.fulib.classmodel.Attribute
  clazz: 	marburgHealthSystemService
  id: 	MarburgHealthSystemService_model
  modified: 	false
  name: 	model
  propertyStyle: 	Bean
  type: 	MarburgHealthSystemModel
  typeSignature: 	MarburgHealthSystemModel

- marburgHealthSystemService_query: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	marburgHealthSystemService
  declaration: 	"public Query query(Query query)"
  id: 	MarburgHealthSystemService_query
  methodBody: 	"      DataEvent dataEvent = getBuilder().getEventStore().get(query.getKey());

      if (dataEvent == null) {
         return query;
      }

      if (dataEvent instanceof DataGroup) {
         DataGroup group = (DataGroup) dataEvent;
         query.withResults(group.getElements());
      }
      else {
         query.withResults(dataEvent);
      }

      return query;"
  modified: 	false
  modifiers: 	public
  name: 	query
  paramsString: 	"Query query"
  returnType: 	Query
  signature: 	"class/MarburgHealthSystemService/method/query(Query)"

- marburgHealthSystemService_isoNow: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	marburgHealthSystemService
  declaration: 	"public String isoNow()"
  id: 	MarburgHealthSystemService_isoNow
  methodBody: 	"return DateTimeFormatter.ISO_INSTANT.format(Instant.now());
"
  modified: 	false
  modifiers: 	public
  name: 	isoNow
  paramsString: 	""
  returnType: 	String
  signature: 	"class/MarburgHealthSystemService/method/isoNow()"

- marburgHealthSystemService_start: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	marburgHealthSystemService
  declaration: 	"public void start()"
  id: 	MarburgHealthSystemService_start
  methodBody: 	"model = new MarburgHealthSystemModel();
setBuilder(new MarburgHealthSystemBuilder().setModel(model));
setBusinessLogic(new MarburgHealthSystemBusinessLogic());
businessLogic.setBuilder(getBuilder());
businessLogic.setModel(model);
ExecutorService executor = Executors.newSingleThreadExecutor();
spark = Service.ignite();
spark.port(port);
spark.get(\"/page/:id\", (req, res) -> executor.submit(() -> this.getPage(req, res)).get());
spark.get(\"/\", (req, res) -> executor.submit(() -> this.getHello(req, res)).get());
spark.post(\"/apply\", (req, res) -> executor.submit(() -> this.postApply(req, res)).get());
executor.submit(this::subscribeAndLoadOldEvents);
Logger.getGlobal().info(\"MarburgHealthSystem service is up and running on port \" + port);
"
  modified: 	false
  modifiers: 	public
  name: 	start
  paramsString: 	""
  returnType: 	void
  signature: 	"class/MarburgHealthSystemService/method/start()"

- marburgHealthSystemService_getHello: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	marburgHealthSystemService
  declaration: 	"private String getHello(Request req, Response res)"
  id: 	MarburgHealthSystemService_getHello
  methodBody: 	"try {
   String events = Yaml.encodeSimple(getHistory().values().toArray());
   String objects = Yaml.encodeSimple(model.getModelMap().values().toArray());
   return \"<p id='MarburgHealthSystem'>This is the MarburgHealthSystem service. </p>\n\" +
         \"<pre id=\\"history\\">\" + events + \"</pre>\n\" +
         \"<pre id=\\"data\\">\" + objects + \"</pre>\n\" +
         \"\";
}
catch (Exception e) {
   Logger.getGlobal().log(Level.SEVERE, e.getMessage(), e);
   return \"MarburgHealthSystem Error \" + e.getMessage();
}
"
  modified: 	false
  modifiers: 	private
  name: 	getHello
  paramsString: 	"Request req, Response res"
  returnType: 	String
  signature: 	"class/MarburgHealthSystemService/method/getHello(Request,Response)"

- marburgHealthSystemService_subscribeAndLoadOldEvents: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	marburgHealthSystemService
  declaration: 	"private void subscribeAndLoadOldEvents()"
  id: 	MarburgHealthSystemService_subscribeAndLoadOldEvents
  methodBody: 	"ServiceSubscribed serviceSubscribed = new ServiceSubscribed()
      .setServiceUrl(String.format(\"http://localhost:%d/apply\", port));
String json = Yaml.encodeSimple(serviceSubscribed);
try {
   String url = \"http://localhost:42000/subscribe\";
   HttpResponse<String> response = Unirest
         .post(url)
         .body(json)
         .asString();
   String body = response.getBody();
   YamlIdMap idMap = new YamlIdMap(Event.class.getPackageName());
   idMap.decode(body);
   Map<String, Object> objectMap = idMap.getObjIdMap();
   for (Object obj : objectMap.values()) {
      apply((Event) obj);
   }
}
catch (UnirestException e) {
   e.printStackTrace();
}"
  modified: 	false
  modifiers: 	private
  name: 	subscribeAndLoadOldEvents
  paramsString: 	""
  returnType: 	void
  signature: 	"class/MarburgHealthSystemService/method/subscribeAndLoadOldEvents()"

- marburgHealthSystemService_apply: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	marburgHealthSystemService
  declaration: 	"public void apply(Event event)"
  id: 	MarburgHealthSystemService_apply
  methodBody: 	"if (history.get(event.getId()) != null) {
   return;
}
businessLogic.initEventHandlerMap();
Consumer<Event> handler = businessLogic.getHandler(event);
handler.accept(event);
history.put(event.getId(), event);
firePropertyChange(PROPERTY_HISTORY, null, event);
publish(event);"
  modified: 	false
  modifiers: 	public
  name: 	apply
  paramsString: 	"Event event"
  returnType: 	void
  signature: 	"class/MarburgHealthSystemService/method/apply(Event)"

- marburgHealthSystemService_getPage: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	marburgHealthSystemService
  declaration: 	"public String getPage(Request request, Response response)"
  id: 	MarburgHealthSystemService_getPage
  methodBody: 	"// to protect manuel changes to this method insert a 'no' in front of fulib in the next line
// fulib
return getDemoPage(request, response);
"
  modified: 	false
  modifiers: 	public
  name: 	getPage
  paramsString: 	"Request request, Response response"
  returnType: 	String
  signature: 	"class/MarburgHealthSystemService/method/getPage(Request,Response)"

- marburgHealthSystemService_getDemoPage: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	marburgHealthSystemService
  declaration: 	"public String getDemoPage(Request request, Response response)"
  id: 	MarburgHealthSystemService_getDemoPage
  methodBody: 	"StringBuilder html = new StringBuilder();
String id = request.params(\"id\");
String event = request.queryParams(\"event\");



html.append(\"This is the Shop Service page \" + id + \"\n\");
return html.toString();"
  modified: 	false
  modifiers: 	public
  name: 	getDemoPage
  paramsString: 	"Request request, Response response"
  returnType: 	String
  signature: 	"class/MarburgHealthSystemService/method/getDemoPage(Request,Response)"

- marburgHealthSystemService_publish: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	marburgHealthSystemService
  declaration: 	"public void publish(Event event)"
  id: 	MarburgHealthSystemService_publish
  methodBody: 	"String json = Yaml.encodeSimple(event);

try {
   HttpResponse<String> response = Unirest
         .post(\"http://localhost:42000/publish\")
         .body(json)
         .asString();
}
catch (UnirestException e) {
   e.printStackTrace();
}"
  modified: 	false
  modifiers: 	public
  name: 	publish
  paramsString: 	"Event event"
  returnType: 	void
  signature: 	"class/MarburgHealthSystemService/method/publish(Event)"

- marburgHealthSystemService_postApply: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	marburgHealthSystemService
  declaration: 	"private String postApply(Request req, Response res)"
  id: 	MarburgHealthSystemService_postApply
  methodBody: 	"      String body = req.body();
      try {
         YamlIdMap idMap = new YamlIdMap(Event.class.getPackageName());
         idMap.decode(body);
         Map<String, Object> map = idMap.getObjIdMap();
         for (Object value : map.values()) {
            Event event = (Event) value;
            apply(event);
         }
      }
      catch (Exception e) {
         String message = e.getMessage();
         if (message.contains(\"ReflectorMap could not find class description\")) {
            Logger.getGlobal().info(\"post apply ignores unknown event \" + body);
         }
         else {
            Logger.getGlobal().log(Level.SEVERE, \"postApply failed\", e);
         }
      }
      return \"apply done\";"
  modified: 	false
  modifiers: 	private
  name: 	postApply
  paramsString: 	"Request req, Response res"
  returnType: 	String
  signature: 	"class/MarburgHealthSystemService/method/postApply(Request,Response)"

- marburgHealthSystemService_businessLogic: 	org.fulib.classmodel.AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	marburgHealthSystemService
  id: 	MarburgHealthSystemService_businessLogic
  modified: 	false
  name: 	businessLogic
  other: 	marburgHealthSystemBusinessLogic_service
  propertyStyle: 	Bean

- marburgHealthSystemService_builder: 	org.fulib.classmodel.AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	marburgHealthSystemService
  id: 	MarburgHealthSystemService_builder
  modified: 	false
  name: 	builder
  other: 	marburgHealthSystemBuilder_service
  propertyStyle: 	Bean

- name_id: 	org.fulib.classmodel.Attribute
  clazz: 	name
  id: 	Name_id
  modified: 	false
  name: 	id
  propertyStyle: 	Bean
  type: 	String
  typeSignature: 	String

- name_symptoms: 	org.fulib.classmodel.Attribute
  clazz: 	name
  id: 	Name_symptoms
  modified: 	false
  name: 	symptoms
  propertyStyle: 	Bean
  type: 	String
  typeSignature: 	String

- name_counterSymptoms: 	org.fulib.classmodel.Attribute
  clazz: 	name
  id: 	Name_counterSymptoms
  modified: 	false
  name: 	counterSymptoms
  propertyStyle: 	Bean
  type: 	String
  typeSignature: 	String

