- c: 	org.fulib.classmodel.ClassModel
  classes: 	storageModel 	storageBusinessLogic 	storageBuilder 	storageService 	box 	pickTask
  defaultCollectionType: 	c1
  defaultPropertyStyle: 	Bean
  defaultRoleType: 	"java.util.ArrayList<%s>"
  mainJavaDir: 	"src/main/java"
  packageName: 	uks.fulibgen.shop.Storage
  packageSrcFolder: 	"src/main/java/uks/fulibgen/shop/Storage"

- storageModel: 	org.fulib.classmodel.Clazz
  attributes: 	storageModel_modelMap
  importList: 	"import java.util.LinkedHashMap;"
  imports: 	"import java.util.LinkedHashMap;"
  methods: 	storageModel_getOrCreateBox 	storageModel_getOrCreatePickTask
  model: 	c
  modified: 	false
  name: 	StorageModel
  propertyStyle: 	Bean

- storageBusinessLogic: 	org.fulib.classmodel.Clazz
  attributes: 	storageBusinessLogic_model 	storageBusinessLogic_handlerMap
  importList: 	"import java.util.LinkedHashMap;" 	"import java.util.function.Consumer;" 	"import uks.fulibgen.shop.events.*;"
  imports: 	"import java.util.LinkedHashMap;" 	"import java.util.function.Consumer;" 	"import uks.fulibgen.shop.events.*;"
  methods: 	storageBusinessLogic_handleStoreBoxCommand 	storageBusinessLogic_handleDemoStoreBoxCommand 	storageBusinessLogic_handleOrderRegisteredEvent 	storageBusinessLogic_handleDemoOrderRegisteredEvent 	storageBusinessLogic_handlePickOrderCommand 	storageBusinessLogic_handleDemoPickOrderCommand 	storageBusinessLogic_initEventHandlerMap 	storageBusinessLogic_ignoreEvent 	storageBusinessLogic_getHandler
  model: 	c
  modified: 	false
  name: 	StorageBusinessLogic
  propertyStyle: 	Bean
  roles: 	storageBusinessLogic_builder 	storageBusinessLogic_service

- storageBuilder: 	org.fulib.classmodel.Clazz
  attributes: 	storageBuilder_model
  importList: 	"import java.util.LinkedHashMap;" 	"import java.util.function.Consumer;" 	"import uks.fulibgen.shop.events.*;"
  imports: 	"import java.util.LinkedHashMap;" 	"import java.util.function.Consumer;" 	"import uks.fulibgen.shop.events.*;"
  methods: 	storageBuilder_handleBoxBuilt 	storageBuilder_handlePickTaskBuilt 	storageBuilder_stripBrackets
  model: 	c
  modified: 	false
  name: 	StorageBuilder
  propertyStyle: 	Bean
  roles: 	storageBuilder_businessLogic

- storageService: 	org.fulib.classmodel.Clazz
  attributes: 	storageService_history 	storageService_port 	storageService_spark 	storageService_model
  importList: 	"import java.util.LinkedHashMap;" 	"import java.util.Map;" 	"import java.util.function.Consumer;" 	"import uks.fulibgen.shop.events.*;" 	"import org.fulib.yaml.Yaml;" 	"import spark.Service;" 	"import spark.Request;" 	"import spark.Response;" 	"import com.mashape.unirest.http.HttpResponse;" 	"import com.mashape.unirest.http.Unirest;" 	"import com.mashape.unirest.http.exceptions.UnirestException;" 	"import java.util.concurrent.ExecutorService;" 	"import java.util.concurrent.Executors;" 	"import java.util.logging.Logger;" 	"import java.util.logging.Level;"
  imports: 	"import java.util.LinkedHashMap;" 	"import java.util.Map;" 	"import java.util.function.Consumer;" 	"import uks.fulibgen.shop.events.*;" 	"import org.fulib.yaml.Yaml;" 	"import spark.Service;" 	"import spark.Request;" 	"import spark.Response;" 	"import com.mashape.unirest.http.HttpResponse;" 	"import com.mashape.unirest.http.Unirest;" 	"import com.mashape.unirest.http.exceptions.UnirestException;" 	"import java.util.concurrent.ExecutorService;" 	"import java.util.concurrent.Executors;" 	"import java.util.logging.Logger;" 	"import java.util.logging.Level;"
  methods: 	storageService_start 	storageService_getHello 	storageService_subscribeAndLoadOldEvents 	storageService_apply 	storageService_getPage 	storageService_getDemoPage 	storageService_publish 	storageService_postApply
  model: 	c
  modified: 	false
  name: 	StorageService
  propertyStyle: 	Bean
  roles: 	storageService_businessLogic

- box: 	org.fulib.classmodel.Clazz
  attributes: 	box_id 	box_product 	box_place
  model: 	c
  modified: 	false
  name: 	Box
  propertyStyle: 	Bean

- pickTask: 	org.fulib.classmodel.Clazz
  attributes: 	pickTask_id 	pickTask_order 	pickTask_product 	pickTask_customer 	pickTask_address 	pickTask_state 	pickTask_box
  model: 	c
  modified: 	false
  name: 	PickTask
  propertyStyle: 	Bean

- c1: 	org.fulib.classmodel.CollectionType
  implClass: 	class java.util.ArrayList
  implTemplate: 	"java.util.ArrayList<%s>"
  itf: 	org.fulib.classmodel.CollectionInterface.List
  qualifiedImplName: 	java.util.ArrayList
  simpleImplName: 	ArrayList

- storageModel_modelMap: 	org.fulib.classmodel.Attribute
  clazz: 	storageModel
  id: 	StorageModel_modelMap
  initialization: 	"new LinkedHashMap<>()"
  modified: 	false
  name: 	modelMap
  propertyStyle: 	Bean
  type: 	"LinkedHashMap<String, Object>"
  typeSignature: 	"LinkedHashMap<String,Object>"

- storageModel_getOrCreateBox: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	storageModel
  declaration: 	"public Box getOrCreateBox(String id)"
  id: 	StorageModel_getOrCreateBox
  methodBody: 	"if (id == null) return null;
return (Box) modelMap.computeIfAbsent(id, k -> new Box().setId(k));
"
  modified: 	false
  modifiers: 	public
  name: 	getOrCreateBox
  paramsString: 	"String id"
  returnType: 	Box
  signature: 	"class/StorageModel/method/getOrCreateBox(String)"

- storageModel_getOrCreatePickTask: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	storageModel
  declaration: 	"public PickTask getOrCreatePickTask(String id)"
  id: 	StorageModel_getOrCreatePickTask
  methodBody: 	"if (id == null) return null;
return (PickTask) modelMap.computeIfAbsent(id, k -> new PickTask().setId(k));
"
  modified: 	false
  modifiers: 	public
  name: 	getOrCreatePickTask
  paramsString: 	"String id"
  returnType: 	PickTask
  signature: 	"class/StorageModel/method/getOrCreatePickTask(String)"

- storageBusinessLogic_model: 	org.fulib.classmodel.Attribute
  clazz: 	storageBusinessLogic
  id: 	StorageBusinessLogic_model
  modified: 	false
  name: 	model
  propertyStyle: 	Bean
  type: 	StorageModel
  typeSignature: 	StorageModel

- storageBusinessLogic_handlerMap: 	org.fulib.classmodel.Attribute
  clazz: 	storageBusinessLogic
  id: 	StorageBusinessLogic_handlerMap
  modified: 	false
  name: 	handlerMap
  propertyStyle: 	Bean
  type: 	"LinkedHashMap<Class, Consumer<Event>>"
  typeSignature: 	"LinkedHashMap<Class,Consumer<Event>>"

- storageBusinessLogic_handleStoreBoxCommand: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	storageBusinessLogic
  declaration: 	"private void handleStoreBoxCommand(Event e)"
  id: 	StorageBusinessLogic_handleStoreBoxCommand
  methodBody: 	"// to protect manuel changes to this method insert a 'no' in front of fulib in the next line
// fulib
StoreBoxCommand event = (StoreBoxCommand) e;
handleDemoStoreBoxCommand(event);
"
  modified: 	false
  modifiers: 	private
  name: 	handleStoreBoxCommand
  paramsString: 	"Event e"
  returnType: 	void
  signature: 	"class/StorageBusinessLogic/method/handleStoreBoxCommand(Event)"

- storageBusinessLogic_handleDemoStoreBoxCommand: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	storageBusinessLogic
  declaration: 	"private void handleDemoStoreBoxCommand(StoreBoxCommand event)"
  id: 	StorageBusinessLogic_handleDemoStoreBoxCommand
  methodBody: 	"if (event.getId().equals(\"12:00\")) {
   BoxBuilt box23Event = new BoxBuilt();
   box23Event.setId(\"12:01\");
   box23Event.setBlockId(\"box23\");
   box23Event.setProduct(\"shoes\");
   box23Event.setPlace(\"shelf23\");
   service.apply(box23Event);


   ProductStoredEvent e1202 = new ProductStoredEvent();

   e1202.setId(\"12:02\");
   e1202.setBox(\"box23\");
   e1202.setProduct(\"shoes\");
   e1202.setPlace(\"shelf23\");
   service.apply(e1202);
}
"
  modified: 	false
  modifiers: 	private
  name: 	handleDemoStoreBoxCommand
  paramsString: 	"StoreBoxCommand event"
  returnType: 	void
  signature: 	"class/StorageBusinessLogic/method/handleDemoStoreBoxCommand(StoreBoxCommand)"

- storageBusinessLogic_handleOrderRegisteredEvent: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	storageBusinessLogic
  declaration: 	"private void handleOrderRegisteredEvent(Event e)"
  id: 	StorageBusinessLogic_handleOrderRegisteredEvent
  methodBody: 	"// to protect manuel changes to this method insert a 'no' in front of fulib in the next line
// fulib
OrderRegisteredEvent event = (OrderRegisteredEvent) e;
handleDemoOrderRegisteredEvent(event);
"
  modified: 	false
  modifiers: 	private
  name: 	handleOrderRegisteredEvent
  paramsString: 	"Event e"
  returnType: 	void
  signature: 	"class/StorageBusinessLogic/method/handleOrderRegisteredEvent(Event)"

- storageBusinessLogic_handleDemoOrderRegisteredEvent: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	storageBusinessLogic
  declaration: 	"private void handleDemoOrderRegisteredEvent(OrderRegisteredEvent event)"
  id: 	StorageBusinessLogic_handleDemoOrderRegisteredEvent
  methodBody: 	"if (event.getId().equals(\"13:04\")) {
   PickTaskBuilt pick1300Event = new PickTaskBuilt();
   pick1300Event.setId(\"13:05\");
   pick1300Event.setBlockId(\"pick1300\");
   pick1300Event.setOrder(\"order1300\");
   pick1300Event.setProduct(\"shoes\");
   pick1300Event.setCustomer(\"Alice\");
   pick1300Event.setAddress(\"Wonderland 1\");
   pick1300Event.setState(\"todo\");
   service.apply(pick1300Event);


   OrderApprovedEvent e1306 = new OrderApprovedEvent();

   e1306.setId(\"13:06\");
   e1306.setOrder(\"order1300\");
   service.apply(e1306);
}
if (event.getId().equals(\"13:14\")) {

   OrderDeclinedEvent e1315 = new OrderDeclinedEvent();

   e1315.setId(\"13:15\");
   e1315.setOrder(\"order1310\");
   service.apply(e1315);
}
"
  modified: 	false
  modifiers: 	private
  name: 	handleDemoOrderRegisteredEvent
  paramsString: 	"OrderRegisteredEvent event"
  returnType: 	void
  signature: 	"class/StorageBusinessLogic/method/handleDemoOrderRegisteredEvent(OrderRegisteredEvent)"

- storageBusinessLogic_handlePickOrderCommand: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	storageBusinessLogic
  declaration: 	"private void handlePickOrderCommand(Event e)"
  id: 	StorageBusinessLogic_handlePickOrderCommand
  methodBody: 	"// to protect manuel changes to this method insert a 'no' in front of fulib in the next line
// fulib
PickOrderCommand event = (PickOrderCommand) e;
handleDemoPickOrderCommand(event);
"
  modified: 	false
  modifiers: 	private
  name: 	handlePickOrderCommand
  paramsString: 	"Event e"
  returnType: 	void
  signature: 	"class/StorageBusinessLogic/method/handlePickOrderCommand(Event)"

- storageBusinessLogic_handleDemoPickOrderCommand: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	storageBusinessLogic
  declaration: 	"private void handleDemoPickOrderCommand(PickOrderCommand event)"
  id: 	StorageBusinessLogic_handleDemoPickOrderCommand
  methodBody: 	"if (event.getId().equals(\"14:00\")) {
   PickTaskBuilt pick1300Event = new PickTaskBuilt();
   pick1300Event.setId(\"14:01\");
   pick1300Event.setBlockId(\"pick1300\");
   pick1300Event.setState(\"done\");
   pick1300Event.setBox(\"box23\");
   service.apply(pick1300Event);

   BoxBuilt box23Event = new BoxBuilt();
   box23Event.setId(\"14:02\");
   box23Event.setBlockId(\"box23\");
   box23Event.setPlace(\"shipping\");
   service.apply(box23Event);


   OrderPickedEvent e1403 = new OrderPickedEvent();

   e1403.setId(\"14:03\");
   e1403.setPickTask(\"pick1300\");
   e1403.setBox(\"box23\");
   e1403.setUser(\"Bob\");
   service.apply(e1403);
}
"
  modified: 	false
  modifiers: 	private
  name: 	handleDemoPickOrderCommand
  paramsString: 	"PickOrderCommand event"
  returnType: 	void
  signature: 	"class/StorageBusinessLogic/method/handleDemoPickOrderCommand(PickOrderCommand)"

- storageBusinessLogic_initEventHandlerMap: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	storageBusinessLogic
  declaration: 	"public void initEventHandlerMap()"
  id: 	StorageBusinessLogic_initEventHandlerMap
  methodBody: 	"if (handlerMap == null) {
   handlerMap = new LinkedHashMap<>();
   handlerMap.put(StoreBoxCommand.class, this::handleStoreBoxCommand);
   handlerMap.put(OrderRegisteredEvent.class, this::handleOrderRegisteredEvent);
   handlerMap.put(PickOrderCommand.class, this::handlePickOrderCommand);
   handlerMap.put(BoxBuilt.class, builder::handleBoxBuilt);
   handlerMap.put(PickTaskBuilt.class, builder::handlePickTaskBuilt);
}
"
  modified: 	false
  modifiers: 	public
  name: 	initEventHandlerMap
  paramsString: 	""
  returnType: 	void
  signature: 	"class/StorageBusinessLogic/method/initEventHandlerMap()"

- storageBusinessLogic_ignoreEvent: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	storageBusinessLogic
  declaration: 	"private void ignoreEvent(Event event)"
  id: 	StorageBusinessLogic_ignoreEvent
  methodBody: 	"// empty
"
  modified: 	false
  modifiers: 	private
  name: 	ignoreEvent
  paramsString: 	"Event event"
  returnType: 	void
  signature: 	"class/StorageBusinessLogic/method/ignoreEvent(Event)"

- storageBusinessLogic_getHandler: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	storageBusinessLogic
  declaration: 	"public Consumer<Event> getHandler(Event event)"
  id: 	StorageBusinessLogic_getHandler
  methodBody: 	"return getHandlerMap().computeIfAbsent(event.getClass(), k -> this::ignoreEvent);
"
  modified: 	false
  modifiers: 	public
  name: 	getHandler
  paramsString: 	"Event event"
  returnType: 	"Consumer<Event>"
  signature: 	"class/StorageBusinessLogic/method/getHandler(Event)"

- storageBusinessLogic_builder: 	org.fulib.classmodel.AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	storageBusinessLogic
  id: 	StorageBusinessLogic_builder
  modified: 	false
  name: 	builder
  other: 	storageBuilder_businessLogic
  propertyStyle: 	Bean

- storageBusinessLogic_service: 	org.fulib.classmodel.AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	storageBusinessLogic
  id: 	StorageBusinessLogic_service
  modified: 	false
  name: 	service
  other: 	storageService_businessLogic
  propertyStyle: 	Bean

- storageBuilder_model: 	org.fulib.classmodel.Attribute
  clazz: 	storageBuilder
  id: 	StorageBuilder_model
  modified: 	false
  name: 	model
  propertyStyle: 	Bean
  type: 	StorageModel
  typeSignature: 	StorageModel

- storageBuilder_handleBoxBuilt: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	storageBuilder
  declaration: 	"public void handleBoxBuilt(Event e)"
  id: 	StorageBuilder_handleBoxBuilt
  methodBody: 	"BoxBuilt event = (BoxBuilt) e;
Box object = model.getOrCreateBox(event.getBlockId());
object.setProduct(event.getProduct());
object.setPlace(event.getPlace());
"
  modified: 	false
  modifiers: 	public
  name: 	handleBoxBuilt
  paramsString: 	"Event e"
  returnType: 	void
  signature: 	"class/StorageBuilder/method/handleBoxBuilt(Event)"

- storageBuilder_handlePickTaskBuilt: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	storageBuilder
  declaration: 	"public void handlePickTaskBuilt(Event e)"
  id: 	StorageBuilder_handlePickTaskBuilt
  methodBody: 	"PickTaskBuilt event = (PickTaskBuilt) e;
PickTask object = model.getOrCreatePickTask(event.getBlockId());
object.setOrder(event.getOrder());
object.setProduct(event.getProduct());
object.setCustomer(event.getCustomer());
object.setAddress(event.getAddress());
object.setState(event.getState());
object.setBox(event.getBox());
"
  modified: 	false
  modifiers: 	public
  name: 	handlePickTaskBuilt
  paramsString: 	"Event e"
  returnType: 	void
  signature: 	"class/StorageBuilder/method/handlePickTaskBuilt(Event)"

- storageBuilder_stripBrackets: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	storageBuilder
  declaration: 	"public String stripBrackets(String back)"
  id: 	StorageBuilder_stripBrackets
  methodBody: 	"      if (back == null) {
         return \"\";
      }
      int open = back.indexOf('[');
      int close = back.indexOf(']');
      if (open >= 0 && close >= 0) {
         back = back.substring(open + 1, close);
      }
      return back;"
  modified: 	false
  modifiers: 	public
  name: 	stripBrackets
  paramsString: 	"String back"
  returnType: 	String
  signature: 	"class/StorageBuilder/method/stripBrackets(String)"

- storageBuilder_businessLogic: 	org.fulib.classmodel.AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	storageBuilder
  id: 	StorageBuilder_businessLogic
  modified: 	false
  name: 	businessLogic
  other: 	storageBusinessLogic_builder
  propertyStyle: 	Bean

- storageService_history: 	org.fulib.classmodel.Attribute
  clazz: 	storageService
  id: 	StorageService_history
  initialization: 	"new LinkedHashMap<>()"
  modified: 	false
  name: 	history
  propertyStyle: 	Bean
  type: 	"LinkedHashMap<String, Event>"
  typeSignature: 	"LinkedHashMap<String,Event>"

- storageService_port: 	org.fulib.classmodel.Attribute
  clazz: 	storageService
  id: 	StorageService_port
  initialization: 	42002
  modified: 	false
  name: 	port
  propertyStyle: 	Bean
  type: 	int
  typeSignature: 	int

- storageService_spark: 	org.fulib.classmodel.Attribute
  clazz: 	storageService
  id: 	StorageService_spark
  modified: 	false
  name: 	spark
  propertyStyle: 	Bean
  type: 	Service
  typeSignature: 	Service

- storageService_model: 	org.fulib.classmodel.Attribute
  clazz: 	storageService
  id: 	StorageService_model
  modified: 	false
  name: 	model
  propertyStyle: 	Bean
  type: 	StorageModel
  typeSignature: 	StorageModel

- storageService_start: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	storageService
  declaration: 	"public void start()"
  id: 	StorageService_start
  methodBody: 	"model = new StorageModel();
setBusinessLogic(new StorageBusinessLogic());
businessLogic.setBuilder(new StorageBuilder().setModel(model));
businessLogic.setModel(model);
ExecutorService executor = Executors.newSingleThreadExecutor();
spark = Service.ignite();
spark.port(port);
spark.get(\"/page/:id\", (req, res) -> executor.submit(() -> this.getPage(req, res)).get());
spark.get(\"/\", (req, res) -> executor.submit(() -> this.getHello(req, res)).get());
spark.post(\"/apply\", (req, res) -> executor.submit(() -> this.postApply(req, res)).get());
executor.submit(this::subscribeAndLoadOldEvents);
Logger.getGlobal().info(\"Storage service is up and running on port \" + port);
"
  modified: 	false
  modifiers: 	public
  name: 	start
  paramsString: 	""
  returnType: 	void
  signature: 	"class/StorageService/method/start()"

- storageService_getHello: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	storageService
  declaration: 	"private String getHello(Request req, Response res)"
  id: 	StorageService_getHello
  methodBody: 	"try {
   String events = Yaml.encode(getHistory().values().toArray());
   String objects = Yaml.encode(model.getModelMap().values().toArray());
   return \"<p id='Storage'>This is the Storage service. </p>\n\" +
         \"<pre id=\\"history\\">\" + events + \"</pre>\n\" +
         \"<pre id=\\"data\\">\" + objects + \"</pre>\n\" +
         \"\";
}
catch (Exception e) {
   Logger.getGlobal().log(Level.SEVERE, e.getMessage(), e);
   return \"Storage Error \" + e.getMessage();
}
"
  modified: 	false
  modifiers: 	private
  name: 	getHello
  paramsString: 	"Request req, Response res"
  returnType: 	String
  signature: 	"class/StorageService/method/getHello(Request,Response)"

- storageService_subscribeAndLoadOldEvents: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	storageService
  declaration: 	"private void subscribeAndLoadOldEvents()"
  id: 	StorageService_subscribeAndLoadOldEvents
  methodBody: 	"ServiceSubscribed serviceSubscribed = new ServiceSubscribed()
      .setServiceUrl(\"http://localhost:42002/apply\");
String json = Yaml.encode(serviceSubscribed);
try {
   String url = \"http://localhost:42000/subscribe\";
   HttpResponse<String> response = Unirest
         .post(url)
         .body(json)
         .asString();
   String body = response.getBody();
   Map<String, Object> objectMap = Yaml.decode(body);
   for (Object obj : objectMap.values()) {
      apply((Event) obj);
   }
}
catch (UnirestException e) {
   e.printStackTrace();
}"
  modified: 	false
  modifiers: 	private
  name: 	subscribeAndLoadOldEvents
  paramsString: 	""
  returnType: 	void
  signature: 	"class/StorageService/method/subscribeAndLoadOldEvents()"

- storageService_apply: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	storageService
  declaration: 	"public void apply(Event event)"
  id: 	StorageService_apply
  methodBody: 	"if (history.get(event.getId()) != null) {
   return;
}
businessLogic.initEventHandlerMap();
Consumer<Event> handler = businessLogic.getHandler(event);
handler.accept(event);
history.put(event.getId(), event);
publish(event);"
  modified: 	false
  modifiers: 	public
  name: 	apply
  paramsString: 	"Event event"
  returnType: 	void
  signature: 	"class/StorageService/method/apply(Event)"

- storageService_getPage: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	storageService
  declaration: 	"public String getPage(Request request, Response response)"
  id: 	StorageService_getPage
  methodBody: 	"// to protect manuel changes to this method insert a 'no' in front of fulib in the next line
// fulib
return getDemoPage(request, response);
"
  modified: 	false
  modifiers: 	public
  name: 	getPage
  paramsString: 	"Request request, Response response"
  returnType: 	String
  signature: 	"class/StorageService/method/getPage(Request,Response)"

- storageService_getDemoPage: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	storageService
  declaration: 	"public String getDemoPage(Request request, Response response)"
  id: 	StorageService_getDemoPage
  methodBody: 	"StringBuilder html = new StringBuilder();
String id = request.params(\"id\");
String event = request.queryParams(\"event\");



html.append(\"This is the Shop Service page \" + id + \"\n\");
return html.toString();"
  modified: 	false
  modifiers: 	public
  name: 	getDemoPage
  paramsString: 	"Request request, Response response"
  returnType: 	String
  signature: 	"class/StorageService/method/getDemoPage(Request,Response)"

- storageService_publish: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	storageService
  declaration: 	"public void publish(Event event)"
  id: 	StorageService_publish
  methodBody: 	"String json = Yaml.encode(event);

try {
   HttpResponse<String> response = Unirest
         .post(\"http://localhost:42000/publish\")
         .body(json)
         .asString();
}
catch (UnirestException e) {
   e.printStackTrace();
}"
  modified: 	false
  modifiers: 	public
  name: 	publish
  paramsString: 	"Event event"
  returnType: 	void
  signature: 	"class/StorageService/method/publish(Event)"

- storageService_postApply: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	storageService
  declaration: 	"private String postApply(Request req, Response res)"
  id: 	StorageService_postApply
  methodBody: 	"      try {
         String body = req.body();
         Map<String, Object> map = Yaml.decode(body);
         for (Object value : map.values()) {
            Event event = (Event) value;
            apply(event);
         }
      }
      catch (Exception e) {
         Logger.getGlobal().log(Level.SEVERE, \"postApply failed\", e);
      }
      return \"apply done\";"
  modified: 	false
  modifiers: 	private
  name: 	postApply
  paramsString: 	"Request req, Response res"
  returnType: 	String
  signature: 	"class/StorageService/method/postApply(Request,Response)"

- storageService_businessLogic: 	org.fulib.classmodel.AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	storageService
  id: 	StorageService_businessLogic
  modified: 	false
  name: 	businessLogic
  other: 	storageBusinessLogic_service
  propertyStyle: 	Bean

- box_id: 	org.fulib.classmodel.Attribute
  clazz: 	box
  id: 	Box_id
  modified: 	false
  name: 	id
  propertyStyle: 	Bean
  type: 	String
  typeSignature: 	String

- box_product: 	org.fulib.classmodel.Attribute
  clazz: 	box
  id: 	Box_product
  modified: 	false
  name: 	product
  propertyStyle: 	Bean
  type: 	String
  typeSignature: 	String

- box_place: 	org.fulib.classmodel.Attribute
  clazz: 	box
  id: 	Box_place
  modified: 	false
  name: 	place
  propertyStyle: 	Bean
  type: 	String
  typeSignature: 	String

- pickTask_id: 	org.fulib.classmodel.Attribute
  clazz: 	pickTask
  id: 	PickTask_id
  modified: 	false
  name: 	id
  propertyStyle: 	Bean
  type: 	String
  typeSignature: 	String

- pickTask_order: 	org.fulib.classmodel.Attribute
  clazz: 	pickTask
  id: 	PickTask_order
  modified: 	false
  name: 	order
  propertyStyle: 	Bean
  type: 	String
  typeSignature: 	String

- pickTask_product: 	org.fulib.classmodel.Attribute
  clazz: 	pickTask
  id: 	PickTask_product
  modified: 	false
  name: 	product
  propertyStyle: 	Bean
  type: 	String
  typeSignature: 	String

- pickTask_customer: 	org.fulib.classmodel.Attribute
  clazz: 	pickTask
  id: 	PickTask_customer
  modified: 	false
  name: 	customer
  propertyStyle: 	Bean
  type: 	String
  typeSignature: 	String

- pickTask_address: 	org.fulib.classmodel.Attribute
  clazz: 	pickTask
  id: 	PickTask_address
  modified: 	false
  name: 	address
  propertyStyle: 	Bean
  type: 	String
  typeSignature: 	String

- pickTask_state: 	org.fulib.classmodel.Attribute
  clazz: 	pickTask
  id: 	PickTask_state
  modified: 	false
  name: 	state
  propertyStyle: 	Bean
  type: 	String
  typeSignature: 	String

- pickTask_box: 	org.fulib.classmodel.Attribute
  clazz: 	pickTask
  id: 	PickTask_box
  modified: 	false
  name: 	box
  propertyStyle: 	Bean
  type: 	String
  typeSignature: 	String

