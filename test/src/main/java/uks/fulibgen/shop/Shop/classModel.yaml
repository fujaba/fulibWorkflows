- c: 	org.fulib.classmodel.ClassModel
  classes: 	shopModel 	shopBusinessLogic 	shopBuilder 	shopService 	order 	customer
  defaultCollectionType: 	c1
  defaultPropertyStyle: 	Bean
  defaultRoleType: 	"java.util.ArrayList<%s>"
  mainJavaDir: 	"src/main/java"
  packageName: 	uks.fulibgen.shop.Shop
  packageSrcFolder: 	"src/main/java/uks/fulibgen/shop/Shop"

- shopModel: 	org.fulib.classmodel.Clazz
  attributes: 	shopModel_modelMap
  importList: 	"import java.util.LinkedHashMap;"
  imports: 	"import java.util.LinkedHashMap;"
  methods: 	shopModel_getOrCreateOrder 	shopModel_getOrCreateCustomer
  model: 	c
  modified: 	false
  name: 	ShopModel
  propertyStyle: 	Bean

- shopBusinessLogic: 	org.fulib.classmodel.Clazz
  attributes: 	shopBusinessLogic_model 	shopBusinessLogic_handlerMap
  importList: 	"import java.util.LinkedHashMap;" 	"import java.util.function.Consumer;" 	"import uks.fulibgen.shop.events.*;"
  imports: 	"import java.util.LinkedHashMap;" 	"import java.util.function.Consumer;" 	"import uks.fulibgen.shop.events.*;"
  methods: 	shopBusinessLogic_handleSubmitOrderCommand 	shopBusinessLogic_handleDemoSubmitOrderCommand 	shopBusinessLogic_handleOrderApprovedEvent 	shopBusinessLogic_handleDemoOrderApprovedEvent 	shopBusinessLogic_handleOrderPickedEvent 	shopBusinessLogic_handleDemoOrderPickedEvent 	shopBusinessLogic_handleOrderDeclinedEvent 	shopBusinessLogic_handleDemoOrderDeclinedEvent 	shopBusinessLogic_initEventHandlerMap 	shopBusinessLogic_ignoreEvent 	shopBusinessLogic_getHandler
  model: 	c
  modified: 	false
  name: 	ShopBusinessLogic
  propertyStyle: 	Bean
  roles: 	shopBusinessLogic_builder 	shopBusinessLogic_service

- shopBuilder: 	org.fulib.classmodel.Clazz
  attributes: 	shopBuilder_model 	shopBuilder_eventStore 	shopBuilder_loaderMap 	shopBuilder_groupStore
  importList: 	"import java.util.LinkedHashMap;" 	"import java.util.function.Consumer;" 	"import uks.fulibgen.shop.events.*;" 	"import java.util.function.Function;"
  imports: 	"import java.util.LinkedHashMap;" 	"import java.util.function.Consumer;" 	"import uks.fulibgen.shop.events.*;" 	"import java.util.function.Function;"
  methods: 	shopBuilder_outdated 	shopBuilder_storeOrderBuilt 	shopBuilder_loadOrderBuilt 	shopBuilder_storeCustomerBuilt 	shopBuilder_loadCustomerBuilt 	shopBuilder_load 	shopBuilder_initLoaderMap 	shopBuilder_getVarName 	shopBuilder_addToGroup 	shopBuilder_stripBrackets
  model: 	c
  modified: 	false
  name: 	ShopBuilder
  propertyStyle: 	Bean
  roles: 	shopBuilder_businessLogic 	shopBuilder_service

- shopService: 	org.fulib.classmodel.Clazz
  attributes: 	shopService_history 	shopService_port 	shopService_spark 	shopService_model
  importList: 	"import java.util.LinkedHashMap;" 	"import java.time.Instant;" 	"import java.time.format.DateTimeFormatter;" 	"import java.util.Map;" 	"import java.util.function.Consumer;" 	"import uks.fulibgen.shop.events.*;" 	"import org.fulib.yaml.Yaml;" 	"import org.fulib.yaml.YamlIdMap;" 	"import spark.Service;" 	"import spark.Request;" 	"import spark.Response;" 	"import com.mashape.unirest.http.HttpResponse;" 	"import com.mashape.unirest.http.Unirest;" 	"import com.mashape.unirest.http.exceptions.UnirestException;" 	"import java.util.concurrent.ExecutorService;" 	"import java.util.concurrent.Executors;" 	"import java.util.logging.Logger;" 	"import java.util.logging.Level;"
  imports: 	"import java.util.LinkedHashMap;" 	"import java.time.Instant;" 	"import java.time.format.DateTimeFormatter;" 	"import java.util.Map;" 	"import java.util.function.Consumer;" 	"import uks.fulibgen.shop.events.*;" 	"import org.fulib.yaml.Yaml;" 	"import org.fulib.yaml.YamlIdMap;" 	"import spark.Service;" 	"import spark.Request;" 	"import spark.Response;" 	"import com.mashape.unirest.http.HttpResponse;" 	"import com.mashape.unirest.http.Unirest;" 	"import com.mashape.unirest.http.exceptions.UnirestException;" 	"import java.util.concurrent.ExecutorService;" 	"import java.util.concurrent.Executors;" 	"import java.util.logging.Logger;" 	"import java.util.logging.Level;"
  methods: 	shopService_query 	shopService_isoNow 	shopService_start 	shopService_getHello 	shopService_subscribeAndLoadOldEvents 	shopService_apply 	shopService_getPage 	shopService_getDemoPage 	shopService_publish 	shopService_postApply
  model: 	c
  modified: 	false
  name: 	ShopService
  propertyStyle: 	Bean
  roles: 	shopService_businessLogic 	shopService_builder

- order: 	org.fulib.classmodel.Clazz
  attributes: 	order_id 	order_product 	order_customer 	order_address 	order_state
  model: 	c
  modified: 	false
  name: 	Order
  propertyStyle: 	Bean

- customer: 	org.fulib.classmodel.Clazz
  attributes: 	customer_id 	customer_orders
  model: 	c
  modified: 	false
  name: 	Customer
  propertyStyle: 	Bean

- c1: 	org.fulib.classmodel.CollectionType
  implClass: 	class java.util.ArrayList
  implTemplate: 	"java.util.ArrayList<%s>"
  itf: 	org.fulib.classmodel.CollectionInterface.List
  qualifiedImplName: 	java.util.ArrayList
  simpleImplName: 	ArrayList

- shopModel_modelMap: 	org.fulib.classmodel.Attribute
  clazz: 	shopModel
  id: 	ShopModel_modelMap
  initialization: 	"new LinkedHashMap<>()"
  modified: 	false
  name: 	modelMap
  propertyStyle: 	Bean
  type: 	"LinkedHashMap<String, Object>"
  typeSignature: 	"LinkedHashMap<String,Object>"

- shopModel_getOrCreateOrder: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	shopModel
  declaration: 	"public Order getOrCreateOrder(String id)"
  id: 	ShopModel_getOrCreateOrder
  methodBody: 	"if (id == null) return null;
return (Order) modelMap.computeIfAbsent(id, k -> new Order().setId(k));
"
  modified: 	false
  modifiers: 	public
  name: 	getOrCreateOrder
  paramsString: 	"String id"
  returnType: 	Order
  signature: 	"class/ShopModel/method/getOrCreateOrder(String)"

- shopModel_getOrCreateCustomer: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	shopModel
  declaration: 	"public Customer getOrCreateCustomer(String id)"
  id: 	ShopModel_getOrCreateCustomer
  methodBody: 	"if (id == null) return null;
return (Customer) modelMap.computeIfAbsent(id, k -> new Customer().setId(k));
"
  modified: 	false
  modifiers: 	public
  name: 	getOrCreateCustomer
  paramsString: 	"String id"
  returnType: 	Customer
  signature: 	"class/ShopModel/method/getOrCreateCustomer(String)"

- shopBusinessLogic_model: 	org.fulib.classmodel.Attribute
  clazz: 	shopBusinessLogic
  id: 	ShopBusinessLogic_model
  modified: 	false
  name: 	model
  propertyStyle: 	Bean
  type: 	ShopModel
  typeSignature: 	ShopModel

- shopBusinessLogic_handlerMap: 	org.fulib.classmodel.Attribute
  clazz: 	shopBusinessLogic
  id: 	ShopBusinessLogic_handlerMap
  modified: 	false
  name: 	handlerMap
  propertyStyle: 	Bean
  type: 	"LinkedHashMap<Class, Consumer<Event>>"
  typeSignature: 	"LinkedHashMap<Class,Consumer<Event>>"

- shopBusinessLogic_handleSubmitOrderCommand: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	shopBusinessLogic
  declaration: 	"private void handleSubmitOrderCommand(Event e)"
  id: 	ShopBusinessLogic_handleSubmitOrderCommand
  methodBody: 	"// to protect manuel changes to this method insert a 'no' in front of fulib in the next line
// fulib
SubmitOrderCommand event = (SubmitOrderCommand) e;
handleDemoSubmitOrderCommand(event);
"
  modified: 	false
  modifiers: 	private
  name: 	handleSubmitOrderCommand
  paramsString: 	"Event e"
  returnType: 	void
  signature: 	"class/ShopBusinessLogic/method/handleSubmitOrderCommand(Event)"

- shopBusinessLogic_handleDemoSubmitOrderCommand: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	shopBusinessLogic
  declaration: 	"private void handleDemoSubmitOrderCommand(SubmitOrderCommand event)"
  id: 	ShopBusinessLogic_handleDemoSubmitOrderCommand
  methodBody: 	"if (event.getId().equals(\"13:01\")) {
   OrderBuilt order1300Event = new OrderBuilt();
   order1300Event.setId(\"13:02\");
   order1300Event.setBlockId(\"order1300\");
   order1300Event.setProduct(\"shoes\");
   order1300Event.setCustomer(\"Alice\");
   order1300Event.setAddress(\"Wonderland 1\");
   order1300Event.setState(\"pending\");
   service.apply(order1300Event);

   CustomerBuilt aliceEvent = new CustomerBuilt();
   aliceEvent.setId(\"13:03\");
   aliceEvent.setBlockId(\"Alice\");
   aliceEvent.setOrders(\"[order1300]\");
   service.apply(aliceEvent);


   OrderRegisteredEvent e1304 = new OrderRegisteredEvent();

   e1304.setId(\"13:04\");
   e1304.setOrder(\"order1300\");
   e1304.setProduct(\"shoes\");
   e1304.setCustomer(\"Alice\");
   e1304.setAddress(\"Wonderland 1\");
   service.apply(e1304);
}
if (event.getId().equals(\"13:11\")) {
   OrderBuilt order1310Event = new OrderBuilt();
   order1310Event.setId(\"13:12\");
   order1310Event.setBlockId(\"order1310\");
   order1310Event.setProduct(\"tshirt\");
   order1310Event.setCustomer(\"Alice\");
   order1310Event.setAddress(\"Wonderland 1\");
   order1310Event.setState(\"pending\");
   service.apply(order1310Event);

   CustomerBuilt aliceEvent = new CustomerBuilt();
   aliceEvent.setId(\"13:13\");
   aliceEvent.setBlockId(\"Alice\");
   aliceEvent.setOrders(\"[ order1300 order1310 ]\");
   service.apply(aliceEvent);


   OrderRegisteredEvent e1314 = new OrderRegisteredEvent();

   e1314.setId(\"13:14\");
   e1314.setOrder(\"order1310\");
   e1314.setTrigger(\"button OK\");
   e1314.setProduct(\"tshirt\");
   e1314.setCustomer(\"Alice\");
   e1314.setAddress(\"Wonderland 1\");
   service.apply(e1314);
}
"
  modified: 	false
  modifiers: 	private
  name: 	handleDemoSubmitOrderCommand
  paramsString: 	"SubmitOrderCommand event"
  returnType: 	void
  signature: 	"class/ShopBusinessLogic/method/handleDemoSubmitOrderCommand(SubmitOrderCommand)"

- shopBusinessLogic_handleOrderApprovedEvent: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	shopBusinessLogic
  declaration: 	"private void handleOrderApprovedEvent(Event e)"
  id: 	ShopBusinessLogic_handleOrderApprovedEvent
  methodBody: 	"// to protect manuel changes to this method insert a 'no' in front of fulib in the next line
// fulib
OrderApprovedEvent event = (OrderApprovedEvent) e;
handleDemoOrderApprovedEvent(event);
"
  modified: 	false
  modifiers: 	private
  name: 	handleOrderApprovedEvent
  paramsString: 	"Event e"
  returnType: 	void
  signature: 	"class/ShopBusinessLogic/method/handleOrderApprovedEvent(Event)"

- shopBusinessLogic_handleDemoOrderApprovedEvent: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	shopBusinessLogic
  declaration: 	"private void handleDemoOrderApprovedEvent(OrderApprovedEvent event)"
  id: 	ShopBusinessLogic_handleDemoOrderApprovedEvent
  methodBody: 	"if (event.getId().equals(\"13:06\")) {
   OrderBuilt order1300Event = new OrderBuilt();
   order1300Event.setId(\"13:06\");
   order1300Event.setBlockId(\"order1300\");
   order1300Event.setState(\"picking\");
   service.apply(order1300Event);

}
"
  modified: 	false
  modifiers: 	private
  name: 	handleDemoOrderApprovedEvent
  paramsString: 	"OrderApprovedEvent event"
  returnType: 	void
  signature: 	"class/ShopBusinessLogic/method/handleDemoOrderApprovedEvent(OrderApprovedEvent)"

- shopBusinessLogic_handleOrderPickedEvent: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	shopBusinessLogic
  declaration: 	"private void handleOrderPickedEvent(Event e)"
  id: 	ShopBusinessLogic_handleOrderPickedEvent
  methodBody: 	"// to protect manuel changes to this method insert a 'no' in front of fulib in the next line
// fulib
OrderPickedEvent event = (OrderPickedEvent) e;
handleDemoOrderPickedEvent(event);
"
  modified: 	false
  modifiers: 	private
  name: 	handleOrderPickedEvent
  paramsString: 	"Event e"
  returnType: 	void
  signature: 	"class/ShopBusinessLogic/method/handleOrderPickedEvent(Event)"

- shopBusinessLogic_handleDemoOrderPickedEvent: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	shopBusinessLogic
  declaration: 	"private void handleDemoOrderPickedEvent(OrderPickedEvent event)"
  id: 	ShopBusinessLogic_handleDemoOrderPickedEvent
  methodBody: 	"if (event.getId().equals(\"14:03\")) {
   OrderBuilt order1300Event = new OrderBuilt();
   order1300Event.setId(\"14:04\");
   order1300Event.setBlockId(\"order1300\");
   order1300Event.setState(\"shipping\");
   service.apply(order1300Event);

}
"
  modified: 	false
  modifiers: 	private
  name: 	handleDemoOrderPickedEvent
  paramsString: 	"OrderPickedEvent event"
  returnType: 	void
  signature: 	"class/ShopBusinessLogic/method/handleDemoOrderPickedEvent(OrderPickedEvent)"

- shopBusinessLogic_handleOrderDeclinedEvent: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	shopBusinessLogic
  declaration: 	"private void handleOrderDeclinedEvent(Event e)"
  id: 	ShopBusinessLogic_handleOrderDeclinedEvent
  methodBody: 	"// to protect manuel changes to this method insert a 'no' in front of fulib in the next line
// fulib
OrderDeclinedEvent event = (OrderDeclinedEvent) e;
handleDemoOrderDeclinedEvent(event);
"
  modified: 	false
  modifiers: 	private
  name: 	handleOrderDeclinedEvent
  paramsString: 	"Event e"
  returnType: 	void
  signature: 	"class/ShopBusinessLogic/method/handleOrderDeclinedEvent(Event)"

- shopBusinessLogic_handleDemoOrderDeclinedEvent: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	shopBusinessLogic
  declaration: 	"private void handleDemoOrderDeclinedEvent(OrderDeclinedEvent event)"
  id: 	ShopBusinessLogic_handleDemoOrderDeclinedEvent
  methodBody: 	"if (event.getId().equals(\"13:15\")) {
   OrderBuilt order1310Event = new OrderBuilt();
   order1310Event.setId(\"13:16\");
   order1310Event.setBlockId(\"order1310\");
   order1310Event.setState(\"out of stock\");
   service.apply(order1310Event);

}
"
  modified: 	false
  modifiers: 	private
  name: 	handleDemoOrderDeclinedEvent
  paramsString: 	"OrderDeclinedEvent event"
  returnType: 	void
  signature: 	"class/ShopBusinessLogic/method/handleDemoOrderDeclinedEvent(OrderDeclinedEvent)"

- shopBusinessLogic_initEventHandlerMap: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	shopBusinessLogic
  declaration: 	"public void initEventHandlerMap()"
  id: 	ShopBusinessLogic_initEventHandlerMap
  methodBody: 	"if (handlerMap == null) {
   handlerMap = new LinkedHashMap<>();
   handlerMap.put(SubmitOrderCommand.class, this::handleSubmitOrderCommand);
   handlerMap.put(OrderApprovedEvent.class, this::handleOrderApprovedEvent);
   handlerMap.put(OrderPickedEvent.class, this::handleOrderPickedEvent);
   handlerMap.put(OrderDeclinedEvent.class, this::handleOrderDeclinedEvent);
   handlerMap.put(OrderBuilt.class, builder::storeOrderBuilt);
   handlerMap.put(CustomerBuilt.class, builder::storeCustomerBuilt);
}
"
  modified: 	false
  modifiers: 	public
  name: 	initEventHandlerMap
  paramsString: 	""
  returnType: 	void
  signature: 	"class/ShopBusinessLogic/method/initEventHandlerMap()"

- shopBusinessLogic_ignoreEvent: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	shopBusinessLogic
  declaration: 	"private void ignoreEvent(Event event)"
  id: 	ShopBusinessLogic_ignoreEvent
  methodBody: 	"// empty
"
  modified: 	false
  modifiers: 	private
  name: 	ignoreEvent
  paramsString: 	"Event event"
  returnType: 	void
  signature: 	"class/ShopBusinessLogic/method/ignoreEvent(Event)"

- shopBusinessLogic_getHandler: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	shopBusinessLogic
  declaration: 	"public Consumer<Event> getHandler(Event event)"
  id: 	ShopBusinessLogic_getHandler
  methodBody: 	"return getHandlerMap().computeIfAbsent(event.getClass(), k -> this::ignoreEvent);
"
  modified: 	false
  modifiers: 	public
  name: 	getHandler
  paramsString: 	"Event event"
  returnType: 	"Consumer<Event>"
  signature: 	"class/ShopBusinessLogic/method/getHandler(Event)"

- shopBusinessLogic_builder: 	org.fulib.classmodel.AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	shopBusinessLogic
  id: 	ShopBusinessLogic_builder
  modified: 	false
  name: 	builder
  other: 	shopBuilder_businessLogic
  propertyStyle: 	Bean

- shopBusinessLogic_service: 	org.fulib.classmodel.AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	shopBusinessLogic
  id: 	ShopBusinessLogic_service
  modified: 	false
  name: 	service
  other: 	shopService_businessLogic
  propertyStyle: 	Bean

- shopBuilder_model: 	org.fulib.classmodel.Attribute
  clazz: 	shopBuilder
  id: 	ShopBuilder_model
  modified: 	false
  name: 	model
  propertyStyle: 	Bean
  type: 	ShopModel
  typeSignature: 	ShopModel

- shopBuilder_eventStore: 	org.fulib.classmodel.Attribute
  clazz: 	shopBuilder
  id: 	ShopBuilder_eventStore
  initialization: 	"new LinkedHashMap<>()"
  modified: 	false
  name: 	eventStore
  propertyStyle: 	Bean
  type: 	"LinkedHashMap<String, DataEvent>"
  typeSignature: 	"LinkedHashMap<String,DataEvent>"

- shopBuilder_loaderMap: 	org.fulib.classmodel.Attribute
  clazz: 	shopBuilder
  id: 	ShopBuilder_loaderMap
  modified: 	false
  name: 	loaderMap
  propertyStyle: 	Bean
  type: 	"LinkedHashMap<Class, Function<Event, Object>>"
  typeSignature: 	"LinkedHashMap<Class,Function<Event,Object>>"

- shopBuilder_groupStore: 	org.fulib.classmodel.Attribute
  clazz: 	shopBuilder
  id: 	ShopBuilder_groupStore
  initialization: 	"new LinkedHashMap<>()"
  modified: 	false
  name: 	groupStore
  propertyStyle: 	Bean
  type: 	"LinkedHashMap<String, LinkedHashMap<String, DataEvent>>"
  typeSignature: 	"LinkedHashMap<String,LinkedHashMap<String,DataEvent>>"

- shopBuilder_outdated: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	shopBuilder
  declaration: 	"private boolean outdated(DataEvent event)"
  id: 	ShopBuilder_outdated
  methodBody: 	"      DataEvent oldEvent = getEventStore().get(event.getBlockId());

      if (oldEvent == null) {
         eventStore.put(event.getBlockId(), event);
         return false;
      }

      if (oldEvent.getId().compareTo(event.getId()) < 0) {
         eventStore.put(event.getBlockId(), event);
         return false;
      }

      return true;"
  modified: 	false
  modifiers: 	private
  name: 	outdated
  paramsString: 	"DataEvent event"
  returnType: 	boolean
  signature: 	"class/ShopBuilder/method/outdated(DataEvent)"

- shopBuilder_storeOrderBuilt: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	shopBuilder
  declaration: 	"public void storeOrderBuilt(Event e)"
  id: 	ShopBuilder_storeOrderBuilt
  methodBody: 	"OrderBuilt event = (OrderBuilt) e;
if (outdated(event)) {
   return;
}
// please insert a no before fulib in the next line and insert addToGroup commands as necessary
// fulib
"
  modified: 	false
  modifiers: 	public
  name: 	storeOrderBuilt
  paramsString: 	"Event e"
  returnType: 	void
  signature: 	"class/ShopBuilder/method/storeOrderBuilt(Event)"

- shopBuilder_loadOrderBuilt: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	shopBuilder
  declaration: 	"public Order loadOrderBuilt(Event e)"
  id: 	ShopBuilder_loadOrderBuilt
  methodBody: 	"OrderBuilt event = (OrderBuilt) e;
Order object = model.getOrCreateOrder(event.getBlockId());
object.setProduct(event.getProduct());
object.setCustomer(event.getCustomer());
object.setAddress(event.getAddress());
object.setState(event.getState());
return object;
"
  modified: 	false
  modifiers: 	public
  name: 	loadOrderBuilt
  paramsString: 	"Event e"
  returnType: 	Order
  signature: 	"class/ShopBuilder/method/loadOrderBuilt(Event)"

- shopBuilder_storeCustomerBuilt: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	shopBuilder
  declaration: 	"public void storeCustomerBuilt(Event e)"
  id: 	ShopBuilder_storeCustomerBuilt
  methodBody: 	"CustomerBuilt event = (CustomerBuilt) e;
if (outdated(event)) {
   return;
}
// please insert a no before fulib in the next line and insert addToGroup commands as necessary
// fulib
"
  modified: 	false
  modifiers: 	public
  name: 	storeCustomerBuilt
  paramsString: 	"Event e"
  returnType: 	void
  signature: 	"class/ShopBuilder/method/storeCustomerBuilt(Event)"

- shopBuilder_loadCustomerBuilt: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	shopBuilder
  declaration: 	"public Customer loadCustomerBuilt(Event e)"
  id: 	ShopBuilder_loadCustomerBuilt
  methodBody: 	"CustomerBuilt event = (CustomerBuilt) e;
Customer object = model.getOrCreateCustomer(event.getBlockId());
object.setOrders(event.getOrders());
return object;
"
  modified: 	false
  modifiers: 	public
  name: 	loadCustomerBuilt
  paramsString: 	"Event e"
  returnType: 	Customer
  signature: 	"class/ShopBuilder/method/loadCustomerBuilt(Event)"

- shopBuilder_load: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	shopBuilder
  declaration: 	"public Object load(String blockId)"
  id: 	ShopBuilder_load
  methodBody: 	"      DataEvent dataEvent = eventStore.get(blockId);
      if (dataEvent == null) {
         return null;
      }

      initLoaderMap();
      Function<Event, Object> loader = loaderMap.get(dataEvent.getClass());
      Object object = loader.apply(dataEvent);

      LinkedHashMap<String, DataEvent> group = groupStore.computeIfAbsent(blockId, k -> new LinkedHashMap<>());
      for (DataEvent element : group.values()) {
         loader = loaderMap.get(element.getClass());
         loader.apply(element);
      }

      return object;"
  modified: 	false
  modifiers: 	public
  name: 	load
  paramsString: 	"String blockId"
  returnType: 	Object
  signature: 	"class/ShopBuilder/method/load(String)"

- shopBuilder_initLoaderMap: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	shopBuilder
  declaration: 	"private void initLoaderMap()"
  id: 	ShopBuilder_initLoaderMap
  methodBody: 	"if (loaderMap == null) {
   loaderMap = new LinkedHashMap<>();
   loaderMap.put(OrderBuilt.class, this::loadOrderBuilt);
   loaderMap.put(CustomerBuilt.class, this::loadCustomerBuilt);
}
"
  modified: 	false
  modifiers: 	private
  name: 	initLoaderMap
  paramsString: 	""
  returnType: 	void
  signature: 	"class/ShopBuilder/method/initLoaderMap()"

- shopBuilder_getVarName: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	shopBuilder
  declaration: 	"public String getVarName(String value)"
  id: 	ShopBuilder_getVarName
  methodBody: 	"      String[] split = value.split(\"\\s+\");
      String varName = split[0];
      for (int i = 1; i < split.length; i++) {
         varName += org.fulib.StrUtil.cap(split[i]);
      }
      return varName;"
  modified: 	false
  modifiers: 	public
  name: 	getVarName
  paramsString: 	"String value"
  returnType: 	String
  signature: 	"class/ShopBuilder/method/getVarName(String)"

- shopBuilder_addToGroup: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	shopBuilder
  declaration: 	"private void addToGroup(String groupId, String elementId)"
  id: 	ShopBuilder_addToGroup
  methodBody: 	"      DataEvent dataEvent = eventStore.get(elementId);

      if (dataEvent == null) {
         java.util.logging.Logger.getGlobal().severe(String.format(\"could not find element event %s for group %s \", elementId, groupId));
         return;
      }

      LinkedHashMap<String, DataEvent> group = groupStore.computeIfAbsent(groupId, k -> new LinkedHashMap<>());
      group.put(elementId, dataEvent);"
  modified: 	false
  modifiers: 	private
  name: 	addToGroup
  paramsString: 	"String groupId, String elementId"
  returnType: 	void
  signature: 	"class/ShopBuilder/method/addToGroup(String,String)"

- shopBuilder_stripBrackets: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	shopBuilder
  declaration: 	"public String stripBrackets(String back)"
  id: 	ShopBuilder_stripBrackets
  methodBody: 	"      if (back == null) {
         return \"\";
      }
      int open = back.indexOf('[');
      int close = back.indexOf(']');
      if (open >= 0 && close >= 0) {
         back = back.substring(open + 1, close);
      }
      return back;"
  modified: 	false
  modifiers: 	public
  name: 	stripBrackets
  paramsString: 	"String back"
  returnType: 	String
  signature: 	"class/ShopBuilder/method/stripBrackets(String)"

- shopBuilder_businessLogic: 	org.fulib.classmodel.AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	shopBuilder
  id: 	ShopBuilder_businessLogic
  modified: 	false
  name: 	businessLogic
  other: 	shopBusinessLogic_builder
  propertyStyle: 	Bean

- shopBuilder_service: 	org.fulib.classmodel.AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	shopBuilder
  id: 	ShopBuilder_service
  modified: 	false
  name: 	service
  other: 	shopService_builder
  propertyStyle: 	Bean

- shopService_history: 	org.fulib.classmodel.Attribute
  clazz: 	shopService
  id: 	ShopService_history
  initialization: 	"new LinkedHashMap<>()"
  modified: 	false
  name: 	history
  propertyStyle: 	Bean
  type: 	"LinkedHashMap<String, Event>"
  typeSignature: 	"LinkedHashMap<String,Event>"

- shopService_port: 	org.fulib.classmodel.Attribute
  clazz: 	shopService
  id: 	ShopService_port
  initialization: 	42100
  modified: 	false
  name: 	port
  propertyStyle: 	Bean
  type: 	int
  typeSignature: 	int

- shopService_spark: 	org.fulib.classmodel.Attribute
  clazz: 	shopService
  id: 	ShopService_spark
  modified: 	false
  name: 	spark
  propertyStyle: 	Bean
  type: 	Service
  typeSignature: 	Service

- shopService_model: 	org.fulib.classmodel.Attribute
  clazz: 	shopService
  id: 	ShopService_model
  modified: 	false
  name: 	model
  propertyStyle: 	Bean
  type: 	ShopModel
  typeSignature: 	ShopModel

- shopService_query: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	shopService
  declaration: 	"public Query query(Query query)"
  id: 	ShopService_query
  methodBody: 	"      DataEvent dataEvent = getBuilder().getEventStore().get(query.getKey());

      if (dataEvent == null) {
         return query;
      }

      if (dataEvent instanceof DataGroup) {
         DataGroup group = (DataGroup) dataEvent;
         query.withResults(group.getElements());
      }
      else {
         query.withResults(dataEvent);
      }

      return query;"
  modified: 	false
  modifiers: 	public
  name: 	query
  paramsString: 	"Query query"
  returnType: 	Query
  signature: 	"class/ShopService/method/query(Query)"

- shopService_isoNow: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	shopService
  declaration: 	"public String isoNow()"
  id: 	ShopService_isoNow
  methodBody: 	"return DateTimeFormatter.ISO_INSTANT.format(Instant.now());
"
  modified: 	false
  modifiers: 	public
  name: 	isoNow
  paramsString: 	""
  returnType: 	String
  signature: 	"class/ShopService/method/isoNow()"

- shopService_start: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	shopService
  declaration: 	"public void start()"
  id: 	ShopService_start
  methodBody: 	"model = new ShopModel();
setBuilder(new ShopBuilder().setModel(model));
setBusinessLogic(new ShopBusinessLogic());
businessLogic.setBuilder(getBuilder());
businessLogic.setModel(model);
ExecutorService executor = Executors.newSingleThreadExecutor();
spark = Service.ignite();
spark.port(port);
spark.get(\"/page/:id\", (req, res) -> executor.submit(() -> this.getPage(req, res)).get());
spark.get(\"/\", (req, res) -> executor.submit(() -> this.getHello(req, res)).get());
spark.post(\"/apply\", (req, res) -> executor.submit(() -> this.postApply(req, res)).get());
executor.submit(this::subscribeAndLoadOldEvents);
Logger.getGlobal().info(\"Shop service is up and running on port \" + port);
"
  modified: 	false
  modifiers: 	public
  name: 	start
  paramsString: 	""
  returnType: 	void
  signature: 	"class/ShopService/method/start()"

- shopService_getHello: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	shopService
  declaration: 	"private String getHello(Request req, Response res)"
  id: 	ShopService_getHello
  methodBody: 	"try {
   String events = Yaml.encodeSimple(getHistory().values().toArray());
   String objects = Yaml.encodeSimple(model.getModelMap().values().toArray());
   return \"<p id='Shop'>This is the Shop service. </p>\n\" +
         \"<pre id=\\"history\\">\" + events + \"</pre>\n\" +
         \"<pre id=\\"data\\">\" + objects + \"</pre>\n\" +
         \"\";
}
catch (Exception e) {
   Logger.getGlobal().log(Level.SEVERE, e.getMessage(), e);
   return \"Shop Error \" + e.getMessage();
}
"
  modified: 	false
  modifiers: 	private
  name: 	getHello
  paramsString: 	"Request req, Response res"
  returnType: 	String
  signature: 	"class/ShopService/method/getHello(Request,Response)"

- shopService_subscribeAndLoadOldEvents: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	shopService
  declaration: 	"private void subscribeAndLoadOldEvents()"
  id: 	ShopService_subscribeAndLoadOldEvents
  methodBody: 	"ServiceSubscribed serviceSubscribed = new ServiceSubscribed()
      .setServiceUrl(String.format(\"http://localhost:%d/apply\", port));
String json = Yaml.encodeSimple(serviceSubscribed);
try {
   String url = \"http://localhost:42000/subscribe\";
   HttpResponse<String> response = Unirest
         .post(url)
         .body(json)
         .asString();
   String body = response.getBody();
   YamlIdMap idMap = new YamlIdMap(Event.class.getPackageName());
   idMap.decode(body);
   Map<String, Object> objectMap = idMap.getObjIdMap();
   for (Object obj : objectMap.values()) {
      apply((Event) obj);
   }
}
catch (UnirestException e) {
   e.printStackTrace();
}"
  modified: 	false
  modifiers: 	private
  name: 	subscribeAndLoadOldEvents
  paramsString: 	""
  returnType: 	void
  signature: 	"class/ShopService/method/subscribeAndLoadOldEvents()"

- shopService_apply: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	shopService
  declaration: 	"public void apply(Event event)"
  id: 	ShopService_apply
  methodBody: 	"if (history.get(event.getId()) != null) {
   return;
}
businessLogic.initEventHandlerMap();
Consumer<Event> handler = businessLogic.getHandler(event);
handler.accept(event);
history.put(event.getId(), event);
firePropertyChange(PROPERTY_HISTORY, null, event);
publish(event);"
  modified: 	false
  modifiers: 	public
  name: 	apply
  paramsString: 	"Event event"
  returnType: 	void
  signature: 	"class/ShopService/method/apply(Event)"

- shopService_getPage: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	shopService
  declaration: 	"public String getPage(Request request, Response response)"
  id: 	ShopService_getPage
  methodBody: 	"// to protect manuel changes to this method insert a 'no' in front of fulib in the next line
// fulib
return getDemoPage(request, response);
"
  modified: 	false
  modifiers: 	public
  name: 	getPage
  paramsString: 	"Request request, Response response"
  returnType: 	String
  signature: 	"class/ShopService/method/getPage(Request,Response)"

- shopService_getDemoPage: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	shopService
  declaration: 	"public String getDemoPage(Request request, Response response)"
  id: 	ShopService_getDemoPage
  methodBody: 	"StringBuilder html = new StringBuilder();
String id = request.params(\"id\");
String event = request.queryParams(\"event\");

if (\"select product 12:51\".equals(event)) {

   // create SelectProductCommand: select product 12:51
   SelectProductCommand e1251 = new SelectProductCommand();
   e1251.setId(\"12:51\");
   apply(e1251);
}

if (\"submit order 13:01\".equals(event)) {

   // create SubmitOrderCommand: submit order 13:01
   SubmitOrderCommand e1301 = new SubmitOrderCommand();
   e1301.setId(\"13:01\");
   e1301.setProduct(request.queryParams(\"product\"));
   e1301.setName(request.queryParams(\"name\"));
   e1301.setAddress(request.queryParams(\"address\"));
   apply(e1301);
}



// 12:50
if (id.equals(\"12_50\")) {
   html.append(\"<form action=\\"/page/13_00\\" method=\\"get\\">\n\");
   // Shop 12:50
   html.append(\"   <p>Welcome to the event shop</p>\n\");
   html.append(\"   <p>What do you want?</p>\n\");
   html.append(\"   <p><input id=\\"event\\" name=\\"event\\" type=\\"hidden\\" value=\\"select product 12:51\\"></p>\n\");
   html.append(\"   <p><input id=\\"shoes\\" name=\\"button\\" type=\\"submit\\" value=\\"shoes\\"></p>\n\");
   html.append(\"   <p><input id=\\"tshirt\\" name=\\"button\\" type=\\"submit\\" value=\\"tshirt\\"></p>\n\");
   html.append(\"</form>\n\");
   return html.toString();
}

// 13:00
if (id.equals(\"13_00\")) {
   html.append(\"<form action=\\"/page/next_page\\" method=\\"get\\">\n\");
   // Shop 13:00
   html.append(\"   <p>welcome to the shop</p>\n\");
   html.append(\"   <p><input id=\\"product\\" name=\\"product\\" placeholder=\\"product?\\"></p>\n\");
   html.append(\"   <p><input id=\\"name\\" name=\\"name\\" placeholder=\\"name?\\"></p>\n\");
   html.append(\"   <p><input id=\\"address\\" name=\\"address\\" placeholder=\\"address?\\"></p>\n\");
   html.append(\"   <p><input id=\\"event\\" name=\\"event\\" type=\\"hidden\\" value=\\"submit order 13:01\\"></p>\n\");
   html.append(\"   <p><input id=\\"OK\\" name=\\"button\\" type=\\"submit\\" value=\\"OK\\"></p>\n\");
   html.append(\"</form>\n\");
   return html.toString();
}



html.append(\"This is the Shop Service page \" + id + \"\n\");
return html.toString();"
  modified: 	false
  modifiers: 	public
  name: 	getDemoPage
  paramsString: 	"Request request, Response response"
  returnType: 	String
  signature: 	"class/ShopService/method/getDemoPage(Request,Response)"

- shopService_publish: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	shopService
  declaration: 	"public void publish(Event event)"
  id: 	ShopService_publish
  methodBody: 	"String json = Yaml.encodeSimple(event);

try {
   HttpResponse<String> response = Unirest
         .post(\"http://localhost:42000/publish\")
         .body(json)
         .asString();
}
catch (UnirestException e) {
   e.printStackTrace();
}"
  modified: 	false
  modifiers: 	public
  name: 	publish
  paramsString: 	"Event event"
  returnType: 	void
  signature: 	"class/ShopService/method/publish(Event)"

- shopService_postApply: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	shopService
  declaration: 	"private String postApply(Request req, Response res)"
  id: 	ShopService_postApply
  methodBody: 	"      String body = req.body();
      try {
         YamlIdMap idMap = new YamlIdMap(Event.class.getPackageName());
         idMap.decode(body);
         Map<String, Object> map = idMap.getObjIdMap();
         for (Object value : map.values()) {
            Event event = (Event) value;
            apply(event);
         }
      }
      catch (Exception e) {
         String message = e.getMessage();
         if (message.contains(\"ReflectorMap could not find class description\")) {
            Logger.getGlobal().info(\"post apply ignores unknown event \" + body);
         }
         else {
            Logger.getGlobal().log(Level.SEVERE, \"postApply failed\", e);
         }
      }
      return \"apply done\";"
  modified: 	false
  modifiers: 	private
  name: 	postApply
  paramsString: 	"Request req, Response res"
  returnType: 	String
  signature: 	"class/ShopService/method/postApply(Request,Response)"

- shopService_businessLogic: 	org.fulib.classmodel.AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	shopService
  id: 	ShopService_businessLogic
  modified: 	false
  name: 	businessLogic
  other: 	shopBusinessLogic_service
  propertyStyle: 	Bean

- shopService_builder: 	org.fulib.classmodel.AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	shopService
  id: 	ShopService_builder
  modified: 	false
  name: 	builder
  other: 	shopBuilder_service
  propertyStyle: 	Bean

- order_id: 	org.fulib.classmodel.Attribute
  clazz: 	order
  id: 	Order_id
  modified: 	false
  name: 	id
  propertyStyle: 	Bean
  type: 	String
  typeSignature: 	String

- order_product: 	org.fulib.classmodel.Attribute
  clazz: 	order
  id: 	Order_product
  modified: 	false
  name: 	product
  propertyStyle: 	Bean
  type: 	String
  typeSignature: 	String

- order_customer: 	org.fulib.classmodel.Attribute
  clazz: 	order
  id: 	Order_customer
  modified: 	false
  name: 	customer
  propertyStyle: 	Bean
  type: 	String
  typeSignature: 	String

- order_address: 	org.fulib.classmodel.Attribute
  clazz: 	order
  id: 	Order_address
  modified: 	false
  name: 	address
  propertyStyle: 	Bean
  type: 	String
  typeSignature: 	String

- order_state: 	org.fulib.classmodel.Attribute
  clazz: 	order
  id: 	Order_state
  modified: 	false
  name: 	state
  propertyStyle: 	Bean
  type: 	String
  typeSignature: 	String

- customer_id: 	org.fulib.classmodel.Attribute
  clazz: 	customer
  id: 	Customer_id
  modified: 	false
  name: 	id
  propertyStyle: 	Bean
  type: 	String
  typeSignature: 	String

- customer_orders: 	org.fulib.classmodel.Attribute
  clazz: 	customer
  id: 	Customer_orders
  modified: 	false
  name: 	orders
  propertyStyle: 	Bean
  type: 	String
  typeSignature: 	String

