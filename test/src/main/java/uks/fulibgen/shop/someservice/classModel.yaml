- c: 	org.fulib.classmodel.ClassModel
  classes: 	someserviceModel 	someserviceBusinessLogic 	someserviceBuilder 	someserviceService 	box
  defaultCollectionType: 	c1
  defaultPropertyStyle: 	Bean
  defaultRoleType: 	"java.util.ArrayList<%s>"
  mainJavaDir: 	"src/main/java"
  packageName: 	uks.fulibgen.shop.someservice
  packageSrcFolder: 	"src/main/java/uks/fulibgen/shop/someservice"

- someserviceModel: 	org.fulib.classmodel.Clazz
  attributes: 	someserviceModel_modelMap
  importList: 	"import java.util.LinkedHashMap;"
  imports: 	"import java.util.LinkedHashMap;"
  methods: 	someserviceModel_getOrCreateBox
  model: 	c
  modified: 	false
  name: 	someserviceModel
  propertyStyle: 	Bean

- someserviceBusinessLogic: 	org.fulib.classmodel.Clazz
  attributes: 	someserviceBusinessLogic_model 	someserviceBusinessLogic_handlerMap
  importList: 	"import java.util.LinkedHashMap;" 	"import java.util.function.Consumer;" 	"import uks.fulibgen.shop.events.*;"
  imports: 	"import java.util.LinkedHashMap;" 	"import java.util.function.Consumer;" 	"import uks.fulibgen.shop.events.*;"
  methods: 	someserviceBusinessLogic_handleProductStoredEvent 	someserviceBusinessLogic_handleDemoProductStoredEvent 	someserviceBusinessLogic_initEventHandlerMap
  model: 	c
  modified: 	false
  name: 	someserviceBusinessLogic
  propertyStyle: 	Bean
  roles: 	someserviceBusinessLogic_builder 	someserviceBusinessLogic_service

- someserviceBuilder: 	org.fulib.classmodel.Clazz
  attributes: 	someserviceBuilder_model
  importList: 	"import java.util.LinkedHashMap;" 	"import java.util.function.Consumer;" 	"import uks.fulibgen.shop.events.*;"
  imports: 	"import java.util.LinkedHashMap;" 	"import java.util.function.Consumer;" 	"import uks.fulibgen.shop.events.*;"
  methods: 	someserviceBuilder_handleBoxBuilt 	someserviceBuilder_stripBrackets
  model: 	c
  modified: 	false
  name: 	someserviceBuilder
  propertyStyle: 	Bean
  roles: 	someserviceBuilder_businessLogic

- someserviceService: 	org.fulib.classmodel.Clazz
  attributes: 	someserviceService_history 	someserviceService_port 	someserviceService_spark 	someserviceService_model
  importList: 	"import java.util.LinkedHashMap;" 	"import java.util.Map;" 	"import java.util.function.Consumer;" 	"import uks.fulibgen.shop.events.*;" 	"import org.fulib.yaml.Yaml;" 	"import spark.Service;" 	"import spark.Request;" 	"import spark.Response;" 	"import com.mashape.unirest.http.HttpResponse;" 	"import com.mashape.unirest.http.Unirest;" 	"import com.mashape.unirest.http.exceptions.UnirestException;" 	"import java.util.concurrent.ExecutorService;" 	"import java.util.concurrent.Executors;" 	"import java.util.logging.Logger;" 	"import java.util.logging.Level;"
  imports: 	"import java.util.LinkedHashMap;" 	"import java.util.Map;" 	"import java.util.function.Consumer;" 	"import uks.fulibgen.shop.events.*;" 	"import org.fulib.yaml.Yaml;" 	"import spark.Service;" 	"import spark.Request;" 	"import spark.Response;" 	"import com.mashape.unirest.http.HttpResponse;" 	"import com.mashape.unirest.http.Unirest;" 	"import com.mashape.unirest.http.exceptions.UnirestException;" 	"import java.util.concurrent.ExecutorService;" 	"import java.util.concurrent.Executors;" 	"import java.util.logging.Logger;" 	"import java.util.logging.Level;"
  methods: 	someserviceService_start 	someserviceService_getHello 	someserviceService_subscribeAndLoadOldEvents 	someserviceService_apply 	someserviceService_getPage 	someserviceService_getDemoPage 	someserviceService_ignoreEvent 	someserviceService_publish 	someserviceService_postApply
  model: 	c
  modified: 	false
  name: 	someserviceService
  propertyStyle: 	Bean
  roles: 	someserviceService_businessLogic

- box: 	org.fulib.classmodel.Clazz
  attributes: 	box_id 	box_product 	box_place
  model: 	c
  modified: 	false
  name: 	Box
  propertyStyle: 	Bean

- c1: 	org.fulib.classmodel.CollectionType
  implClass: 	class java.util.ArrayList
  implTemplate: 	"java.util.ArrayList<%s>"
  itf: 	org.fulib.classmodel.CollectionInterface.List
  qualifiedImplName: 	java.util.ArrayList
  simpleImplName: 	ArrayList

- someserviceModel_modelMap: 	org.fulib.classmodel.Attribute
  clazz: 	someserviceModel
  id: 	someserviceModel_modelMap
  initialization: 	"new LinkedHashMap<>()"
  modified: 	false
  name: 	modelMap
  propertyStyle: 	Bean
  type: 	"LinkedHashMap<String, Object>"
  typeSignature: 	"LinkedHashMap<String,Object>"

- someserviceModel_getOrCreateBox: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	someserviceModel
  declaration: 	"public Box getOrCreateBox(String id)"
  id: 	someserviceModel_getOrCreateBox
  methodBody: 	"if (id == null) return null;
return (Box) modelMap.computeIfAbsent(id, k -> new Box().setId(k));
"
  modified: 	false
  modifiers: 	public
  name: 	getOrCreateBox
  paramsString: 	"String id"
  returnType: 	Box
  signature: 	"class/someserviceModel/method/getOrCreateBox(String)"

- someserviceBusinessLogic_model: 	org.fulib.classmodel.Attribute
  clazz: 	someserviceBusinessLogic
  id: 	someserviceBusinessLogic_model
  modified: 	false
  name: 	model
  propertyStyle: 	Bean
  type: 	someserviceModel
  typeSignature: 	someserviceModel

- someserviceBusinessLogic_handlerMap: 	org.fulib.classmodel.Attribute
  clazz: 	someserviceBusinessLogic
  id: 	someserviceBusinessLogic_handlerMap
  modified: 	false
  name: 	handlerMap
  propertyStyle: 	Bean
  type: 	"LinkedHashMap<Class, Consumer<Event>>"
  typeSignature: 	"LinkedHashMap<Class,Consumer<Event>>"

- someserviceBusinessLogic_handleProductStoredEvent: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	someserviceBusinessLogic
  declaration: 	"private void handleProductStoredEvent(Event e)"
  id: 	someserviceBusinessLogic_handleProductStoredEvent
  methodBody: 	"// no fulib
ProductStoredEvent event = (ProductStoredEvent) e;
handleDemoProductStoredEvent(event);
"
  modified: 	false
  modifiers: 	private
  name: 	handleProductStoredEvent
  paramsString: 	"Event e"
  returnType: 	void
  signature: 	"class/someserviceBusinessLogic/method/handleProductStoredEvent(Event)"

- someserviceBusinessLogic_handleDemoProductStoredEvent: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	someserviceBusinessLogic
  declaration: 	"private void handleDemoProductStoredEvent(ProductStoredEvent event)"
  id: 	someserviceBusinessLogic_handleDemoProductStoredEvent
  methodBody: 	"if (event.getId().equals(\"12:00\")) {
   BoxBuilt box23Event = new BoxBuilt();
   box23Event.setId(\"12:01\");
   box23Event.setBlockId(\"box23\");
   box23Event.setProduct(\"shoes\");
   box23Event.setPlace(\"shelf23\");
   service.apply(box23Event);

}
"
  modified: 	false
  modifiers: 	private
  name: 	handleDemoProductStoredEvent
  paramsString: 	"ProductStoredEvent event"
  returnType: 	void
  signature: 	"class/someserviceBusinessLogic/method/handleDemoProductStoredEvent(ProductStoredEvent)"

- someserviceBusinessLogic_initEventHandlerMap: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	someserviceBusinessLogic
  declaration: 	"public void initEventHandlerMap()"
  id: 	someserviceBusinessLogic_initEventHandlerMap
  methodBody: 	"if (handlerMap == null) {
   handlerMap = new LinkedHashMap<>();
   handlerMap.put(ProductStoredEvent.class, this::handleProductStoredEvent);
   handlerMap.put(BoxBuilt.class, builder::handleBoxBuilt);
}
"
  modified: 	false
  modifiers: 	public
  name: 	initEventHandlerMap
  paramsString: 	""
  returnType: 	void
  signature: 	"class/someserviceBusinessLogic/method/initEventHandlerMap()"

- someserviceBusinessLogic_builder: 	org.fulib.classmodel.AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	someserviceBusinessLogic
  id: 	someserviceBusinessLogic_builder
  modified: 	false
  name: 	builder
  other: 	someserviceBuilder_businessLogic
  propertyStyle: 	Bean

- someserviceBusinessLogic_service: 	org.fulib.classmodel.AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	someserviceBusinessLogic
  id: 	someserviceBusinessLogic_service
  modified: 	false
  name: 	service
  other: 	someserviceService_businessLogic
  propertyStyle: 	Bean

- someserviceBuilder_model: 	org.fulib.classmodel.Attribute
  clazz: 	someserviceBuilder
  id: 	someserviceBuilder_model
  modified: 	false
  name: 	model
  propertyStyle: 	Bean
  type: 	someserviceModel
  typeSignature: 	someserviceModel

- someserviceBuilder_handleBoxBuilt: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	someserviceBuilder
  declaration: 	"public void handleBoxBuilt(Event e)"
  id: 	someserviceBuilder_handleBoxBuilt
  methodBody: 	"BoxBuilt event = (BoxBuilt) e;
Box object = model.getOrCreateBox(event.getBlockId());
object.setProduct(event.getProduct());
object.setPlace(event.getPlace());
"
  modified: 	false
  modifiers: 	public
  name: 	handleBoxBuilt
  paramsString: 	"Event e"
  returnType: 	void
  signature: 	"class/someserviceBuilder/method/handleBoxBuilt(Event)"

- someserviceBuilder_stripBrackets: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	someserviceBuilder
  declaration: 	"public String stripBrackets(String back)"
  id: 	someserviceBuilder_stripBrackets
  methodBody: 	"      if (back == null) {
         return \"\";
      }
      int open = back.indexOf('[');
      int close = back.indexOf(']');
      if (open >= 0 && close >= 0) {
         back = back.substring(open + 1, close);
      }
      return back;"
  modified: 	false
  modifiers: 	public
  name: 	stripBrackets
  paramsString: 	"String back"
  returnType: 	String
  signature: 	"class/someserviceBuilder/method/stripBrackets(String)"

- someserviceBuilder_businessLogic: 	org.fulib.classmodel.AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	someserviceBuilder
  id: 	someserviceBuilder_businessLogic
  modified: 	false
  name: 	businessLogic
  other: 	someserviceBusinessLogic_builder
  propertyStyle: 	Bean

- someserviceService_history: 	org.fulib.classmodel.Attribute
  clazz: 	someserviceService
  id: 	someserviceService_history
  initialization: 	"new LinkedHashMap<>()"
  modified: 	false
  name: 	history
  propertyStyle: 	Bean
  type: 	"LinkedHashMap<String, Event>"
  typeSignature: 	"LinkedHashMap<String,Event>"

- someserviceService_port: 	org.fulib.classmodel.Attribute
  clazz: 	someserviceService
  id: 	someserviceService_port
  initialization: 	42002
  modified: 	false
  name: 	port
  propertyStyle: 	Bean
  type: 	int
  typeSignature: 	int

- someserviceService_spark: 	org.fulib.classmodel.Attribute
  clazz: 	someserviceService
  id: 	someserviceService_spark
  modified: 	false
  name: 	spark
  propertyStyle: 	Bean
  type: 	Service
  typeSignature: 	Service

- someserviceService_model: 	org.fulib.classmodel.Attribute
  clazz: 	someserviceService
  id: 	someserviceService_model
  modified: 	false
  name: 	model
  propertyStyle: 	Bean
  type: 	someserviceModel
  typeSignature: 	someserviceModel

- someserviceService_start: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	someserviceService
  declaration: 	"public void start()"
  id: 	someserviceService_start
  methodBody: 	"model = new someserviceModel();
setBusinessLogic(new someserviceBusinessLogic());
businessLogic.setBuilder(new someserviceBuilder().setModel(model));
businessLogic.setModel(model);
ExecutorService executor = Executors.newSingleThreadExecutor();
spark = Service.ignite();
spark.port(port);
spark.get(\"/page/:id\", (req, res) -> executor.submit(() -> this.getPage(req, res)).get());
spark.get(\"/\", (req, res) -> executor.submit(() -> this.getHello(req, res)).get());
spark.post(\"/apply\", (req, res) -> executor.submit(() -> this.postApply(req, res)).get());
executor.submit(this::subscribeAndLoadOldEvents);
Logger.getGlobal().info(\"someservice service is up and running on port \" + port);
"
  modified: 	false
  modifiers: 	public
  name: 	start
  paramsString: 	""
  returnType: 	void
  signature: 	"class/someserviceService/method/start()"

- someserviceService_getHello: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	someserviceService
  declaration: 	"private String getHello(Request req, Response res)"
  id: 	someserviceService_getHello
  methodBody: 	"try {
   String events = Yaml.encode(getHistory().values().toArray());
   String objects = Yaml.encode(model.getModelMap().values().toArray());
   return \"<p id='someservice'>This is the someservice service. </p>\n\" +
         \"<pre id=\\"history\\">\" + events + \"</pre>\n\" +
         \"<pre id=\\"data\\">\" + objects + \"</pre>\n\" +
         \"\";
}
catch (Exception e) {
   Logger.getGlobal().log(Level.SEVERE, e.getMessage(), e);
   return \"someservice Error \" + e.getMessage();
}
"
  modified: 	false
  modifiers: 	private
  name: 	getHello
  paramsString: 	"Request req, Response res"
  returnType: 	String
  signature: 	"class/someserviceService/method/getHello(Request,Response)"

- someserviceService_subscribeAndLoadOldEvents: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	someserviceService
  declaration: 	"private void subscribeAndLoadOldEvents()"
  id: 	someserviceService_subscribeAndLoadOldEvents
  methodBody: 	"ServiceSubscribed serviceSubscribed = new ServiceSubscribed()
      .setServiceUrl(\"http://localhost:42002/apply\");
String json = Yaml.encode(serviceSubscribed);
try {
   String url = \"http://localhost:42000/subscribe\";
   HttpResponse<String> response = Unirest
         .post(url)
         .body(json)
         .asString();
   String body = response.getBody();
   Map<String, Object> objectMap = Yaml.decode(body);
   for (Object obj : objectMap.values()) {
      apply((Event) obj);
   }
}
catch (UnirestException e) {
   e.printStackTrace();
}"
  modified: 	false
  modifiers: 	private
  name: 	subscribeAndLoadOldEvents
  paramsString: 	""
  returnType: 	void
  signature: 	"class/someserviceService/method/subscribeAndLoadOldEvents()"

- someserviceService_apply: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	someserviceService
  declaration: 	"public void apply(Event event)"
  id: 	someserviceService_apply
  methodBody: 	"if (history.get(event.getId()) != null) {
   return;
}
businessLogic.initEventHandlerMap();
Consumer<Event> handler = businessLogic.getHandlerMap().computeIfAbsent(event.getClass(), k -> this::ignoreEvent);
handler.accept(event);
history.put(event.getId(), event);
publish(event);"
  modified: 	false
  modifiers: 	public
  name: 	apply
  paramsString: 	"Event event"
  returnType: 	void
  signature: 	"class/someserviceService/method/apply(Event)"

- someserviceService_getPage: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	someserviceService
  declaration: 	"public String getPage(Request request, Response response)"
  id: 	someserviceService_getPage
  methodBody: 	"// no fulib
// add your page handling here
return getDemoPage(request, response);
"
  modified: 	false
  modifiers: 	public
  name: 	getPage
  paramsString: 	"Request request, Response response"
  returnType: 	String
  signature: 	"class/someserviceService/method/getPage(Request,Response)"

- someserviceService_getDemoPage: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	someserviceService
  declaration: 	"public String getDemoPage(Request request, Response response)"
  id: 	someserviceService_getDemoPage
  methodBody: 	"StringBuilder html = new StringBuilder();
String id = request.params(\"id\");
String event = request.queryParams(\"event\");



html.append(\"This is the Shop Service page \" + id + \"\n\");
return html.toString();"
  modified: 	false
  modifiers: 	public
  name: 	getDemoPage
  paramsString: 	"Request request, Response response"
  returnType: 	String
  signature: 	"class/someserviceService/method/getDemoPage(Request,Response)"

- someserviceService_ignoreEvent: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	someserviceService
  declaration: 	"private void ignoreEvent(Event event)"
  id: 	someserviceService_ignoreEvent
  methodBody: 	"// empty
"
  modified: 	false
  modifiers: 	private
  name: 	ignoreEvent
  paramsString: 	"Event event"
  returnType: 	void
  signature: 	"class/someserviceService/method/ignoreEvent(Event)"

- someserviceService_publish: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	someserviceService
  declaration: 	"public void publish(Event event)"
  id: 	someserviceService_publish
  methodBody: 	"String json = Yaml.encode(event);

try {
   HttpResponse<String> response = Unirest
         .post(\"http://localhost:42000/publish\")
         .body(json)
         .asString();
}
catch (UnirestException e) {
   e.printStackTrace();
}"
  modified: 	false
  modifiers: 	public
  name: 	publish
  paramsString: 	"Event event"
  returnType: 	void
  signature: 	"class/someserviceService/method/publish(Event)"

- someserviceService_postApply: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	someserviceService
  declaration: 	"private String postApply(Request req, Response res)"
  id: 	someserviceService_postApply
  methodBody: 	"      try {
         String body = req.body();
         Map<String, Object> map = Yaml.decode(body);
         for (Object value : map.values()) {
            Event event = (Event) value;
            apply(event);
         }
      }
      catch (Exception e) {
         Logger.getGlobal().log(Level.SEVERE, \"postApply failed\", e);
      }
      return \"apply done\";"
  modified: 	false
  modifiers: 	private
  name: 	postApply
  paramsString: 	"Request req, Response res"
  returnType: 	String
  signature: 	"class/someserviceService/method/postApply(Request,Response)"

- someserviceService_businessLogic: 	org.fulib.classmodel.AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	someserviceService
  id: 	someserviceService_businessLogic
  modified: 	false
  name: 	businessLogic
  other: 	someserviceBusinessLogic_service
  propertyStyle: 	Bean

- box_id: 	org.fulib.classmodel.Attribute
  clazz: 	box
  id: 	Box_id
  modified: 	false
  name: 	id
  propertyStyle: 	Bean
  type: 	String
  typeSignature: 	String

- box_product: 	org.fulib.classmodel.Attribute
  clazz: 	box
  id: 	Box_product
  modified: 	false
  name: 	product
  propertyStyle: 	Bean
  type: 	String
  typeSignature: 	String

- box_place: 	org.fulib.classmodel.Attribute
  clazz: 	box
  id: 	Box_place
  modified: 	false
  name: 	place
  propertyStyle: 	Bean
  type: 	String
  typeSignature: 	String

