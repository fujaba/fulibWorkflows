- c: 	org.fulib.classmodel.ClassModel
  classes: 	testSomeEventStorming
  defaultCollectionType: 	c1
  defaultPropertyStyle: 	Bean
  defaultRoleType: 	"java.util.ArrayList<%s>"
  mainJavaDir: 	"test/src/test/java"
  packageName: 	uks.debuggen.studyright
  packageSrcFolder: 	"test/src/test/java/uks/debuggen/studyright"

- testSomeEventStorming: 	org.fulib.classmodel.Clazz
  attributes: 	testSomeEventStorming_eventBroker 	testSomeEventStorming_spark 	testSomeEventStorming_eventQueue 	testSomeEventStorming_history 	testSomeEventStorming_port
  importList: 	"import org.junit.Test;" 	"import java.util.LinkedHashMap;" 	"import java.util.Map;" 	"import spark.Request;" 	"import spark.Response;" 	"import spark.Service;" 	"import java.util.concurrent.ExecutorService;" 	"import java.util.concurrent.Executors;" 	"import java.util.concurrent.LinkedBlockingQueue;" 	"import static org.assertj.core.api.Assertions.assertThat;" 	"import org.fulib.yaml.Yaml;" 	"import org.fulib.yaml.YamlIdMap;" 	"import java.util.concurrent.TimeUnit;" 	"import java.util.logging.Level;" 	"import java.util.logging.Logger;" 	"import uks.debuggen.studyright.events.*;" 	"import uks.debuggen.studyright.StudyRight.StudyRightService;" 	"import com.mashape.unirest.http.HttpResponse;" 	"import com.mashape.unirest.http.Unirest;" 	"import com.mashape.unirest.http.exceptions.UnirestException;" 	"import static com.codeborne.selenide.Selenide.open;" 	"import static com.codeborne.selenide.Selenide.$;" 	"import static com.codeborne.selenide.Condition.text;" 	"import static com.codeborne.selenide.Condition.matchText;" 	"import com.codeborne.selenide.SelenideElement;"
  imports: 	"import org.junit.Test;" 	"import java.util.LinkedHashMap;" 	"import java.util.Map;" 	"import spark.Request;" 	"import spark.Response;" 	"import spark.Service;" 	"import java.util.concurrent.ExecutorService;" 	"import java.util.concurrent.Executors;" 	"import java.util.concurrent.LinkedBlockingQueue;" 	"import static org.assertj.core.api.Assertions.assertThat;" 	"import org.fulib.yaml.Yaml;" 	"import org.fulib.yaml.YamlIdMap;" 	"import java.util.concurrent.TimeUnit;" 	"import java.util.logging.Level;" 	"import java.util.logging.Logger;" 	"import uks.debuggen.studyright.events.*;" 	"import uks.debuggen.studyright.StudyRight.StudyRightService;" 	"import com.mashape.unirest.http.HttpResponse;" 	"import com.mashape.unirest.http.Unirest;" 	"import com.mashape.unirest.http.exceptions.UnirestException;" 	"import static com.codeborne.selenide.Selenide.open;" 	"import static com.codeborne.selenide.Selenide.$;" 	"import static com.codeborne.selenide.Condition.text;" 	"import static com.codeborne.selenide.Condition.matchText;" 	"import com.codeborne.selenide.SelenideElement;"
  methods: 	testSomeEventStorming_start 	testSomeEventStorming_postApply 	testSomeEventStorming_subscribeAndLoadOldEvents 	testSomeEventStorming_waitForEvent 	testSomeEventStorming_SomeEventStorming 	testSomeEventStorming_publish
  model: 	c
  modified: 	false
  name: 	TestSomeEventStorming
  propertyStyle: 	Bean

- c1: 	org.fulib.classmodel.CollectionType
  implClass: 	class java.util.ArrayList
  implTemplate: 	"java.util.ArrayList<%s>"
  itf: 	org.fulib.classmodel.CollectionInterface.List
  qualifiedImplName: 	java.util.ArrayList
  simpleImplName: 	ArrayList

- testSomeEventStorming_eventBroker: 	org.fulib.classmodel.Attribute
  clazz: 	testSomeEventStorming
  id: 	TestSomeEventStorming_eventBroker
  modified: 	false
  name: 	eventBroker
  propertyStyle: 	Bean
  type: 	EventBroker
  typeSignature: 	EventBroker

- testSomeEventStorming_spark: 	org.fulib.classmodel.Attribute
  clazz: 	testSomeEventStorming
  id: 	TestSomeEventStorming_spark
  modified: 	false
  name: 	spark
  propertyStyle: 	Bean
  type: 	Service
  typeSignature: 	Service

- testSomeEventStorming_eventQueue: 	org.fulib.classmodel.Attribute
  clazz: 	testSomeEventStorming
  id: 	TestSomeEventStorming_eventQueue
  modified: 	false
  name: 	eventQueue
  propertyStyle: 	Bean
  type: 	"LinkedBlockingQueue<Event>"
  typeSignature: 	"LinkedBlockingQueue<Event>"

- testSomeEventStorming_history: 	org.fulib.classmodel.Attribute
  clazz: 	testSomeEventStorming
  id: 	TestSomeEventStorming_history
  modified: 	false
  name: 	history
  propertyStyle: 	Bean
  type: 	"LinkedHashMap<String, Event>"
  typeSignature: 	"LinkedHashMap<String,Event>"

- testSomeEventStorming_port: 	org.fulib.classmodel.Attribute
  clazz: 	testSomeEventStorming
  id: 	TestSomeEventStorming_port
  modified: 	false
  name: 	port
  propertyStyle: 	Bean
  type: 	int
  typeSignature: 	int

- testSomeEventStorming_start: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	testSomeEventStorming
  declaration: 	"public void start()"
  id: 	TestSomeEventStorming_start
  methodBody: 	"      Unirest.setTimeouts(3*60*1000, 3*60*1000);
      eventQueue = new LinkedBlockingQueue<Event>();
      history  = new LinkedHashMap<>();
      port = 41999;
      ExecutorService executor = Executors.newSingleThreadExecutor();
      spark = Service.ignite();
      spark.port(port);
      spark.post(\"/apply\", (req, res) -> executor.submit(() -> this.postApply(req, res)).get());
      executor.submit(() -> System.err.println(\"test executor works\"));
      executor.submit(this::subscribeAndLoadOldEvents);
      executor.submit(() -> System.err.println(\"test executor has done subscribeAndLoadOldEvents\"));"
  modified: 	false
  modifiers: 	public
  name: 	start
  paramsString: 	""
  returnType: 	void
  signature: 	"class/TestSomeEventStorming/method/start()"

- testSomeEventStorming_postApply: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	testSomeEventStorming
  declaration: 	"private String postApply(Request req, Response res)"
  id: 	TestSomeEventStorming_postApply
  methodBody: 	"      String body = req.body();
      try {
         YamlIdMap idMap = new YamlIdMap(Event.class.getPackageName());
         idMap.decode(body);
         Map<String, Object> map = idMap.getObjIdMap();
         for (Object value : map.values()) {
            Event event = (Event) value;
            eventQueue.put(event);
         }
      } catch (Exception e) {
         String message = e.getMessage();
         if (message.contains(\"ReflectorMap could not find class description\")) {
            Logger.getGlobal().info(\"post apply ignores unknown event \" + body);
         } else {
            Logger.getGlobal().log(Level.SEVERE, \"postApply failed\", e);
         }
      }
      return \"apply done\";"
  modified: 	false
  modifiers: 	private
  name: 	postApply
  paramsString: 	"Request req, Response res"
  returnType: 	String
  signature: 	"class/TestSomeEventStorming/method/postApply(Request,Response)"

- testSomeEventStorming_subscribeAndLoadOldEvents: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	testSomeEventStorming
  declaration: 	"private void subscribeAndLoadOldEvents()"
  id: 	TestSomeEventStorming_subscribeAndLoadOldEvents
  methodBody: 	"      ServiceSubscribed serviceSubscribed = new ServiceSubscribed()
            .setServiceUrl(String.format(\"http://localhost:%d/apply\", port));
      String json = Yaml.encodeSimple(serviceSubscribed);
      try {
         String url = \"http://localhost:42000/subscribe\";
         HttpResponse<String> response = Unirest.post(url).body(json).asString();
         String body = response.getBody();
         YamlIdMap idMap = new YamlIdMap(Event.class.getPackageName());
         idMap.decode(body);
         Map<String, Object> objectMap = idMap.getObjIdMap();
         for (Object obj : objectMap.values()) {
            Event event = (Event) obj;
            eventQueue.put(event);
         }
      } catch (Exception e) {
         e.printStackTrace();
      }"
  modified: 	false
  modifiers: 	private
  name: 	subscribeAndLoadOldEvents
  paramsString: 	""
  returnType: 	void
  signature: 	"class/TestSomeEventStorming/method/subscribeAndLoadOldEvents()"

- testSomeEventStorming_waitForEvent: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	testSomeEventStorming
  declaration: 	"public Event waitForEvent(String id)"
  id: 	TestSomeEventStorming_waitForEvent
  methodBody: 	"      while (true) {
         Event e = history.get(id);

         if (e != null) {
            return e;
         }

         try {
            e = eventQueue.poll(Configuration.timeout, TimeUnit.MILLISECONDS);
         }
         catch (Exception x) {
            throw new RuntimeException(x);
         }

         if (e == null) {
            throw new RuntimeException(\"event timeout waiting for \" + id);
         }

         System.err.println(\"Test got event \" + e.getId());
         history.put(e.getId(), e);
      }"
  modified: 	false
  modifiers: 	public
  name: 	waitForEvent
  paramsString: 	"String id"
  returnType: 	Event
  signature: 	"class/TestSomeEventStorming/method/waitForEvent(String)"

- testSomeEventStorming_SomeEventStorming: 	org.fulib.classmodel.FMethod
  annotations: 	"@Test"
  clazz: 	testSomeEventStorming
  declaration: 	"@Test
public void SomeEventStorming()"
  id: 	TestSomeEventStorming_SomeEventStorming
  methodBody: 	"// start the event broker
eventBroker = new EventBroker();
eventBroker.start();

this.start();
waitForEvent(\"\" + port);

// start service
StudyRightService studyRight = new StudyRightService();
studyRight.start();
waitForEvent(\"42400\");
SelenideElement pre;
LinkedHashMap<String, Object> modelMap;

// workflow working smoothly

// page 11:00
open(\"http://localhost:42400/page/11_00\");
$(\"#ok\").click();
waitForEvent(\"12:00\");

// check StudyRight
open(\"http://localhost:42400\");
for (DataEvent dataEvent : studyRight.getBuilder().getEventStore().values()) {
   studyRight.getBuilder().load(dataEvent.getBlockId());
}
modelMap = studyRight.getBuilder().getModel().getModelMap();
if (modelMap.values().size() > 0) {
   org.fulib.FulibTools.objectDiagrams().dumpSVG(\"tmp/studyRight12_00.svg\", modelMap.values());
}

open(\"http://localhost:42400\");
// check data note 12:00:00
UniversityBuilt e12_00_00 = (UniversityBuilt) waitForEvent(\"12:00:00\");
assertThat(e12_00_00.getRooms()).isEqualTo(\"[math, exam]\");
// check data note 12:00:01
RoomBuilt e12_00_01 = (RoomBuilt) waitForEvent(\"12:00:01\");
assertThat(e12_00_01.getCredits()).isEqualTo(\"23\");
assertThat(e12_00_01.getUni()).isEqualTo(\"StudyRight\");
assertThat(e12_00_01.getDoors()).isEqualTo(\"[modeling, algebra]\");
// check data note 12:00:02
RoomBuilt e12_00_02 = (RoomBuilt) waitForEvent(\"12:00:02\");
assertThat(e12_00_02.getUni()).isEqualTo(\"StudyRight\");
assertThat(e12_00_02.getCredits()).isEqualTo(\"42\");
assertThat(e12_00_02.getDoors()).isEqualTo(\"[math, algebra, exam]\");
// check data note 12:00:03
RoomBuilt e12_00_03 = (RoomBuilt) waitForEvent(\"12:00:03\");
assertThat(e12_00_03.getUni()).isEqualTo(\"StudyRight\");
assertThat(e12_00_03.getCredits()).isEqualTo(\"12\");
// check data note 12:00:04
RoomBuilt e12_00_04 = (RoomBuilt) waitForEvent(\"12:00:04\");
assertThat(e12_00_04.getCredits()).isEqualTo(\"0\");
assertThat(e12_00_04.getUni()).isEqualTo(\"StudyRight\");
// check data note 12:00:05
StudentBuilt e12_00_05 = (StudentBuilt) waitForEvent(\"12:00:05\");
assertThat(e12_00_05.getName()).isEqualTo(\"Carli\");
assertThat(e12_00_05.getBirthYear()).isEqualTo(\"1970\");
assertThat(e12_00_05.getStudentId()).isEqualTo(\"stud42\");

// create FindToursCommand: find tours 12:01
FindToursCommand e1201 = new FindToursCommand();
e1201.setId(\"12:01\");
publish(e1201);
waitForEvent(\"12:01\");

// check StudyRight
open(\"http://localhost:42400\");
for (DataEvent dataEvent : studyRight.getBuilder().getEventStore().values()) {
   studyRight.getBuilder().load(dataEvent.getBlockId());
}
modelMap = studyRight.getBuilder().getModel().getModelMap();
if (modelMap.values().size() > 0) {
   org.fulib.FulibTools.objectDiagrams().dumpSVG(\"tmp/studyRight12_01.svg\", modelMap.values());
}

open(\"http://localhost:42400\");
// check data note 12:01:00
TourListBuilt e12_01_00 = (TourListBuilt) waitForEvent(\"12:01:00\");
// check data note 12:01:01
StopBuilt e12_01_01 = (StopBuilt) waitForEvent(\"12:01:01\");
assertThat(e12_01_01.getMotivation()).isEqualTo(\"77\");

// create VisitRoomCommand: visit room 12:02
VisitRoomCommand e1202 = new VisitRoomCommand();
e1202.setId(\"12:02\");
e1202.setRoom(\"math\");
e1202.setPreviousStop(\"s01\");
publish(e1202);
waitForEvent(\"12:02\");

// check StudyRight
open(\"http://localhost:42400\");
for (DataEvent dataEvent : studyRight.getBuilder().getEventStore().values()) {
   studyRight.getBuilder().load(dataEvent.getBlockId());
}
modelMap = studyRight.getBuilder().getModel().getModelMap();
if (modelMap.values().size() > 0) {
   org.fulib.FulibTools.objectDiagrams().dumpSVG(\"tmp/studyRight12_02.svg\", modelMap.values());
}

open(\"http://localhost:42400\");
// check data note 12:02:01
StopBuilt e12_02_01 = (StopBuilt) waitForEvent(\"12:02:01\");
assertThat(e12_02_01.getRoom()).isEqualTo(\"math\");
assertThat(e12_02_01.getMotivation()).isEqualTo(\"54\");
assertThat(e12_02_01.getPreviousStop()).isEqualTo(\"s01\");

// create VisitRoomCommand: visit room 12:03
VisitRoomCommand e1203 = new VisitRoomCommand();
e1203.setId(\"12:03\");
e1203.setRoom(\"algebra\");
e1203.setPreviousStop(\"s02\");
publish(e1203);
waitForEvent(\"12:03\");

// check StudyRight
open(\"http://localhost:42400\");
for (DataEvent dataEvent : studyRight.getBuilder().getEventStore().values()) {
   studyRight.getBuilder().load(dataEvent.getBlockId());
}
modelMap = studyRight.getBuilder().getModel().getModelMap();
if (modelMap.values().size() > 0) {
   org.fulib.FulibTools.objectDiagrams().dumpSVG(\"tmp/studyRight12_03.svg\", modelMap.values());
}

open(\"http://localhost:42400\");
// check data note 12:03:01
StopBuilt e12_03_01 = (StopBuilt) waitForEvent(\"12:03:01\");
assertThat(e12_03_01.getRoom()).isEqualTo(\"algebra\");
assertThat(e12_03_01.getPreviousStop()).isEqualTo(\"s02\");
assertThat(e12_03_01.getMotivation()).isEqualTo(\"42\");

// create VisitRoomCommand: visit room 12:04
VisitRoomCommand e1204 = new VisitRoomCommand();
e1204.setId(\"12:04\");
e1204.setRoom(\"modeling\");
e1204.setPreviousStop(\"s02\");
publish(e1204);
waitForEvent(\"12:04\");

// create VisitRoomCommand: visit room 12:05
VisitRoomCommand e1205 = new VisitRoomCommand();
e1205.setId(\"12:05\");
e1205.setPreviousStop(\"s03\");
e1205.setRoom(\"modeling\");
publish(e1205);
waitForEvent(\"12:05\");

// check StudyRight
open(\"http://localhost:42400\");
for (DataEvent dataEvent : studyRight.getBuilder().getEventStore().values()) {
   studyRight.getBuilder().load(dataEvent.getBlockId());
}
modelMap = studyRight.getBuilder().getModel().getModelMap();
if (modelMap.values().size() > 0) {
   org.fulib.FulibTools.objectDiagrams().dumpSVG(\"tmp/studyRight12_05.svg\", modelMap.values());
}

open(\"http://localhost:42400\");
// check data note 12:05:01
StopBuilt e12_05_01 = (StopBuilt) waitForEvent(\"12:05:01\");
assertThat(e12_05_01.getRoom()).isEqualTo(\"modeling\");
assertThat(e12_05_01.getPreviousStop()).isEqualTo(\"s03\");
assertThat(e12_05_01.getMotivation()).isEqualTo(\"0\");

// create VisitRoomCommand: visit room 12:06
VisitRoomCommand e1206 = new VisitRoomCommand();
e1206.setId(\"12:06\");
e1206.setPreviousStop(\"s03\");
e1206.setRoom(\"math\");
publish(e1206);
waitForEvent(\"12:06\");

// create VisitRoomCommand: visit room 12:07
VisitRoomCommand e1207 = new VisitRoomCommand();
e1207.setId(\"12:07\");
e1207.setPreviousStop(\"s05\");
e1207.setRoom(\"math\");
publish(e1207);
waitForEvent(\"12:07\");

// check StudyRight
open(\"http://localhost:42400\");
for (DataEvent dataEvent : studyRight.getBuilder().getEventStore().values()) {
   studyRight.getBuilder().load(dataEvent.getBlockId());
}
modelMap = studyRight.getBuilder().getModel().getModelMap();
if (modelMap.values().size() > 0) {
   org.fulib.FulibTools.objectDiagrams().dumpSVG(\"tmp/studyRight12_07.svg\", modelMap.values());
}

open(\"http://localhost:42400\");
// check data note 12:07:01
StopBuilt e12_07_01 = (StopBuilt) waitForEvent(\"12:07:01\");
assertThat(e12_07_01.getRoom()).isEqualTo(\"math\");
assertThat(e12_07_01.getPreviousStop()).isEqualTo(\"s05\");
assertThat(e12_07_01.getMotivation()).isEqualTo(\"-23\");

// create VisitRoomCommand: visit room 12:08
VisitRoomCommand e1208 = new VisitRoomCommand();
e1208.setId(\"12:08\");
e1208.setPreviousStop(\"s05\");
e1208.setRoom(\"exam\");
publish(e1208);
waitForEvent(\"12:08\");

// check StudyRight
open(\"http://localhost:42400\");
for (DataEvent dataEvent : studyRight.getBuilder().getEventStore().values()) {
   studyRight.getBuilder().load(dataEvent.getBlockId());
}
modelMap = studyRight.getBuilder().getModel().getModelMap();
if (modelMap.values().size() > 0) {
   org.fulib.FulibTools.objectDiagrams().dumpSVG(\"tmp/studyRight12_08.svg\", modelMap.values());
}

open(\"http://localhost:42400\");
// check data note 12:08:01
StopBuilt e12_08_01 = (StopBuilt) waitForEvent(\"12:08:01\");
assertThat(e12_08_01.getRoom()).isEqualTo(\"exam\");
assertThat(e12_08_01.getPreviousStop()).isEqualTo(\"s05\");
assertThat(e12_08_01.getMotivation()).isEqualTo(\"0\");

// create CollectTourStopsCommand: collect tour stops 12:09
CollectTourStopsCommand e1209 = new CollectTourStopsCommand();
e1209.setId(\"12:09\");
e1209.setStop(\"s08\");
e1209.setTour(\"tour1\");
publish(e1209);
waitForEvent(\"12:09\");

// check StudyRight
open(\"http://localhost:42400\");
for (DataEvent dataEvent : studyRight.getBuilder().getEventStore().values()) {
   studyRight.getBuilder().load(dataEvent.getBlockId());
}
modelMap = studyRight.getBuilder().getModel().getModelMap();
if (modelMap.values().size() > 0) {
   org.fulib.FulibTools.objectDiagrams().dumpSVG(\"tmp/studyRight12_09.svg\", modelMap.values());
}

open(\"http://localhost:42400\");
// check data note 12:09:02
TourBuilt e12_09_02 = (TourBuilt) waitForEvent(\"12:09:02\");
assertThat(e12_09_02.getTourList()).isEqualTo(\"allTours\");
assertThat(e12_09_02.getStops()).isEqualTo(\"exam\");

// create CollectTourStopsCommand: collect tour stops 12:10
CollectTourStopsCommand e1210 = new CollectTourStopsCommand();
e1210.setId(\"12:10\");
e1210.setStop(\"s05\");
e1210.setTour(\"tour1\");
publish(e1210);
waitForEvent(\"12:10\");

// check StudyRight
open(\"http://localhost:42400\");
for (DataEvent dataEvent : studyRight.getBuilder().getEventStore().values()) {
   studyRight.getBuilder().load(dataEvent.getBlockId());
}
modelMap = studyRight.getBuilder().getModel().getModelMap();
if (modelMap.values().size() > 0) {
   org.fulib.FulibTools.objectDiagrams().dumpSVG(\"tmp/studyRight12_10.svg\", modelMap.values());
}

open(\"http://localhost:42400\");
// check data note 12:10:01
TourBuilt e12_10_01 = (TourBuilt) waitForEvent(\"12:10:01\");
assertThat(e12_10_01.getStops()).isEqualTo(\"modeling exam\");

// create CollectTourStopsCommand: collect tour stops 12:11
CollectTourStopsCommand e1211 = new CollectTourStopsCommand();
e1211.setId(\"12:11\");
e1211.setStop(\"s03\");
e1211.setTour(\"tour1\");
publish(e1211);
waitForEvent(\"12:11\");

// check StudyRight
open(\"http://localhost:42400\");
for (DataEvent dataEvent : studyRight.getBuilder().getEventStore().values()) {
   studyRight.getBuilder().load(dataEvent.getBlockId());
}
modelMap = studyRight.getBuilder().getModel().getModelMap();
if (modelMap.values().size() > 0) {
   org.fulib.FulibTools.objectDiagrams().dumpSVG(\"tmp/studyRight12_11.svg\", modelMap.values());
}

open(\"http://localhost:42400\");
// check data note 12:11:01
TourBuilt e12_11_01 = (TourBuilt) waitForEvent(\"12:11:01\");
assertThat(e12_11_01.getStops()).isEqualTo(\"algebra modeling exam\");

// create CollectTourStopsCommand: collect tour stops 12:12
CollectTourStopsCommand e1212 = new CollectTourStopsCommand();
e1212.setId(\"12:12\");
e1212.setStop(\"s02\");
e1212.setTour(\"tour1\");
publish(e1212);
waitForEvent(\"12:12\");

// check StudyRight
open(\"http://localhost:42400\");
for (DataEvent dataEvent : studyRight.getBuilder().getEventStore().values()) {
   studyRight.getBuilder().load(dataEvent.getBlockId());
}
modelMap = studyRight.getBuilder().getModel().getModelMap();
if (modelMap.values().size() > 0) {
   org.fulib.FulibTools.objectDiagrams().dumpSVG(\"tmp/studyRight12_12.svg\", modelMap.values());
}

open(\"http://localhost:42400\");
// check data note 12:12:01
TourBuilt e12_12_01 = (TourBuilt) waitForEvent(\"12:12:01\");
assertThat(e12_12_01.getStops()).isEqualTo(\"math algebra modeling exam\");

// page 12:13
open(\"http://localhost:42400/page/12_13\");
try {
   Thread.sleep(3000);
} catch (Exception e) {
}
eventBroker.stop();
spark.stop();
studyRight.stop();

System.err.println(\"SomeEventStorming completed good and gracefully\");
"
  modified: 	false
  modifiers: 	public
  name: 	SomeEventStorming
  paramsString: 	""
  returnType: 	void
  signature: 	"class/TestSomeEventStorming/method/SomeEventStorming()"

- testSomeEventStorming_publish: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	testSomeEventStorming
  declaration: 	"public void publish(Event event)"
  id: 	TestSomeEventStorming_publish
  methodBody: 	"String yaml = Yaml.encodeSimple(event);

try {
   HttpResponse<String> response = Unirest.post(\"http://localhost:42000/publish\")
         .body(yaml)
         .asString();
         Thread.sleep(200);
}
catch (Exception e) {
   e.printStackTrace();
}"
  modified: 	false
  modifiers: 	public
  name: 	publish
  paramsString: 	"Event event"
  returnType: 	void
  signature: 	"class/TestSomeEventStorming/method/publish(Event)"

