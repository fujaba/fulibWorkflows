- c: 	org.fulib.classmodel.ClassModel
  classes: 	testSomeEventStorming
  defaultCollectionType: 	c1
  defaultPropertyStyle: 	Bean
  defaultRoleType: 	"java.util.ArrayList<%s>"
  mainJavaDir: 	"test/src/test/java"
  packageName: 	uks.debuggen.microshop
  packageSrcFolder: 	"test/src/test/java/uks/debuggen/microshop"

- testSomeEventStorming: 	org.fulib.classmodel.Clazz
  attributes: 	testSomeEventStorming_eventBroker
  importList: 	"import org.junit.Test;" 	"import java.util.LinkedHashMap;" 	"import uks.debuggen.microshop.events.*;" 	"import uks.debuggen.microshop.Warehouse.WarehouseService;" 	"import org.fulib.yaml.Yaml;" 	"import com.mashape.unirest.http.HttpResponse;" 	"import com.mashape.unirest.http.Unirest;" 	"import com.mashape.unirest.http.exceptions.UnirestException;" 	"import static com.codeborne.selenide.Selenide.open;" 	"import static com.codeborne.selenide.Selenide.$;" 	"import static com.codeborne.selenide.Condition.text;" 	"import static com.codeborne.selenide.Condition.matchText;" 	"import com.codeborne.selenide.SelenideElement;"
  imports: 	"import org.junit.Test;" 	"import java.util.LinkedHashMap;" 	"import uks.debuggen.microshop.events.*;" 	"import uks.debuggen.microshop.Warehouse.WarehouseService;" 	"import org.fulib.yaml.Yaml;" 	"import com.mashape.unirest.http.HttpResponse;" 	"import com.mashape.unirest.http.Unirest;" 	"import com.mashape.unirest.http.exceptions.UnirestException;" 	"import static com.codeborne.selenide.Selenide.open;" 	"import static com.codeborne.selenide.Selenide.$;" 	"import static com.codeborne.selenide.Condition.text;" 	"import static com.codeborne.selenide.Condition.matchText;" 	"import com.codeborne.selenide.SelenideElement;"
  methods: 	testSomeEventStorming_SomeEventStorming 	testSomeEventStorming_publish
  model: 	c
  modified: 	false
  name: 	TestSomeEventStorming
  propertyStyle: 	Bean

- c1: 	org.fulib.classmodel.CollectionType
  implClass: 	class java.util.ArrayList
  implTemplate: 	"java.util.ArrayList<%s>"
  itf: 	org.fulib.classmodel.CollectionInterface.List
  qualifiedImplName: 	java.util.ArrayList
  simpleImplName: 	ArrayList

- testSomeEventStorming_eventBroker: 	org.fulib.classmodel.Attribute
  clazz: 	testSomeEventStorming
  id: 	TestSomeEventStorming_eventBroker
  modified: 	false
  name: 	eventBroker
  propertyStyle: 	Bean
  type: 	EventBroker
  typeSignature: 	EventBroker

- testSomeEventStorming_SomeEventStorming: 	org.fulib.classmodel.FMethod
  annotations: 	"@Test"
  clazz: 	testSomeEventStorming
  declaration: 	"@Test
public void SomeEventStorming()"
  id: 	TestSomeEventStorming_SomeEventStorming
  methodBody: 	"// start the event broker
eventBroker = new EventBroker();
eventBroker.start();

// start service
WarehouseService warehouse = new WarehouseService();
warehouse.start();
try {
   Thread.sleep(1500);
} catch (Exception e) {
}

open(\"http://localhost:42000\");
$(\"body\").shouldHave(text(\"event broker\"));

SelenideElement pre = $(\"pre\");
pre.shouldHave(text(\"http://localhost:42001/apply\"));
LinkedHashMap<String, Object> modelMap;

// workflow SmoothCase

// create StoreProductCommand: store product
StoreProductCommand e1201 = new StoreProductCommand();
e1201.setId(\"12:01\");
e1201.setBarcode(\"b001\");
e1201.setType(\"red shoes\");
e1201.setLocation(\"shelf 42\");
publish(e1201);

open(\"http://localhost:42000\");
pre = $(\"#history\");
pre.shouldHave(text(\"- 12_01:\"));

// check Warehouse
open(\"http://localhost:42001\");
pre = $(\"#history\");
pre.shouldHave(text(\"- 12_01:\"));
for (DataEvent dataEvent : warehouse.getBuilder().getEventStore().values()) {
   warehouse.getBuilder().load(dataEvent.getBlockId());
}
modelMap = warehouse.getBuilder().getModel().getModelMap();
if (modelMap.values().size() > 0) {
   org.fulib.FulibTools.objectDiagrams().dumpSVG(\"tmp/warehouse12_01.svg\", modelMap.values());
}

open(\"http://localhost:42001\");
// check data note 12:01:01
pre = $(\"#data\");
pre.shouldHave(text(\"- b001:\"));
pre.shouldHave(matchText(\"barcode:.*b001\"));
pre.shouldHave(matchText(\"content:.*\\"red shoes\\"\"));
pre.shouldHave(matchText(\"location:.*\\"shelf 42\\"\"));

// workflow OutOfStock
try {
   Thread.sleep(3000);
} catch (Exception e) {
}
eventBroker.stop();
warehouse.stop();

System.out.println();
"
  modified: 	false
  modifiers: 	public
  name: 	SomeEventStorming
  paramsString: 	""
  returnType: 	void
  signature: 	"class/TestSomeEventStorming/method/SomeEventStorming()"

- testSomeEventStorming_publish: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	testSomeEventStorming
  declaration: 	"public void publish(Event event)"
  id: 	TestSomeEventStorming_publish
  methodBody: 	"String yaml = Yaml.encodeSimple(event);

try {
   HttpResponse<String> response = Unirest.post(\"http://localhost:42000/publish\")
         .body(yaml)
         .asString();
         Thread.sleep(200);
}
catch (Exception e) {
   e.printStackTrace();
}"
  modified: 	false
  modifiers: 	public
  name: 	publish
  paramsString: 	"Event event"
  returnType: 	void
  signature: 	"class/TestSomeEventStorming/method/publish(Event)"

