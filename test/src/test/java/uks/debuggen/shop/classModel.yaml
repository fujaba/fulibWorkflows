- c: 	org.fulib.classmodel.ClassModel
  classes: 	testmonday
  defaultCollectionType: 	c1
  defaultPropertyStyle: 	Bean
  defaultRoleType: 	"java.util.ArrayList<%s>"
  mainJavaDir: 	"test/src/test/java"
  packageName: 	uks.debuggen.shop
  packageSrcFolder: 	"test/src/test/java/uks/debuggen/shop"

- testmonday: 	org.fulib.classmodel.Clazz
  attributes: 	testmonday_eventBroker
  importList: 	"import org.junit.Test;" 	"import uks.debuggen.shop.events.*;" 	"import uks.debuggen.shop.Shop.ShopService;" 	"import uks.debuggen.shop.Storage.StorageService;" 	"import org.fulib.yaml.Yaml;" 	"import com.mashape.unirest.http.HttpResponse;" 	"import com.mashape.unirest.http.Unirest;" 	"import com.mashape.unirest.http.exceptions.UnirestException;"
  imports: 	"import org.junit.Test;" 	"import uks.debuggen.shop.events.*;" 	"import uks.debuggen.shop.Shop.ShopService;" 	"import uks.debuggen.shop.Storage.StorageService;" 	"import org.fulib.yaml.Yaml;" 	"import com.mashape.unirest.http.HttpResponse;" 	"import com.mashape.unirest.http.Unirest;" 	"import com.mashape.unirest.http.exceptions.UnirestException;"
  methods: 	testmonday_monday 	testmonday_publish
  model: 	c
  modified: 	false
  name: 	Testmonday
  propertyStyle: 	Bean

- c1: 	org.fulib.classmodel.CollectionType
  implClass: 	class java.util.ArrayList
  implTemplate: 	"java.util.ArrayList<%s>"
  itf: 	org.fulib.classmodel.CollectionInterface.List
  qualifiedImplName: 	java.util.ArrayList
  simpleImplName: 	ArrayList

- testmonday_eventBroker: 	org.fulib.classmodel.Attribute
  clazz: 	testmonday
  id: 	Testmonday_eventBroker
  modified: 	false
  name: 	eventBroker
  propertyStyle: 	Bean
  type: 	EventBroker
  typeSignature: 	EventBroker

- testmonday_monday: 	org.fulib.classmodel.FMethod
  annotations: 	"@Test"
  clazz: 	testmonday
  declaration: 	"@Test
public void monday()"
  id: 	Testmonday_monday
  methodBody: 	"// start the event broker
eventBroker = new EventBroker();
eventBroker.start();

// start service
ShopService shop = new ShopService();
shop.start();

// start service
StorageService storage = new StorageService();
storage.start();

// create ProductStored: 12:00
ProductStored e1200 = new ProductStored();
e1200.setId(\"12:00\");
e1200.setBox(\"box23\");
e1200.setProduct(\"shoes\");
e1200.setPlace(\"shelf23\");
e1200.setUser(\"Bob\");
publish(e1200);

// create OrderRegistered: 13:00
OrderRegistered e1300 = new OrderRegistered();
e1300.setId(\"13:00\");
e1300.setProduct(\"shoes\");
e1300.setCustomer(\"Alice\");
e1300.setAddress(\"Wonderland 1\");
e1300.setUser(\"Alice\");
publish(e1300);

// create OrderPicked: 14:00
OrderPicked e1400 = new OrderPicked();
e1400.setId(\"14:00\");
e1400.setPickTask(\"pick1300\");
e1400.setBox(\"box23\");
e1400.setUser(\"Bob\");
publish(e1400);
System.out.println();
"
  modified: 	false
  modifiers: 	public
  name: 	monday
  paramsString: 	""
  returnType: 	void
  signature: 	"class/Testmonday/method/monday()"

- testmonday_publish: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	testmonday
  declaration: 	"public void publish(Event event)"
  id: 	Testmonday_publish
  methodBody: 	"String yaml = Yaml.encode(event);

try {
   HttpResponse<String> response = Unirest.post(\"http://localhost:42000/publish\")
         .body(yaml)
         .asString();
   System.out.println(response.getBody());
}
catch (UnirestException e) {
   e.printStackTrace();
}"
  modified: 	false
  modifiers: 	public
  name: 	publish
  paramsString: 	"Event event"
  returnType: 	void
  signature: 	"class/Testmonday/method/publish(Event)"

