- c: 	org.fulib.classmodel.ClassModel
  classes: 	testPartyApp
  defaultCollectionType: 	c1
  defaultPropertyStyle: 	Bean
  defaultRoleType: 	"java.util.ArrayList<%s>"
  mainJavaDir: 	"test/src/test/java"
  packageName: 	uks.debuggen.party2
  packageSrcFolder: 	"test/src/test/java/uks/debuggen/party2"

- testPartyApp: 	org.fulib.classmodel.Clazz
  attributes: 	testPartyApp_eventBroker 	testPartyApp_spark 	testPartyApp_eventQueue 	testPartyApp_history 	testPartyApp_port
  importList: 	"import org.junit.Test;" 	"import java.util.LinkedHashMap;" 	"import java.util.Map;" 	"import spark.Request;" 	"import spark.Response;" 	"import spark.Service;" 	"import java.util.concurrent.ExecutorService;" 	"import java.util.concurrent.Executors;" 	"import java.util.concurrent.LinkedBlockingQueue;" 	"import static org.assertj.core.api.Assertions.assertThat;" 	"import org.fulib.yaml.Yaml;" 	"import org.fulib.yaml.YamlIdMap;" 	"import java.util.concurrent.TimeUnit;" 	"import java.util.logging.Level;" 	"import java.util.logging.Logger;" 	"import uks.debuggen.party2.events.*;" 	"import uks.debuggen.party2.PartyApp.PartyAppService;" 	"import com.mashape.unirest.http.HttpResponse;" 	"import com.mashape.unirest.http.Unirest;" 	"import com.mashape.unirest.http.exceptions.UnirestException;" 	"import static com.codeborne.selenide.Selenide.open;" 	"import static com.codeborne.selenide.Selenide.$;" 	"import static com.codeborne.selenide.Condition.text;" 	"import static com.codeborne.selenide.Condition.matchText;" 	"import com.codeborne.selenide.SelenideElement;"
  imports: 	"import org.junit.Test;" 	"import java.util.LinkedHashMap;" 	"import java.util.Map;" 	"import spark.Request;" 	"import spark.Response;" 	"import spark.Service;" 	"import java.util.concurrent.ExecutorService;" 	"import java.util.concurrent.Executors;" 	"import java.util.concurrent.LinkedBlockingQueue;" 	"import static org.assertj.core.api.Assertions.assertThat;" 	"import org.fulib.yaml.Yaml;" 	"import org.fulib.yaml.YamlIdMap;" 	"import java.util.concurrent.TimeUnit;" 	"import java.util.logging.Level;" 	"import java.util.logging.Logger;" 	"import uks.debuggen.party2.events.*;" 	"import uks.debuggen.party2.PartyApp.PartyAppService;" 	"import com.mashape.unirest.http.HttpResponse;" 	"import com.mashape.unirest.http.Unirest;" 	"import com.mashape.unirest.http.exceptions.UnirestException;" 	"import static com.codeborne.selenide.Selenide.open;" 	"import static com.codeborne.selenide.Selenide.$;" 	"import static com.codeborne.selenide.Condition.text;" 	"import static com.codeborne.selenide.Condition.matchText;" 	"import com.codeborne.selenide.SelenideElement;"
  methods: 	testPartyApp_start 	testPartyApp_postApply 	testPartyApp_subscribeAndLoadOldEvents 	testPartyApp_waitForEvent 	testPartyApp_PartyApp 	testPartyApp_publish
  model: 	c
  modified: 	false
  name: 	TestPartyApp
  propertyStyle: 	Bean

- c1: 	org.fulib.classmodel.CollectionType
  implClass: 	class java.util.ArrayList
  implTemplate: 	"java.util.ArrayList<%s>"
  itf: 	org.fulib.classmodel.CollectionInterface.List
  qualifiedImplName: 	java.util.ArrayList
  simpleImplName: 	ArrayList

- testPartyApp_eventBroker: 	org.fulib.classmodel.Attribute
  clazz: 	testPartyApp
  id: 	TestPartyApp_eventBroker
  modified: 	false
  name: 	eventBroker
  propertyStyle: 	Bean
  type: 	EventBroker
  typeSignature: 	EventBroker

- testPartyApp_spark: 	org.fulib.classmodel.Attribute
  clazz: 	testPartyApp
  id: 	TestPartyApp_spark
  modified: 	false
  name: 	spark
  propertyStyle: 	Bean
  type: 	Service
  typeSignature: 	Service

- testPartyApp_eventQueue: 	org.fulib.classmodel.Attribute
  clazz: 	testPartyApp
  id: 	TestPartyApp_eventQueue
  modified: 	false
  name: 	eventQueue
  propertyStyle: 	Bean
  type: 	"LinkedBlockingQueue<Event>"
  typeSignature: 	"LinkedBlockingQueue<Event>"

- testPartyApp_history: 	org.fulib.classmodel.Attribute
  clazz: 	testPartyApp
  id: 	TestPartyApp_history
  modified: 	false
  name: 	history
  propertyStyle: 	Bean
  type: 	"LinkedHashMap<String, Event>"
  typeSignature: 	"LinkedHashMap<String,Event>"

- testPartyApp_port: 	org.fulib.classmodel.Attribute
  clazz: 	testPartyApp
  id: 	TestPartyApp_port
  modified: 	false
  name: 	port
  propertyStyle: 	Bean
  type: 	int
  typeSignature: 	int

- testPartyApp_start: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	testPartyApp
  declaration: 	"public void start()"
  id: 	TestPartyApp_start
  methodBody: 	"      Unirest.setTimeouts(3*60*1000, 3*60*1000);
      eventQueue = new LinkedBlockingQueue<Event>();
      history  = new LinkedHashMap<>();
      port = 41999;
      ExecutorService executor = Executors.newSingleThreadExecutor();
      spark = Service.ignite();
      spark.port(port);
      spark.post(\"/apply\", (req, res) -> executor.submit(() -> this.postApply(req, res)).get());
      executor.submit(() -> System.err.println(\"test executor works\"));
      executor.submit(this::subscribeAndLoadOldEvents);
      executor.submit(() -> System.err.println(\"test executor has done subscribeAndLoadOldEvents\"));"
  modified: 	false
  modifiers: 	public
  name: 	start
  paramsString: 	""
  returnType: 	void
  signature: 	"class/TestPartyApp/method/start()"

- testPartyApp_postApply: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	testPartyApp
  declaration: 	"private String postApply(Request req, Response res)"
  id: 	TestPartyApp_postApply
  methodBody: 	"      String body = req.body();
      try {
         YamlIdMap idMap = new YamlIdMap(Event.class.getPackageName());
         idMap.decode(body);
         Map<String, Object> map = idMap.getObjIdMap();
         for (Object value : map.values()) {
            Event event = (Event) value;
            eventQueue.put(event);
         }
      } catch (Exception e) {
         String message = e.getMessage();
         if (message.contains(\"ReflectorMap could not find class description\")) {
            Logger.getGlobal().info(\"post apply ignores unknown event \" + body);
         } else {
            Logger.getGlobal().log(Level.SEVERE, \"postApply failed\", e);
         }
      }
      return \"apply done\";"
  modified: 	false
  modifiers: 	private
  name: 	postApply
  paramsString: 	"Request req, Response res"
  returnType: 	String
  signature: 	"class/TestPartyApp/method/postApply(Request,Response)"

- testPartyApp_subscribeAndLoadOldEvents: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	testPartyApp
  declaration: 	"private void subscribeAndLoadOldEvents()"
  id: 	TestPartyApp_subscribeAndLoadOldEvents
  methodBody: 	"      ServiceSubscribed serviceSubscribed = new ServiceSubscribed()
            .setServiceUrl(String.format(\"http://localhost:%d/apply\", port));
      String json = Yaml.encodeSimple(serviceSubscribed);
      try {
         String url = \"http://localhost:42000/subscribe\";
         HttpResponse<String> response = Unirest.post(url).body(json).asString();
         String body = response.getBody();
         YamlIdMap idMap = new YamlIdMap(Event.class.getPackageName());
         idMap.decode(body);
         Map<String, Object> objectMap = idMap.getObjIdMap();
         for (Object obj : objectMap.values()) {
            Event event = (Event) obj;
            eventQueue.put(event);
         }
         System.err.println(\"Test has completed subscribeAndLoadOldEvents\");
      } catch (Exception e) {
         e.printStackTrace();
      }"
  modified: 	false
  modifiers: 	private
  name: 	subscribeAndLoadOldEvents
  paramsString: 	""
  returnType: 	void
  signature: 	"class/TestPartyApp/method/subscribeAndLoadOldEvents()"

- testPartyApp_waitForEvent: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	testPartyApp
  declaration: 	"public Event waitForEvent(String id)"
  id: 	TestPartyApp_waitForEvent
  methodBody: 	"      while (true) {
         Event e = history.get(id);

         if (e != null) {
            return e;
         }

         try {
            e = eventQueue.poll(Configuration.timeout, TimeUnit.MILLISECONDS);
         }
         catch (Exception x) {
            throw new RuntimeException(x);
         }

         if (e == null) {
            throw new RuntimeException(\"event timeout waiting for \" + id);
         }

         System.err.println(\"Test got event \" + e.getId());
         history.put(e.getId(), e);
      }"
  modified: 	false
  modifiers: 	public
  name: 	waitForEvent
  paramsString: 	"String id"
  returnType: 	Event
  signature: 	"class/TestPartyApp/method/waitForEvent(String)"

- testPartyApp_PartyApp: 	org.fulib.classmodel.FMethod
  annotations: 	"@Test"
  clazz: 	testPartyApp
  declaration: 	"@Test
public void PartyApp()"
  id: 	TestPartyApp_PartyApp
  methodBody: 	"// start the event broker
eventBroker = new EventBroker();
eventBroker.start();

this.start();
waitForEvent(\"\" + port);

// start service
PartyAppService partyApp = new PartyAppService();
partyApp.start();
waitForEvent(\"42001\");
SelenideElement pre;
LinkedHashMap<String, Object> modelMap;

// workflow Overview

// create UserRegisteredEvent: user registered 12:00
UserRegisteredEvent e1200 = new UserRegisteredEvent();
e1200.setId(\"12:00\");
publish(e1200);
waitForEvent(\"12:00\");

// create LoginSucceededEvent: login succeeded 13:00
LoginSucceededEvent e1300 = new LoginSucceededEvent();
e1300.setId(\"13:00\");
publish(e1300);
waitForEvent(\"13:00\");

// create PartyCreatedEvent: party created 14:00
PartyCreatedEvent e1400 = new PartyCreatedEvent();
e1400.setId(\"14:00\");
publish(e1400);
waitForEvent(\"14:00\");

// create ItemBookedEvent: item booked 15:00
ItemBookedEvent e1500 = new ItemBookedEvent();
e1500.setId(\"15:00\");
publish(e1500);
waitForEvent(\"15:00\");

// create SaldiComputedEvent: saldi computed 16:00
SaldiComputedEvent e1600 = new SaldiComputedEvent();
e1600.setId(\"16:00\");
publish(e1600);
waitForEvent(\"16:00\");

// workflow RegisterNewUser

// page 12:00
open(\"http://localhost:42001/page/12_00\");
$(\"#name\").setValue(\"Alice\");
$(\"#ok\").click();
waitForEvent(\"12:01\");

// check PartyApp
open(\"http://localhost:42001\");
for (DataEvent dataEvent : partyApp.getBuilder().getEventStore().values()) {
   partyApp.getBuilder().load(dataEvent.getBlockId());
}
modelMap = partyApp.getBuilder().getModel().getModelMap();
if (modelMap.values().size() > 0) {
   org.fulib.FulibTools.objectDiagrams().dumpSVG(\"tmp/partyApp12_01.svg\", modelMap.values());
}

open(\"http://localhost:42001\");

// page 12:02
open(\"http://localhost:42001/page/12_02\");
$(\"#email\").setValue(\"a@b.de\");
$(\"#ok\").click();
waitForEvent(\"12:03\");

// check PartyApp
open(\"http://localhost:42001\");
for (DataEvent dataEvent : partyApp.getBuilder().getEventStore().values()) {
   partyApp.getBuilder().load(dataEvent.getBlockId());
}
modelMap = partyApp.getBuilder().getModel().getModelMap();
if (modelMap.values().size() > 0) {
   org.fulib.FulibTools.objectDiagrams().dumpSVG(\"tmp/partyApp12_03.svg\", modelMap.values());
}

open(\"http://localhost:42001\");

// page 12:04
open(\"http://localhost:42001/page/12_04\");
$(\"#password\").setValue(\"secret\");
$(\"#ok\").click();
waitForEvent(\"12:05\");

// check PartyApp
open(\"http://localhost:42001\");
for (DataEvent dataEvent : partyApp.getBuilder().getEventStore().values()) {
   partyApp.getBuilder().load(dataEvent.getBlockId());
}
modelMap = partyApp.getBuilder().getModel().getModelMap();
if (modelMap.values().size() > 0) {
   org.fulib.FulibTools.objectDiagrams().dumpSVG(\"tmp/partyApp12_05.svg\", modelMap.values());
}

open(\"http://localhost:42001\");
// check data note 12:05:02
UserBuilt e12_05_02 = (UserBuilt) waitForEvent(\"12:05:02\");
assertThat(e12_05_02.getName()).isEqualTo(\"Alice\");
assertThat(e12_05_02.getEmail()).isEqualTo(\"a@b.de\");
assertThat(e12_05_02.getPassword()).isEqualTo(\"secret\");

// page 12:06
open(\"http://localhost:42001/page/12_06\");
$(\"#party\").setValue(\"SE BBQ\");
$(\"#ok\").click();
waitForEvent(\"12:07\");

// workflow LoginOldUser

// page 13:00
open(\"http://localhost:42001/page/13_00\");
$(\"#name\").setValue(\"Alice\");
$(\"#ok\").click();
waitForEvent(\"13:01\");

// check PartyApp
open(\"http://localhost:42001\");
for (DataEvent dataEvent : partyApp.getBuilder().getEventStore().values()) {
   partyApp.getBuilder().load(dataEvent.getBlockId());
}
modelMap = partyApp.getBuilder().getModel().getModelMap();
if (modelMap.values().size() > 0) {
   org.fulib.FulibTools.objectDiagrams().dumpSVG(\"tmp/partyApp13_01.svg\", modelMap.values());
}

open(\"http://localhost:42001\");

// page 13:02
open(\"http://localhost:42001/page/13_02\");
$(\"#password\").setValue(\"secret\");
$(\"#ok\").click();
waitForEvent(\"13:03\");

// check PartyApp
open(\"http://localhost:42001\");
for (DataEvent dataEvent : partyApp.getBuilder().getEventStore().values()) {
   partyApp.getBuilder().load(dataEvent.getBlockId());
}
modelMap = partyApp.getBuilder().getModel().getModelMap();
if (modelMap.values().size() > 0) {
   org.fulib.FulibTools.objectDiagrams().dumpSVG(\"tmp/partyApp13_03.svg\", modelMap.values());
}

open(\"http://localhost:42001\");

// page 13:04
open(\"http://localhost:42001/page/13_04\");
$(\"#party\").setValue(\"SE BBQ\");
$(\"#ok\").click();
waitForEvent(\"13:05\");

// workflow StartParty

// page 13:55
open(\"http://localhost:42001/page/13_55\");
$(\"#region\").setValue(\"Kassel\");
$(\"#ok\").click();
waitForEvent(\"13:56\");

// check PartyApp
open(\"http://localhost:42001\");
for (DataEvent dataEvent : partyApp.getBuilder().getEventStore().values()) {
   partyApp.getBuilder().load(dataEvent.getBlockId());
}
modelMap = partyApp.getBuilder().getModel().getModelMap();
if (modelMap.values().size() > 0) {
   org.fulib.FulibTools.objectDiagrams().dumpSVG(\"tmp/partyApp13_56.svg\", modelMap.values());
}

open(\"http://localhost:42001\");
// check data note 13:56:02
RegionBuilt e13_56_02 = (RegionBuilt) waitForEvent(\"13:56:02\");

// page 14:00
open(\"http://localhost:42001/page/14_00\");
$(\"#party\").setValue(\"SE BBQ\");
$(\"#date\").setValue(\"after work\");
$(\"#location\").setValue(\"Uni\");
$(\"#ok\").click();
waitForEvent(\"14:01\");

// check PartyApp
open(\"http://localhost:42001\");
for (DataEvent dataEvent : partyApp.getBuilder().getEventStore().values()) {
   partyApp.getBuilder().load(dataEvent.getBlockId());
}
modelMap = partyApp.getBuilder().getModel().getModelMap();
if (modelMap.values().size() > 0) {
   org.fulib.FulibTools.objectDiagrams().dumpSVG(\"tmp/partyApp14_01.svg\", modelMap.values());
}

open(\"http://localhost:42001\");
// check data note 14:01:02
Party2Built e14_01_02 = (Party2Built) waitForEvent(\"14:01:02\");
assertThat(e14_01_02.getName()).isEqualTo(\"SE BBQ\");
assertThat(e14_01_02.getRegion()).isEqualTo(\"Kassel\");
assertThat(e14_01_02.getDate()).isEqualTo(\"after work\");
assertThat(e14_01_02.getAddress()).isEqualTo(\"Uni\");

// page 14:02
open(\"http://localhost:42001/page/14_02\");
$(\"#add\").click();
waitForEvent(\"14:02:01\");

// page 14:03
open(\"http://localhost:42001/page/14_03\");
$(\"#item\").setValue(\"beer\");
$(\"#price\").setValue(\"12.00\");
$(\"#buyer\").setValue(\"Bob\");
$(\"#ok\").click();
waitForEvent(\"14:03:01\");

// check PartyApp
open(\"http://localhost:42001\");
for (DataEvent dataEvent : partyApp.getBuilder().getEventStore().values()) {
   partyApp.getBuilder().load(dataEvent.getBlockId());
}
modelMap = partyApp.getBuilder().getModel().getModelMap();
if (modelMap.values().size() > 0) {
   org.fulib.FulibTools.objectDiagrams().dumpSVG(\"tmp/partyApp14_03_01.svg\", modelMap.values());
}

open(\"http://localhost:42001\");
// check data note 14:03:02
ItemBuilt e14_03_02 = (ItemBuilt) waitForEvent(\"14:03:02\");
assertThat(e14_03_02.getName()).isEqualTo(\"beer\");
assertThat(e14_03_02.getPrice()).isEqualTo(\"12.00\");
assertThat(e14_03_02.getBuyer()).isEqualTo(\"sE_BBQ_Bob\");
assertThat(e14_03_02.getParty()).isEqualTo(\"SE BBQ\");
// check data note 14:03:03
GuestBuilt e14_03_03 = (GuestBuilt) waitForEvent(\"14:03:03\");
assertThat(e14_03_03.getName()).isEqualTo(\"Bob\");
assertThat(e14_03_03.getParty()).isEqualTo(\"SE BBQ\");

// page 14:04
open(\"http://localhost:42001/page/14_04\");
$(\"#add\").click();
waitForEvent(\"14:07\");

// page 14:08
open(\"http://localhost:42001/page/14_08\");
$(\"#item\").setValue(\"meat\");
$(\"#price\").setValue(\"21.00\");
$(\"#buyer\").setValue(\"Alice\");
$(\"#ok\").click();
waitForEvent(\"14:08:01\");

// check PartyApp
open(\"http://localhost:42001\");
for (DataEvent dataEvent : partyApp.getBuilder().getEventStore().values()) {
   partyApp.getBuilder().load(dataEvent.getBlockId());
}
modelMap = partyApp.getBuilder().getModel().getModelMap();
if (modelMap.values().size() > 0) {
   org.fulib.FulibTools.objectDiagrams().dumpSVG(\"tmp/partyApp14_08_01.svg\", modelMap.values());
}

open(\"http://localhost:42001\");
// check data note 14:08:02
ItemBuilt e14_08_02 = (ItemBuilt) waitForEvent(\"14:08:02\");
assertThat(e14_08_02.getName()).isEqualTo(\"meat\");
assertThat(e14_08_02.getPrice()).isEqualTo(\"21.00\");
assertThat(e14_08_02.getBuyer()).isEqualTo(\"sE_BBQ_Alice\");
assertThat(e14_08_02.getParty()).isEqualTo(\"SE BBQ\");
// check data note 14:09:01
GuestBuilt e14_09_01 = (GuestBuilt) waitForEvent(\"14:09:01\");
assertThat(e14_09_01.getName()).isEqualTo(\"Alice\");
assertThat(e14_09_01.getExpenses()).isEqualTo(\"0.00\");
assertThat(e14_09_01.getParty()).isEqualTo(\"SE BBQ\");

// page 14:10
open(\"http://localhost:42001/page/14_10\");
try {
   Thread.sleep(3000);
} catch (Exception e) {
}
eventBroker.stop();
spark.stop();
partyApp.stop();

System.err.println(\"PartyApp completed good and gracefully\");
"
  modified: 	false
  modifiers: 	public
  name: 	PartyApp
  paramsString: 	""
  returnType: 	void
  signature: 	"class/TestPartyApp/method/PartyApp()"

- testPartyApp_publish: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	testPartyApp
  declaration: 	"public void publish(Event event)"
  id: 	TestPartyApp_publish
  methodBody: 	"String yaml = Yaml.encodeSimple(event);

try {
   HttpResponse<String> response = Unirest.post(\"http://localhost:42000/publish\")
         .body(yaml)
         .asString();
         Thread.sleep(200);
}
catch (Exception e) {
   e.printStackTrace();
}"
  modified: 	false
  modifiers: 	public
  name: 	publish
  paramsString: 	"Event event"
  returnType: 	void
  signature: 	"class/TestPartyApp/method/publish(Event)"

