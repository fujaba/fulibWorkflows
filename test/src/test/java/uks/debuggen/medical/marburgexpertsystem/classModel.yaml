- c: 	org.fulib.classmodel.ClassModel
  classes: 	testHealthExperts
  defaultCollectionType: 	c1
  defaultPropertyStyle: 	Bean
  defaultRoleType: 	"java.util.ArrayList<%s>"
  mainJavaDir: 	"test/src/test/java"
  packageName: 	uks.debuggen.medical.marburgexpertsystem
  packageSrcFolder: 	"test/src/test/java/uks/debuggen/medical/marburgexpertsystem"

- testHealthExperts: 	org.fulib.classmodel.Clazz
  attributes: 	testHealthExperts_eventBroker 	testHealthExperts_spark 	testHealthExperts_eventQueue 	testHealthExperts_history 	testHealthExperts_port
  importList: 	"import org.junit.Test;" 	"import java.util.LinkedHashMap;" 	"import java.util.Map;" 	"import spark.Request;" 	"import spark.Response;" 	"import spark.Service;" 	"import java.util.concurrent.ExecutorService;" 	"import java.util.concurrent.Executors;" 	"import java.util.concurrent.LinkedBlockingQueue;" 	"import static org.assertj.core.api.Assertions.assertThat;" 	"import org.fulib.yaml.Yaml;" 	"import org.fulib.yaml.YamlIdMap;" 	"import java.util.concurrent.TimeUnit;" 	"import java.util.logging.Level;" 	"import java.util.logging.Logger;" 	"import uks.debuggen.medical.marburgexpertsystem.events.*;" 	"import uks.debuggen.medical.marburgexpertsystem.MarburgHealthSystem.MarburgHealthSystemService;" 	"import com.mashape.unirest.http.HttpResponse;" 	"import com.mashape.unirest.http.Unirest;" 	"import com.mashape.unirest.http.exceptions.UnirestException;" 	"import static com.codeborne.selenide.Selenide.open;" 	"import static com.codeborne.selenide.Selenide.$;" 	"import static com.codeborne.selenide.Condition.text;" 	"import static com.codeborne.selenide.Condition.matchText;" 	"import com.codeborne.selenide.SelenideElement;"
  imports: 	"import org.junit.Test;" 	"import java.util.LinkedHashMap;" 	"import java.util.Map;" 	"import spark.Request;" 	"import spark.Response;" 	"import spark.Service;" 	"import java.util.concurrent.ExecutorService;" 	"import java.util.concurrent.Executors;" 	"import java.util.concurrent.LinkedBlockingQueue;" 	"import static org.assertj.core.api.Assertions.assertThat;" 	"import org.fulib.yaml.Yaml;" 	"import org.fulib.yaml.YamlIdMap;" 	"import java.util.concurrent.TimeUnit;" 	"import java.util.logging.Level;" 	"import java.util.logging.Logger;" 	"import uks.debuggen.medical.marburgexpertsystem.events.*;" 	"import uks.debuggen.medical.marburgexpertsystem.MarburgHealthSystem.MarburgHealthSystemService;" 	"import com.mashape.unirest.http.HttpResponse;" 	"import com.mashape.unirest.http.Unirest;" 	"import com.mashape.unirest.http.exceptions.UnirestException;" 	"import static com.codeborne.selenide.Selenide.open;" 	"import static com.codeborne.selenide.Selenide.$;" 	"import static com.codeborne.selenide.Condition.text;" 	"import static com.codeborne.selenide.Condition.matchText;" 	"import com.codeborne.selenide.SelenideElement;"
  methods: 	testHealthExperts_start 	testHealthExperts_postApply 	testHealthExperts_subscribeAndLoadOldEvents 	testHealthExperts_waitForEvent 	testHealthExperts_HealthExperts 	testHealthExperts_publish
  model: 	c
  modified: 	false
  name: 	TestHealthExperts
  propertyStyle: 	Bean

- c1: 	org.fulib.classmodel.CollectionType
  implClass: 	class java.util.ArrayList
  implTemplate: 	"java.util.ArrayList<%s>"
  itf: 	org.fulib.classmodel.CollectionInterface.List
  qualifiedImplName: 	java.util.ArrayList
  simpleImplName: 	ArrayList

- testHealthExperts_eventBroker: 	org.fulib.classmodel.Attribute
  clazz: 	testHealthExperts
  id: 	TestHealthExperts_eventBroker
  modified: 	false
  name: 	eventBroker
  propertyStyle: 	Bean
  type: 	EventBroker
  typeSignature: 	EventBroker

- testHealthExperts_spark: 	org.fulib.classmodel.Attribute
  clazz: 	testHealthExperts
  id: 	TestHealthExperts_spark
  modified: 	false
  name: 	spark
  propertyStyle: 	Bean
  type: 	Service
  typeSignature: 	Service

- testHealthExperts_eventQueue: 	org.fulib.classmodel.Attribute
  clazz: 	testHealthExperts
  id: 	TestHealthExperts_eventQueue
  modified: 	false
  name: 	eventQueue
  propertyStyle: 	Bean
  type: 	"LinkedBlockingQueue<Event>"
  typeSignature: 	"LinkedBlockingQueue<Event>"

- testHealthExperts_history: 	org.fulib.classmodel.Attribute
  clazz: 	testHealthExperts
  id: 	TestHealthExperts_history
  modified: 	false
  name: 	history
  propertyStyle: 	Bean
  type: 	"LinkedHashMap<String, Event>"
  typeSignature: 	"LinkedHashMap<String,Event>"

- testHealthExperts_port: 	org.fulib.classmodel.Attribute
  clazz: 	testHealthExperts
  id: 	TestHealthExperts_port
  modified: 	false
  name: 	port
  propertyStyle: 	Bean
  type: 	int
  typeSignature: 	int

- testHealthExperts_start: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	testHealthExperts
  declaration: 	"public void start()"
  id: 	TestHealthExperts_start
  methodBody: 	"      Unirest.setTimeouts(3*60*1000, 3*60*1000);
      eventQueue = new LinkedBlockingQueue<Event>();
      history  = new LinkedHashMap<>();
      port = 41999;
      ExecutorService executor = Executors.newSingleThreadExecutor();
      spark = Service.ignite();
      spark.port(port);
      spark.post(\"/apply\", (req, res) -> executor.submit(() -> this.postApply(req, res)).get());
      executor.submit(() -> System.err.println(\"test executor works\"));
      executor.submit(this::subscribeAndLoadOldEvents);
      executor.submit(() -> System.err.println(\"test executor has done subscribeAndLoadOldEvents\"));"
  modified: 	false
  modifiers: 	public
  name: 	start
  paramsString: 	""
  returnType: 	void
  signature: 	"class/TestHealthExperts/method/start()"

- testHealthExperts_postApply: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	testHealthExperts
  declaration: 	"private String postApply(Request req, Response res)"
  id: 	TestHealthExperts_postApply
  methodBody: 	"      String body = req.body();
      try {
         YamlIdMap idMap = new YamlIdMap(Event.class.getPackageName());
         idMap.decode(body);
         Map<String, Object> map = idMap.getObjIdMap();
         for (Object value : map.values()) {
            Event event = (Event) value;
            eventQueue.put(event);
         }
      } catch (Exception e) {
         String message = e.getMessage();
         if (message.contains(\"ReflectorMap could not find class description\")) {
            Logger.getGlobal().info(\"post apply ignores unknown event \" + body);
         } else {
            Logger.getGlobal().log(Level.SEVERE, \"postApply failed\", e);
         }
      }
      return \"apply done\";"
  modified: 	false
  modifiers: 	private
  name: 	postApply
  paramsString: 	"Request req, Response res"
  returnType: 	String
  signature: 	"class/TestHealthExperts/method/postApply(Request,Response)"

- testHealthExperts_subscribeAndLoadOldEvents: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	testHealthExperts
  declaration: 	"private void subscribeAndLoadOldEvents()"
  id: 	TestHealthExperts_subscribeAndLoadOldEvents
  methodBody: 	"      ServiceSubscribed serviceSubscribed = new ServiceSubscribed()
            .setServiceUrl(String.format(\"http://localhost:%d/apply\", port));
      String json = Yaml.encodeSimple(serviceSubscribed);
      try {
         String url = \"http://localhost:42000/subscribe\";
         HttpResponse<String> response = Unirest.post(url).body(json).asString();
         String body = response.getBody();
         YamlIdMap idMap = new YamlIdMap(Event.class.getPackageName());
         idMap.decode(body);
         Map<String, Object> objectMap = idMap.getObjIdMap();
         for (Object obj : objectMap.values()) {
            Event event = (Event) obj;
            eventQueue.put(event);
         }
         System.err.println(\"Test has completed subscribeAndLoadOldEvents\");
      } catch (Exception e) {
         e.printStackTrace();
      }"
  modified: 	false
  modifiers: 	private
  name: 	subscribeAndLoadOldEvents
  paramsString: 	""
  returnType: 	void
  signature: 	"class/TestHealthExperts/method/subscribeAndLoadOldEvents()"

- testHealthExperts_waitForEvent: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	testHealthExperts
  declaration: 	"public Event waitForEvent(String id)"
  id: 	TestHealthExperts_waitForEvent
  methodBody: 	"      while (true) {
         Event e = history.get(id);

         if (e != null) {
            return e;
         }

         try {
            e = eventQueue.poll(Configuration.timeout, TimeUnit.MILLISECONDS);
         }
         catch (Exception x) {
            throw new RuntimeException(x);
         }

         if (e == null) {
            throw new RuntimeException(\"event timeout waiting for \" + id);
         }

         System.err.println(\"Test got event \" + e.getId());
         history.put(e.getId(), e);
      }"
  modified: 	false
  modifiers: 	public
  name: 	waitForEvent
  paramsString: 	"String id"
  returnType: 	Event
  signature: 	"class/TestHealthExperts/method/waitForEvent(String)"

- testHealthExperts_HealthExperts: 	org.fulib.classmodel.FMethod
  annotations: 	"@Test"
  clazz: 	testHealthExperts
  declaration: 	"@Test
public void HealthExperts()"
  id: 	TestHealthExperts_HealthExperts
  methodBody: 	"// start the event broker
eventBroker = new EventBroker();
eventBroker.start();

this.start();
waitForEvent(\"\" + port);

// start service
MarburgHealthSystemService marburgHealthSystem = new MarburgHealthSystemService();
marburgHealthSystem.start();
waitForEvent(\"42001\");
SelenideElement pre;
LinkedHashMap<String, Object> modelMap;

// workflow MarburgExpertSystem

// create LoadDiseasesCommand: load diseases 12:00
LoadDiseasesCommand e1200 = new LoadDiseasesCommand();
e1200.setId(\"12:00\");
e1200.setNames(\"[common cold, influenza, pneumonia]\");
publish(e1200);
waitForEvent(\"12:00\");

// check MarburgHealthSystem
open(\"http://localhost:42001\");
for (DataEvent dataEvent : marburgHealthSystem.getBuilder().getEventStore().values()) {
   marburgHealthSystem.getBuilder().load(dataEvent.getBlockId());
}
modelMap = marburgHealthSystem.getBuilder().getModel().getModelMap();
if (modelMap.values().size() > 0) {
   org.fulib.FulibTools.objectDiagrams().dumpSVG(\"tmp/marburgHealthSystem12_00.svg\", modelMap.values());
}

open(\"http://localhost:42001\");
// check data note 12:00:01
DiseaseBuilt e12_00_01 = (DiseaseBuilt) waitForEvent(\"12:00:01\");
assertThat(e12_00_01.getName()).isEqualTo(\"common cold\");
assertThat(e12_00_01.getSymptoms()).isEqualTo(\"[runny nose, cough, hoarseness, medium fever]\");
assertThat(e12_00_01.getCounterSymptoms()).isEqualTo(\"[chills, joint pain]\");
// check data note 12:00:02
DiseaseBuilt e12_00_02 = (DiseaseBuilt) waitForEvent(\"12:00:02\");
assertThat(e12_00_02.getName()).isEqualTo(\"influenza\");
assertThat(e12_00_02.getSymptoms()).isEqualTo(\"[cough, medium fever, chills, joint pain, headache]\");
assertThat(e12_00_02.getCounterSymptoms()).isEqualTo(\"[lung noises]\");
// check data note 12:00:03
DiseaseBuilt e12_00_03 = (DiseaseBuilt) waitForEvent(\"12:00:03\");
assertThat(e12_00_03.getName()).isEqualTo(\"pneumonia\");
assertThat(e12_00_03.getSymptoms()).isEqualTo(\"[cough, medium fever, chills, joint pain, headache, lung noises]\");
// check data note 12:00:04
SymptomBuilt e12_00_04 = (SymptomBuilt) waitForEvent(\"12:00:04\");
assertThat(e12_00_04.getName()).isEqualTo(\"cough\");
// check data note 12:00:05
SymptomBuilt e12_00_05 = (SymptomBuilt) waitForEvent(\"12:00:05\");
assertThat(e12_00_05.getName()).isEqualTo(\"runny nose\");
// check data note 12:00:06
SymptomBuilt e12_00_06 = (SymptomBuilt) waitForEvent(\"12:00:06\");
assertThat(e12_00_06.getName()).isEqualTo(\"hoarseness\");
// check data note 12:00:07
SymptomBuilt e12_00_07 = (SymptomBuilt) waitForEvent(\"12:00:07\");
assertThat(e12_00_07.getName()).isEqualTo(\"medium fever\");
// check data note 12:00:08
SymptomBuilt e12_00_08 = (SymptomBuilt) waitForEvent(\"12:00:08\");
assertThat(e12_00_08.getName()).isEqualTo(\"chills\");
// check data note 12:00:09
SymptomBuilt e12_00_09 = (SymptomBuilt) waitForEvent(\"12:00:09\");
assertThat(e12_00_09.getName()).isEqualTo(\"joint pain\");
// check data note 12:00:10
SymptomBuilt e12_00_10 = (SymptomBuilt) waitForEvent(\"12:00:10\");
assertThat(e12_00_10.getName()).isEqualTo(\"headache\");
// check data note 12:00:11
SymptomBuilt e12_00_11 = (SymptomBuilt) waitForEvent(\"12:00:11\");
assertThat(e12_00_11.getName()).isEqualTo(\"lung noises\");
try {
   Thread.sleep(3000);
} catch (Exception e) {
}
eventBroker.stop();
spark.stop();
marburgHealthSystem.stop();

System.err.println(\"HealthExperts completed good and gracefully\");
"
  modified: 	false
  modifiers: 	public
  name: 	HealthExperts
  paramsString: 	""
  returnType: 	void
  signature: 	"class/TestHealthExperts/method/HealthExperts()"

- testHealthExperts_publish: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	testHealthExperts
  declaration: 	"public void publish(Event event)"
  id: 	TestHealthExperts_publish
  methodBody: 	"String yaml = Yaml.encodeSimple(event);

try {
   HttpResponse<String> response = Unirest.post(\"http://localhost:42000/publish\")
         .body(yaml)
         .asString();
         Thread.sleep(200);
}
catch (Exception e) {
   e.printStackTrace();
}"
  modified: 	false
  modifiers: 	public
  name: 	publish
  paramsString: 	"Event event"
  returnType: 	void
  signature: 	"class/TestHealthExperts/method/publish(Event)"

