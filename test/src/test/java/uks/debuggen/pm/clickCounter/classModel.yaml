- c: 	org.fulib.classmodel.ClassModel
  classes: 	testClickCounter
  defaultCollectionType: 	c1
  defaultPropertyStyle: 	Bean
  defaultRoleType: 	"java.util.ArrayList<%s>"
  mainJavaDir: 	"test/src/test/java"
  packageName: 	uks.debuggen.pm.clickCounter
  packageSrcFolder: 	"test/src/test/java/uks/debuggen/pm/clickCounter"

- testClickCounter: 	org.fulib.classmodel.Clazz
  attributes: 	testClickCounter_eventBroker 	testClickCounter_spark 	testClickCounter_eventQueue 	testClickCounter_history 	testClickCounter_port
  importList: 	"import org.junit.Test;" 	"import java.util.LinkedHashMap;" 	"import java.util.Map;" 	"import spark.Request;" 	"import spark.Response;" 	"import spark.Service;" 	"import java.util.concurrent.ExecutorService;" 	"import java.util.concurrent.Executors;" 	"import java.util.concurrent.LinkedBlockingQueue;" 	"import static org.assertj.core.api.Assertions.assertThat;" 	"import org.fulib.yaml.Yaml;" 	"import org.fulib.yaml.YamlIdMap;" 	"import java.util.concurrent.TimeUnit;" 	"import java.util.logging.Level;" 	"import java.util.logging.Logger;" 	"import uks.debuggen.pm.clickCounter.events.*;" 	"import uks.debuggen.pm.clickCounter.ClickCounter.ClickCounterService;" 	"import com.mashape.unirest.http.HttpResponse;" 	"import com.mashape.unirest.http.Unirest;" 	"import com.mashape.unirest.http.exceptions.UnirestException;" 	"import static com.codeborne.selenide.Selenide.open;" 	"import static com.codeborne.selenide.Selenide.$;" 	"import static com.codeborne.selenide.Condition.text;" 	"import static com.codeborne.selenide.Condition.matchText;" 	"import com.codeborne.selenide.SelenideElement;"
  imports: 	"import org.junit.Test;" 	"import java.util.LinkedHashMap;" 	"import java.util.Map;" 	"import spark.Request;" 	"import spark.Response;" 	"import spark.Service;" 	"import java.util.concurrent.ExecutorService;" 	"import java.util.concurrent.Executors;" 	"import java.util.concurrent.LinkedBlockingQueue;" 	"import static org.assertj.core.api.Assertions.assertThat;" 	"import org.fulib.yaml.Yaml;" 	"import org.fulib.yaml.YamlIdMap;" 	"import java.util.concurrent.TimeUnit;" 	"import java.util.logging.Level;" 	"import java.util.logging.Logger;" 	"import uks.debuggen.pm.clickCounter.events.*;" 	"import uks.debuggen.pm.clickCounter.ClickCounter.ClickCounterService;" 	"import com.mashape.unirest.http.HttpResponse;" 	"import com.mashape.unirest.http.Unirest;" 	"import com.mashape.unirest.http.exceptions.UnirestException;" 	"import static com.codeborne.selenide.Selenide.open;" 	"import static com.codeborne.selenide.Selenide.$;" 	"import static com.codeborne.selenide.Condition.text;" 	"import static com.codeborne.selenide.Condition.matchText;" 	"import com.codeborne.selenide.SelenideElement;"
  methods: 	testClickCounter_start 	testClickCounter_postApply 	testClickCounter_subscribeAndLoadOldEvents 	testClickCounter_waitForEvent 	testClickCounter_ClickCounter 	testClickCounter_publish
  model: 	c
  modified: 	false
  name: 	TestClickCounter
  propertyStyle: 	Bean

- c1: 	org.fulib.classmodel.CollectionType
  implClass: 	class java.util.ArrayList
  implTemplate: 	"java.util.ArrayList<%s>"
  itf: 	org.fulib.classmodel.CollectionInterface.List
  qualifiedImplName: 	java.util.ArrayList
  simpleImplName: 	ArrayList

- testClickCounter_eventBroker: 	org.fulib.classmodel.Attribute
  clazz: 	testClickCounter
  id: 	TestClickCounter_eventBroker
  modified: 	false
  name: 	eventBroker
  propertyStyle: 	Bean
  type: 	EventBroker
  typeSignature: 	EventBroker

- testClickCounter_spark: 	org.fulib.classmodel.Attribute
  clazz: 	testClickCounter
  id: 	TestClickCounter_spark
  modified: 	false
  name: 	spark
  propertyStyle: 	Bean
  type: 	Service
  typeSignature: 	Service

- testClickCounter_eventQueue: 	org.fulib.classmodel.Attribute
  clazz: 	testClickCounter
  id: 	TestClickCounter_eventQueue
  modified: 	false
  name: 	eventQueue
  propertyStyle: 	Bean
  type: 	"LinkedBlockingQueue<Event>"
  typeSignature: 	"LinkedBlockingQueue<Event>"

- testClickCounter_history: 	org.fulib.classmodel.Attribute
  clazz: 	testClickCounter
  id: 	TestClickCounter_history
  modified: 	false
  name: 	history
  propertyStyle: 	Bean
  type: 	"LinkedHashMap<String, Event>"
  typeSignature: 	"LinkedHashMap<String,Event>"

- testClickCounter_port: 	org.fulib.classmodel.Attribute
  clazz: 	testClickCounter
  id: 	TestClickCounter_port
  modified: 	false
  name: 	port
  propertyStyle: 	Bean
  type: 	int
  typeSignature: 	int

- testClickCounter_start: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	testClickCounter
  declaration: 	"public void start()"
  id: 	TestClickCounter_start
  methodBody: 	"      Unirest.setTimeouts(3*60*1000, 3*60*1000);
      eventQueue = new LinkedBlockingQueue<Event>();
      history  = new LinkedHashMap<>();
      port = 41999;
      ExecutorService executor = Executors.newSingleThreadExecutor();
      spark = Service.ignite();
      spark.port(port);
      spark.post(\"/apply\", (req, res) -> executor.submit(() -> this.postApply(req, res)).get());
      spark.init();
      executor.submit(() -> System.err.println(\"test executor works\"));
      executor.submit(this::subscribeAndLoadOldEvents);
      executor.submit(() -> System.err.println(\"test executor has done subscribeAndLoadOldEvents\"));"
  modified: 	false
  modifiers: 	public
  name: 	start
  paramsString: 	""
  returnType: 	void
  signature: 	"class/TestClickCounter/method/start()"

- testClickCounter_postApply: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	testClickCounter
  declaration: 	"private String postApply(Request req, Response res)"
  id: 	TestClickCounter_postApply
  methodBody: 	"      String body = req.body();
      try {
         YamlIdMap idMap = new YamlIdMap(Event.class.getPackageName());
         idMap.decode(body);
         Map<String, Object> map = idMap.getObjIdMap();
         for (Object value : map.values()) {
            Event event = (Event) value;
            eventQueue.put(event);
         }
      } catch (Exception e) {
         String message = e.getMessage();
         if (message.contains(\"ReflectorMap could not find class description\")) {
            Logger.getGlobal().info(\"post apply ignores unknown event \" + body);
         } else {
            Logger.getGlobal().log(Level.SEVERE, \"postApply failed\", e);
         }
      }
      return \"apply done\";"
  modified: 	false
  modifiers: 	private
  name: 	postApply
  paramsString: 	"Request req, Response res"
  returnType: 	String
  signature: 	"class/TestClickCounter/method/postApply(Request,Response)"

- testClickCounter_subscribeAndLoadOldEvents: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	testClickCounter
  declaration: 	"private void subscribeAndLoadOldEvents()"
  id: 	TestClickCounter_subscribeAndLoadOldEvents
  methodBody: 	"      ServiceSubscribed serviceSubscribed = new ServiceSubscribed()
            .setServiceUrl(String.format(\"http://localhost:%d/apply\", port));
      String json = Yaml.encodeSimple(serviceSubscribed);
      try {
         String url = \"http://localhost:42000/subscribe\";
         HttpResponse<String> response = Unirest.post(url).body(json).asString();
         String body = response.getBody();
         YamlIdMap idMap = new YamlIdMap(Event.class.getPackageName());
         idMap.decode(body);
         Map<String, Object> objectMap = idMap.getObjIdMap();
         for (Object obj : objectMap.values()) {
            Event event = (Event) obj;
            eventQueue.put(event);
         }
         System.err.println(\"Test has completed subscribeAndLoadOldEvents\");
      } catch (Exception e) {
         e.printStackTrace();
      }"
  modified: 	false
  modifiers: 	private
  name: 	subscribeAndLoadOldEvents
  paramsString: 	""
  returnType: 	void
  signature: 	"class/TestClickCounter/method/subscribeAndLoadOldEvents()"

- testClickCounter_waitForEvent: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	testClickCounter
  declaration: 	"public Event waitForEvent(String id)"
  id: 	TestClickCounter_waitForEvent
  methodBody: 	"      while (true) {
         Event e = history.get(id);

         if (e != null) {
            return e;
         }

         try {
            e = eventQueue.poll(Configuration.timeout, TimeUnit.MILLISECONDS);
         }
         catch (Exception x) {
            throw new RuntimeException(x);
         }

         if (e == null) {
            throw new RuntimeException(\"event timeout waiting for \" + id);
         }

         System.err.println(\"Test got event \" + e.getId());
         history.put(e.getId(), e);
      }"
  modified: 	false
  modifiers: 	public
  name: 	waitForEvent
  paramsString: 	"String id"
  returnType: 	Event
  signature: 	"class/TestClickCounter/method/waitForEvent(String)"

- testClickCounter_ClickCounter: 	org.fulib.classmodel.FMethod
  annotations: 	"@Test"
  clazz: 	testClickCounter
  declaration: 	"@Test
public void ClickCounter()"
  id: 	TestClickCounter_ClickCounter
  methodBody: 	"// start the event broker
eventBroker = new EventBroker();
eventBroker.start();

this.start();
waitForEvent(\"\" + port);

// start service
ClickCounterService clickCounter = new ClickCounterService();
clickCounter.start();
waitForEvent(\"42001\");
SelenideElement pre;
LinkedHashMap<String, Object> modelMap;

// workflow working smoothly

// page 12:01
open(\"http://localhost:42001/page/12_01\");
$(\"#Click_Me\").click();
waitForEvent(\"12:01:01\");

// check ClickCounter
open(\"http://localhost:42001\");
for (DataEvent dataEvent : clickCounter.getBuilder().getEventStore().values()) {
   clickCounter.getBuilder().load(dataEvent.getBlockId());
}
modelMap = clickCounter.getBuilder().getModel().getModelMap();
if (modelMap.values().size() > 0) {
   org.fulib.FulibTools.objectDiagrams().dumpSVG(\"../event-models/ClickCounter/clickCounter12_01_01.svg\", modelMap.values());
}

open(\"http://localhost:42001\");
// check data note 12:01:02
CounterBuilt e12_01_02 = (CounterBuilt) waitForEvent(\"12:01:02\");
assertThat(e12_01_02.getCount()).isEqualTo(\"1\");

// page 12:02
open(\"http://localhost:42001/page/12_02\");
$(\"#Click_Me\").click();
waitForEvent(\"12:02:01\");

// check ClickCounter
open(\"http://localhost:42001\");
for (DataEvent dataEvent : clickCounter.getBuilder().getEventStore().values()) {
   clickCounter.getBuilder().load(dataEvent.getBlockId());
}
modelMap = clickCounter.getBuilder().getModel().getModelMap();
if (modelMap.values().size() > 0) {
   org.fulib.FulibTools.objectDiagrams().dumpSVG(\"../event-models/ClickCounter/clickCounter12_02_01.svg\", modelMap.values());
}

open(\"http://localhost:42001\");
// check data note 12:02:02
CounterBuilt e12_02_02 = (CounterBuilt) waitForEvent(\"12:02:02\");
assertThat(e12_02_02.getCount()).isEqualTo(\"2\");

// page 12:03
open(\"http://localhost:42001/page/12_03\");
$(\"#Click_Me\").click();
waitForEvent(\"12:03:01\");

// check ClickCounter
open(\"http://localhost:42001\");
for (DataEvent dataEvent : clickCounter.getBuilder().getEventStore().values()) {
   clickCounter.getBuilder().load(dataEvent.getBlockId());
}
modelMap = clickCounter.getBuilder().getModel().getModelMap();
if (modelMap.values().size() > 0) {
   org.fulib.FulibTools.objectDiagrams().dumpSVG(\"../event-models/ClickCounter/clickCounter12_03_01.svg\", modelMap.values());
}

open(\"http://localhost:42001\");
// check data note 12:03:02
CounterBuilt e12_03_02 = (CounterBuilt) waitForEvent(\"12:03:02\");
assertThat(e12_03_02.getCount()).isEqualTo(\"3\");

// page 12:04
open(\"http://localhost:42001/page/12_04\");
try {
   Thread.sleep(3000);
} catch (Exception e) {
}
eventBroker.stop();
spark.stop();
clickCounter.stop();

System.err.println(\"ClickCounter completed good and gracefully\");
"
  modified: 	false
  modifiers: 	public
  name: 	ClickCounter
  paramsString: 	""
  returnType: 	void
  signature: 	"class/TestClickCounter/method/ClickCounter()"

- testClickCounter_publish: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	testClickCounter
  declaration: 	"public void publish(Event event)"
  id: 	TestClickCounter_publish
  methodBody: 	"String yaml = Yaml.encodeSimple(event);

try {
   HttpResponse<String> response = Unirest.post(\"http://localhost:42000/publish\")
         .body(yaml)
         .asString();
         Thread.sleep(200);
}
catch (Exception e) {
   e.printStackTrace();
}"
  modified: 	false
  modifiers: 	public
  name: 	publish
  paramsString: 	"Event event"
  returnType: 	void
  signature: 	"class/TestClickCounter/method/publish(Event)"

