- c: 	org.fulib.classmodel.ClassModel
  classes: 	testSomeEventStorming
  defaultCollectionType: 	c1
  defaultPropertyStyle: 	Bean
  defaultRoleType: 	"java.util.ArrayList<%s>"
  mainJavaDir: 	"test/src/test/java"
  packageName: 	uks.debuggen.pm
  packageSrcFolder: 	"test/src/test/java/uks/debuggen/pm"

- testSomeEventStorming: 	org.fulib.classmodel.Clazz
  importList: 	"import org.junit.Test;" 	"import java.util.LinkedHashMap;" 	"import static org.assertj.core.api.Assertions.assertThat;" 	"import uks.debuggen.pm.someservice.*;"
  imports: 	"import org.junit.Test;" 	"import java.util.LinkedHashMap;" 	"import static org.assertj.core.api.Assertions.assertThat;" 	"import uks.debuggen.pm.someservice.*;"
  methods: 	testSomeEventStorming_testSomeEventStorming
  model: 	c
  modified: 	false
  name: 	TestSomeEventStorming
  propertyStyle: 	Bean

- c1: 	org.fulib.classmodel.CollectionType
  implClass: 	class java.util.ArrayList
  implTemplate: 	"java.util.ArrayList<%s>"
  itf: 	org.fulib.classmodel.CollectionInterface.List
  qualifiedImplName: 	java.util.ArrayList
  simpleImplName: 	ArrayList

- testSomeEventStorming_testSomeEventStorming: 	org.fulib.classmodel.FMethod
  annotations: 	"@Test"
  clazz: 	testSomeEventStorming
  declaration: 	"@Test
public void testSomeEventStorming()"
  id: 	TestSomeEventStorming_testSomeEventStorming
  methodBody: 	"someserviceBusinessLogic logic = new someserviceBusinessLogic();
RoutingModel model = new RoutingModel();
logic.init();
assertThat(model.getOrCreateRoute(\"route1\").getStart()).isEqualTo(\"Kassel\");
assertThat(model.getOrCreateRoute(\"route1\").getStart.back()).isEqualTo(\"[routeStarts]\");
assertThat(model.getOrCreateRoute(\"route1\").getEnd()).isEqualTo(\"Frankfurt\");
assertThat(model.getOrCreateRoute(\"route1\").getEnd.back()).isEqualTo(\"[routeEnds]\");
assertThat(model.getOrCreateStop(\"Kassel\").getDeparture()).isEqualTo(\"leg1\");
assertThat(model.getOrCreateStop(\"Kassel\").getDeparture.back()).isEqualTo(\"from\");
assertThat(model.getOrCreateLeg(\"leg1\").getTo()).isEqualTo(\"Fulda\");
assertThat(model.getOrCreateLeg(\"leg1\").getTo.back()).isEqualTo(\"arrival\");
assertThat(model.getOrCreateLeg(\"leg1\").getVia()).isEqualTo(\"A7\");
assertThat(model.getOrCreateLeg(\"leg1\").getLength()).isEqualTo(\"104 km\");
assertThat(model.getOrCreateStop(\"Fulda\").getDeparture()).isEqualTo(\"leg2\");
assertThat(model.getOrCreateLeg(\"leg2\").getTo()).isEqualTo(\"Frankfurt\");
assertThat(model.getOrCreateLeg(\"leg2\").getVia()).isEqualTo(\"A66\");
assertThat(model.getOrCreateLeg(\"leg2\").getLength()).isEqualTo(\"71 km\");
logic.computeLength(route1);
assertThat(model.getOrCreateRoute(\"route1\").getLength()).isEqualTo(\"175 km\");

System.out.println();
"
  modified: 	false
  modifiers: 	public
  name: 	testSomeEventStorming
  paramsString: 	""
  returnType: 	void
  signature: 	"class/TestSomeEventStorming/method/testSomeEventStorming()"

