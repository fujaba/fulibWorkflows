- c: 	org.fulib.classmodel.ClassModel
  classes: 	testSomeEventStorming
  defaultCollectionType: 	c1
  defaultPropertyStyle: 	Bean
  defaultRoleType: 	"java.util.ArrayList<%s>"
  mainJavaDir: 	"src/test/java"
  packageName: 	uks.fulibgen.shop
  packageSrcFolder: 	"src/test/java/uks/fulibgen/shop"

- testSomeEventStorming: 	org.fulib.classmodel.Clazz
  attributes: 	testSomeEventStorming_eventBroker
  importList: 	"import org.junit.Test;" 	"import uks.fulibgen.shop.events.*;" 	"import uks.fulibgen.shop.Shop.ShopService;" 	"import uks.fulibgen.shop.someservice.someserviceService;" 	"import uks.fulibgen.shop.Storage.StorageService;" 	"import org.fulib.yaml.Yaml;" 	"import com.mashape.unirest.http.HttpResponse;" 	"import com.mashape.unirest.http.Unirest;" 	"import com.mashape.unirest.http.exceptions.UnirestException;" 	"import static com.codeborne.selenide.Selenide.open;" 	"import static com.codeborne.selenide.Selenide.$;"
  imports: 	"import org.junit.Test;" 	"import uks.fulibgen.shop.events.*;" 	"import uks.fulibgen.shop.Shop.ShopService;" 	"import uks.fulibgen.shop.someservice.someserviceService;" 	"import uks.fulibgen.shop.Storage.StorageService;" 	"import org.fulib.yaml.Yaml;" 	"import com.mashape.unirest.http.HttpResponse;" 	"import com.mashape.unirest.http.Unirest;" 	"import com.mashape.unirest.http.exceptions.UnirestException;" 	"import static com.codeborne.selenide.Selenide.open;" 	"import static com.codeborne.selenide.Selenide.$;"
  methods: 	testSomeEventStorming_SomeEventStorming 	testSomeEventStorming_publish
  model: 	c
  modified: 	false
  name: 	TestSomeEventStorming
  propertyStyle: 	Bean

- c1: 	org.fulib.classmodel.CollectionType
  implClass: 	class java.util.ArrayList
  implTemplate: 	"java.util.ArrayList<%s>"
  itf: 	org.fulib.classmodel.CollectionInterface.List
  qualifiedImplName: 	java.util.ArrayList
  simpleImplName: 	ArrayList

- testSomeEventStorming_eventBroker: 	org.fulib.classmodel.Attribute
  clazz: 	testSomeEventStorming
  id: 	TestSomeEventStorming_eventBroker
  modified: 	false
  name: 	eventBroker
  propertyStyle: 	Bean
  type: 	EventBroker
  typeSignature: 	EventBroker

- testSomeEventStorming_SomeEventStorming: 	org.fulib.classmodel.FMethod
  annotations: 	"@Test"
  clazz: 	testSomeEventStorming
  declaration: 	"@Test
public void SomeEventStorming()"
  id: 	TestSomeEventStorming_SomeEventStorming
  methodBody: 	"// start the event broker
eventBroker = new EventBroker();
eventBroker.start();

// start service
ShopService shop = new ShopService();
shop.start();

// start service
someserviceService someservice = new someserviceService();
someservice.start();

// start service
StorageService storage = new StorageService();
storage.start();

open(\"http://localhost:42000\");

// workflow working smoothly
// create ProductStored: product stored 12:00
ProductStored e1200 = new ProductStored();
e1200.setId(\"12:00\");
e1200.setBox(\"box23\");
e1200.setProduct(\"shoes\");
e1200.setPlace(\"shelf23\");
publish(e1200);

// create OrderRegistered: order registered 13:01
OrderRegistered e1301 = new OrderRegistered();
e1301.setId(\"13:01\");
e1301.setTrigger(\"button OK\");
e1301.setProduct(\"shoes\");
e1301.setCustomer(\"Alice\");
e1301.setAddress(\"Wonderland 1\");
publish(e1301);

// create OrderPicked: order picked 14:00
OrderPicked e1400 = new OrderPicked();
e1400.setId(\"14:00\");
e1400.setPickTask(\"pick1300\");
e1400.setBox(\"box23\");
e1400.setUser(\"Bob\");
publish(e1400);

// workflow OrderOutOfStocks
// create OrderRegistered: order registered 13:11
OrderRegistered e1311 = new OrderRegistered();
e1311.setId(\"13:11\");
e1311.setTrigger(\"button OK\");
e1311.setProduct(\"tshirt\");
e1311.setCustomer(\"Alice\");
e1311.setAddress(\"Wonderland 1\");
publish(e1311);

System.out.println();
"
  modified: 	false
  modifiers: 	public
  name: 	SomeEventStorming
  paramsString: 	""
  returnType: 	void
  signature: 	"class/TestSomeEventStorming/method/SomeEventStorming()"

- testSomeEventStorming_publish: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	testSomeEventStorming
  declaration: 	"public void publish(Event event)"
  id: 	TestSomeEventStorming_publish
  methodBody: 	"String yaml = Yaml.encode(event);

try {
   HttpResponse<String> response = Unirest.post(\"http://localhost:42000/publish\")
         .body(yaml)
         .asString();
}
catch (UnirestException e) {
   e.printStackTrace();
}"
  modified: 	false
  modifiers: 	public
  name: 	publish
  paramsString: 	"Event event"
  returnType: 	void
  signature: 	"class/TestSomeEventStorming/method/publish(Event)"

