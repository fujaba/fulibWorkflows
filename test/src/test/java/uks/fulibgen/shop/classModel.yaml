- c: 	org.fulib.classmodel.ClassModel
  classes: 	testSomeEventStorming
  defaultCollectionType: 	c1
  defaultPropertyStyle: 	Bean
  defaultRoleType: 	"java.util.ArrayList<%s>"
  mainJavaDir: 	"src/test/java"
  packageName: 	uks.fulibgen.shop
  packageSrcFolder: 	"src/test/java/uks/fulibgen/shop"

- testSomeEventStorming: 	org.fulib.classmodel.Clazz
  attributes: 	testSomeEventStorming_eventBroker 	testSomeEventStorming_spark 	testSomeEventStorming_eventQueue 	testSomeEventStorming_history 	testSomeEventStorming_port
  importList: 	"import org.junit.Test;" 	"import java.util.LinkedHashMap;" 	"import java.util.Map;" 	"import spark.Request;" 	"import spark.Response;" 	"import spark.Service;" 	"import java.util.concurrent.ExecutorService;" 	"import java.util.concurrent.Executors;" 	"import java.util.concurrent.LinkedBlockingQueue;" 	"import static org.assertj.core.api.Assertions.assertThat;" 	"import org.fulib.yaml.Yaml;" 	"import org.fulib.yaml.YamlIdMap;" 	"import java.util.concurrent.TimeUnit;" 	"import java.util.logging.Level;" 	"import java.util.logging.Logger;" 	"import uks.fulibgen.shop.events.*;" 	"import uks.fulibgen.shop.Shop.ShopService;" 	"import uks.fulibgen.shop.Storage.StorageService;" 	"import com.mashape.unirest.http.HttpResponse;" 	"import com.mashape.unirest.http.Unirest;" 	"import com.mashape.unirest.http.exceptions.UnirestException;" 	"import static com.codeborne.selenide.Selenide.open;" 	"import static com.codeborne.selenide.Selenide.$;" 	"import static com.codeborne.selenide.Condition.text;" 	"import static com.codeborne.selenide.Condition.matchText;" 	"import com.codeborne.selenide.SelenideElement;"
  imports: 	"import org.junit.Test;" 	"import java.util.LinkedHashMap;" 	"import java.util.Map;" 	"import spark.Request;" 	"import spark.Response;" 	"import spark.Service;" 	"import java.util.concurrent.ExecutorService;" 	"import java.util.concurrent.Executors;" 	"import java.util.concurrent.LinkedBlockingQueue;" 	"import static org.assertj.core.api.Assertions.assertThat;" 	"import org.fulib.yaml.Yaml;" 	"import org.fulib.yaml.YamlIdMap;" 	"import java.util.concurrent.TimeUnit;" 	"import java.util.logging.Level;" 	"import java.util.logging.Logger;" 	"import uks.fulibgen.shop.events.*;" 	"import uks.fulibgen.shop.Shop.ShopService;" 	"import uks.fulibgen.shop.Storage.StorageService;" 	"import com.mashape.unirest.http.HttpResponse;" 	"import com.mashape.unirest.http.Unirest;" 	"import com.mashape.unirest.http.exceptions.UnirestException;" 	"import static com.codeborne.selenide.Selenide.open;" 	"import static com.codeborne.selenide.Selenide.$;" 	"import static com.codeborne.selenide.Condition.text;" 	"import static com.codeborne.selenide.Condition.matchText;" 	"import com.codeborne.selenide.SelenideElement;"
  methods: 	testSomeEventStorming_start 	testSomeEventStorming_postApply 	testSomeEventStorming_subscribeAndLoadOldEvents 	testSomeEventStorming_waitForEvent 	testSomeEventStorming_SomeEventStorming 	testSomeEventStorming_publish
  model: 	c
  modified: 	false
  name: 	TestSomeEventStorming
  propertyStyle: 	Bean

- c1: 	org.fulib.classmodel.CollectionType
  implClass: 	class java.util.ArrayList
  implTemplate: 	"java.util.ArrayList<%s>"
  itf: 	org.fulib.classmodel.CollectionInterface.List
  qualifiedImplName: 	java.util.ArrayList
  simpleImplName: 	ArrayList

- testSomeEventStorming_eventBroker: 	org.fulib.classmodel.Attribute
  clazz: 	testSomeEventStorming
  id: 	TestSomeEventStorming_eventBroker
  modified: 	false
  name: 	eventBroker
  propertyStyle: 	Bean
  type: 	EventBroker
  typeSignature: 	EventBroker

- testSomeEventStorming_spark: 	org.fulib.classmodel.Attribute
  clazz: 	testSomeEventStorming
  id: 	TestSomeEventStorming_spark
  modified: 	false
  name: 	spark
  propertyStyle: 	Bean
  type: 	Service
  typeSignature: 	Service

- testSomeEventStorming_eventQueue: 	org.fulib.classmodel.Attribute
  clazz: 	testSomeEventStorming
  id: 	TestSomeEventStorming_eventQueue
  modified: 	false
  name: 	eventQueue
  propertyStyle: 	Bean
  type: 	"LinkedBlockingQueue<Event>"
  typeSignature: 	"LinkedBlockingQueue<Event>"

- testSomeEventStorming_history: 	org.fulib.classmodel.Attribute
  clazz: 	testSomeEventStorming
  id: 	TestSomeEventStorming_history
  modified: 	false
  name: 	history
  propertyStyle: 	Bean
  type: 	"LinkedHashMap<String, Event>"
  typeSignature: 	"LinkedHashMap<String,Event>"

- testSomeEventStorming_port: 	org.fulib.classmodel.Attribute
  clazz: 	testSomeEventStorming
  id: 	TestSomeEventStorming_port
  modified: 	false
  name: 	port
  propertyStyle: 	Bean
  type: 	int
  typeSignature: 	int

- testSomeEventStorming_start: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	testSomeEventStorming
  declaration: 	"public void start()"
  id: 	TestSomeEventStorming_start
  methodBody: 	"      Unirest.setTimeouts(3*60*1000, 3*60*1000);
      eventQueue = new LinkedBlockingQueue<Event>();
      history  = new LinkedHashMap<>();
      port = 41999;
      ExecutorService executor = Executors.newSingleThreadExecutor();
      spark = Service.ignite();
      spark.port(port);
      spark.post(\"/apply\", (req, res) -> executor.submit(() -> this.postApply(req, res)).get());
      spark.init();
      executor.submit(() -> System.err.println(\"test executor works\"));
      executor.submit(this::subscribeAndLoadOldEvents);
      executor.submit(() -> System.err.println(\"test executor has done subscribeAndLoadOldEvents\"));"
  modified: 	false
  modifiers: 	public
  name: 	start
  paramsString: 	""
  returnType: 	void
  signature: 	"class/TestSomeEventStorming/method/start()"

- testSomeEventStorming_postApply: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	testSomeEventStorming
  declaration: 	"private String postApply(Request req, Response res)"
  id: 	TestSomeEventStorming_postApply
  methodBody: 	"      String body = req.body();
      try {
         YamlIdMap idMap = new YamlIdMap(Event.class.getPackageName());
         idMap.decode(body);
         Map<String, Object> map = idMap.getObjIdMap();
         for (Object value : map.values()) {
            Event event = (Event) value;
            eventQueue.put(event);
         }
      } catch (Exception e) {
         String message = e.getMessage();
         if (message.contains(\"ReflectorMap could not find class description\")) {
            Logger.getGlobal().info(\"post apply ignores unknown event \" + body);
         } else {
            Logger.getGlobal().log(Level.SEVERE, \"postApply failed\", e);
         }
      }
      return \"apply done\";"
  modified: 	false
  modifiers: 	private
  name: 	postApply
  paramsString: 	"Request req, Response res"
  returnType: 	String
  signature: 	"class/TestSomeEventStorming/method/postApply(Request,Response)"

- testSomeEventStorming_subscribeAndLoadOldEvents: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	testSomeEventStorming
  declaration: 	"private void subscribeAndLoadOldEvents()"
  id: 	TestSomeEventStorming_subscribeAndLoadOldEvents
  methodBody: 	"      ServiceSubscribed serviceSubscribed = new ServiceSubscribed()
            .setServiceUrl(String.format(\"http://localhost:%d/apply\", port));
      String json = Yaml.encodeSimple(serviceSubscribed);
      try {
         String url = \"http://localhost:42000/subscribe\";
         HttpResponse<String> response = Unirest.post(url).body(json).asString();
         String body = response.getBody();
         YamlIdMap idMap = new YamlIdMap(Event.class.getPackageName());
         idMap.decode(body);
         Map<String, Object> objectMap = idMap.getObjIdMap();
         for (Object obj : objectMap.values()) {
            Event event = (Event) obj;
            eventQueue.put(event);
         }
         System.err.println(\"Test has completed subscribeAndLoadOldEvents\");
      } catch (Exception e) {
         e.printStackTrace();
      }"
  modified: 	false
  modifiers: 	private
  name: 	subscribeAndLoadOldEvents
  paramsString: 	""
  returnType: 	void
  signature: 	"class/TestSomeEventStorming/method/subscribeAndLoadOldEvents()"

- testSomeEventStorming_waitForEvent: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	testSomeEventStorming
  declaration: 	"public Event waitForEvent(String id)"
  id: 	TestSomeEventStorming_waitForEvent
  methodBody: 	"      while (true) {
         Event e = history.get(id);

         if (e != null) {
            return e;
         }

         try {
            e = eventQueue.poll(Configuration.timeout, TimeUnit.MILLISECONDS);
         }
         catch (Exception x) {
            throw new RuntimeException(x);
         }

         if (e == null) {
            throw new RuntimeException(\"event timeout waiting for \" + id);
         }

         System.err.println(\"Test got event \" + e.getId());
         history.put(e.getId(), e);
      }"
  modified: 	false
  modifiers: 	public
  name: 	waitForEvent
  paramsString: 	"String id"
  returnType: 	Event
  signature: 	"class/TestSomeEventStorming/method/waitForEvent(String)"

- testSomeEventStorming_SomeEventStorming: 	org.fulib.classmodel.FMethod
  annotations: 	"@Test"
  clazz: 	testSomeEventStorming
  declaration: 	"@Test
public void SomeEventStorming()"
  id: 	TestSomeEventStorming_SomeEventStorming
  methodBody: 	"// start the event broker
eventBroker = new EventBroker();
eventBroker.start();

this.start();
waitForEvent(\"\" + port);

// start service
ShopService shop = new ShopService();
shop.start();
waitForEvent(\"42100\");

// start service
StorageService storage = new StorageService();
storage.start();
waitForEvent(\"42002\");
SelenideElement pre;
LinkedHashMap<String, Object> modelMap;

// workflow OrderingSmooth

// create StoreBoxCommand: store box 12:00
StoreBoxCommand e1200 = new StoreBoxCommand();
e1200.setId(\"12:00\");
e1200.setBox(\"box23\");
e1200.setProduct(\"shoes\");
e1200.setPlace(\"shelf23\");
publish(e1200);
waitForEvent(\"12:00\");

// check Storage
open(\"http://localhost:42002\");
for (DataEvent dataEvent : storage.getBuilder().getEventStore().values()) {
   storage.getBuilder().load(dataEvent.getBlockId());
}
modelMap = storage.getBuilder().getModel().getModelMap();
if (modelMap.values().size() > 0) {
   org.fulib.FulibTools.objectDiagrams().dumpSVG(\"tmp/storage12_00.svg\", modelMap.values());
}

open(\"http://localhost:42002\");
// check data note 12:01
BoxBuilt e12_01 = (BoxBuilt) waitForEvent(\"12:01\");
assertThat(e12_01.getProduct()).isEqualTo(\"shoes\");
assertThat(e12_01.getPlace()).isEqualTo(\"shelf23\");

// page 12:50
open(\"http://localhost:42100/page/12_50\");
$(\"#shoes\").click();
waitForEvent(\"12:51\");

// page 13:00
open(\"http://localhost:42100/page/13_00\");
$(\"#product\").setValue(\"shoes\");
$(\"#name\").setValue(\"Alice\");
$(\"#address\").setValue(\"Wonderland 1\");
$(\"#OK\").click();
waitForEvent(\"13:01\");

// check Shop
open(\"http://localhost:42100\");
for (DataEvent dataEvent : shop.getBuilder().getEventStore().values()) {
   shop.getBuilder().load(dataEvent.getBlockId());
}
modelMap = shop.getBuilder().getModel().getModelMap();
if (modelMap.values().size() > 0) {
   org.fulib.FulibTools.objectDiagrams().dumpSVG(\"tmp/shop13_01.svg\", modelMap.values());
}

open(\"http://localhost:42100\");
// check data note 13:06:01
OrderBuilt e13_06_01 = (OrderBuilt) waitForEvent(\"13:06:01\");
assertThat(e13_06_01.getState()).isEqualTo(\"picking\");

// check Storage
open(\"http://localhost:42002\");
for (DataEvent dataEvent : storage.getBuilder().getEventStore().values()) {
   storage.getBuilder().load(dataEvent.getBlockId());
}
modelMap = storage.getBuilder().getModel().getModelMap();
if (modelMap.values().size() > 0) {
   org.fulib.FulibTools.objectDiagrams().dumpSVG(\"tmp/storage13_01.svg\", modelMap.values());
}

open(\"http://localhost:42002\");
// check data note 13:05
PickTaskBuilt e13_05 = (PickTaskBuilt) waitForEvent(\"13:05\");
assertThat(e13_05.getOrder()).isEqualTo(\"order1300\");
assertThat(e13_05.getProduct()).isEqualTo(\"shoes\");
assertThat(e13_05.getCustomer()).isEqualTo(\"Alice\");
assertThat(e13_05.getAddress()).isEqualTo(\"Wonderland 1\");
assertThat(e13_05.getState()).isEqualTo(\"todo\");

// create PickOrderCommand: pick order 14:00
PickOrderCommand e1400 = new PickOrderCommand();
e1400.setId(\"14:00\");
e1400.setPickTask(\"pick1300\");
e1400.setBox(\"box23\");
e1400.setUser(\"Bob\");
publish(e1400);
waitForEvent(\"14:00\");

// check Storage
open(\"http://localhost:42002\");
for (DataEvent dataEvent : storage.getBuilder().getEventStore().values()) {
   storage.getBuilder().load(dataEvent.getBlockId());
}
modelMap = storage.getBuilder().getModel().getModelMap();
if (modelMap.values().size() > 0) {
   org.fulib.FulibTools.objectDiagrams().dumpSVG(\"tmp/storage14_00.svg\", modelMap.values());
}

open(\"http://localhost:42002\");
// check data note 14:01
PickTaskBuilt e14_01 = (PickTaskBuilt) waitForEvent(\"14:01\");
assertThat(e14_01.getState()).isEqualTo(\"done\");
assertThat(e14_01.getBox()).isEqualTo(\"box23\");
// check data note 14:02
BoxBuilt e14_02 = (BoxBuilt) waitForEvent(\"14:02\");
assertThat(e14_02.getPlace()).isEqualTo(\"shipping\");

// check Shop
open(\"http://localhost:42100\");
for (DataEvent dataEvent : shop.getBuilder().getEventStore().values()) {
   shop.getBuilder().load(dataEvent.getBlockId());
}
modelMap = shop.getBuilder().getModel().getModelMap();
if (modelMap.values().size() > 0) {
   org.fulib.FulibTools.objectDiagrams().dumpSVG(\"tmp/shop14_00.svg\", modelMap.values());
}

open(\"http://localhost:42100\");
// check data note 14:04
OrderBuilt e14_04 = (OrderBuilt) waitForEvent(\"14:04\");
assertThat(e14_04.getState()).isEqualTo(\"shipping\");

// workflow OrderOutOfStocks

// create SubmitOrderCommand: submit order 13:11
SubmitOrderCommand e1311 = new SubmitOrderCommand();
e1311.setId(\"13:11\");
e1311.setTrigger(\"button OK\");
e1311.setProduct(\"tshirt\");
e1311.setCustomer(\"Alice\");
e1311.setAddress(\"Wonderland 1\");
publish(e1311);
waitForEvent(\"13:11\");

// check Shop
open(\"http://localhost:42100\");
for (DataEvent dataEvent : shop.getBuilder().getEventStore().values()) {
   shop.getBuilder().load(dataEvent.getBlockId());
}
modelMap = shop.getBuilder().getModel().getModelMap();
if (modelMap.values().size() > 0) {
   org.fulib.FulibTools.objectDiagrams().dumpSVG(\"tmp/shop13_11.svg\", modelMap.values());
}

open(\"http://localhost:42100\");
// check data note 13:16
OrderBuilt e13_16 = (OrderBuilt) waitForEvent(\"13:16\");
assertThat(e13_16.getState()).isEqualTo(\"out of stock\");

// check Storage
open(\"http://localhost:42002\");
for (DataEvent dataEvent : storage.getBuilder().getEventStore().values()) {
   storage.getBuilder().load(dataEvent.getBlockId());
}
modelMap = storage.getBuilder().getModel().getModelMap();
if (modelMap.values().size() > 0) {
   org.fulib.FulibTools.objectDiagrams().dumpSVG(\"tmp/storage13_11.svg\", modelMap.values());
}

open(\"http://localhost:42002\");
try {
   Thread.sleep(3000);
} catch (Exception e) {
}
eventBroker.stop();
spark.stop();
shop.stop();
storage.stop();

System.err.println(\"SomeEventStorming completed good and gracefully\");
"
  modified: 	false
  modifiers: 	public
  name: 	SomeEventStorming
  paramsString: 	""
  returnType: 	void
  signature: 	"class/TestSomeEventStorming/method/SomeEventStorming()"

- testSomeEventStorming_publish: 	org.fulib.classmodel.FMethod
  annotations: 	""
  clazz: 	testSomeEventStorming
  declaration: 	"public void publish(Event event)"
  id: 	TestSomeEventStorming_publish
  methodBody: 	"String yaml = Yaml.encodeSimple(event);

try {
   HttpResponse<String> response = Unirest.post(\"http://localhost:42000/publish\")
         .body(yaml)
         .asString();
         Thread.sleep(200);
}
catch (Exception e) {
   e.printStackTrace();
}"
  modified: 	false
  modifiers: 	public
  name: 	publish
  paramsString: 	"Event event"
  returnType: 	void
  signature: 	"class/TestSomeEventStorming/method/publish(Event)"

