
delimiters "%", "%"

startEventBroker() ::= <<
// start the event broker
eventBroker = new EventBroker();
eventBroker.start();

>>

publishBody() ::= <<
String yaml = Yaml.encodeSimple(event);

try {
   HttpResponse<String> response = Unirest.post("http://localhost:42000/publish")
         .body(yaml)
         .asString();
}
catch (UnirestException e) {
   e.printStackTrace();
}
>>


serviceGetHelloBody(name) ::= <<
try {
   String events = Yaml.encodeSimple(getHistory().values().toArray());
   String objects = Yaml.encodeSimple(model.getModelMap().values().toArray());
   return "<p id='%name%'>This is the %name% service. </p>\n" +
         "<pre id=\"history\">" + events + "</pre>\n" +
         "<pre id=\"data\">" + objects + "</pre>\n" +
         "";
}
catch (Exception e) {
   Logger.getGlobal().log(Level.SEVERE, e.getMessage(), e);
   return "%name% Error " + e.getMessage();
}

>>


serviceSubscribeAndLoadOldEvents(port) ::= <<
ServiceSubscribed serviceSubscribed = new ServiceSubscribed()
      .setServiceUrl(String.format("http://localhost:\%d/apply", port));
String json = Yaml.encodeSimple(serviceSubscribed);
try {
   String url = "http://localhost:42000/subscribe";
   HttpResponse<String> response = Unirest
         .post(url)
         .body(json)
         .asString();
   String body = response.getBody();
   YamlIdMap idMap = new YamlIdMap(Event.class.getPackageName());
   idMap.decode(body);
   Map<String, Object> objectMap = idMap.getObjIdMap();
   for (Object obj : objectMap.values()) {
      apply((Event) obj);
   }
}
catch (UnirestException e) {
   e.printStackTrace();
}
>>


serviceApply() ::= <<
if (history.get(event.getId()) != null) {
   return;
}
businessLogic.initEventHandlerMap();
Consumer<Event> handler = businessLogic.getHandler(event);
handler.accept(event);
history.put(event.getId(), event);
firePropertyChange(PROPERTY_HISTORY, null, event);
publish(event);
>>


serviceGetPage(eventHandling, content) ::= <<
StringBuilder html = new StringBuilder();
String id = request.params("id");
String event = request.queryParams("event");

%eventHandling%

%content%

html.append("This is the Shop Service page " + id + "\n");
return html.toString();
>>


servicePublish() ::= <<
String json = Yaml.encodeSimple(event);

try {
   HttpResponse<String> response = Unirest
         .post("http://localhost:42000/publish")
         .body(json)
         .asString();
}
catch (UnirestException e) {
   e.printStackTrace();
}
>>


servicePostApply() ::=
<<
      String body = req.body();
      try {
         YamlIdMap idMap = new YamlIdMap(Event.class.getPackageName());
         idMap.decode(body);
         Map<String, Object> map = idMap.getObjIdMap();
         for (Object value : map.values()) {
            Event event = (Event) value;
            apply(event);
         }
      }
      catch (Exception e) {
         String message = e.getMessage();
         if (message.contains("ReflectorMap could not find class description")) {
            Logger.getGlobal().info("post apply ignores unknown event " + body);
         }
         else {
            Logger.getGlobal().log(Level.SEVERE, "postApply failed", e);
         }
      }
      return "apply done";
>>

stripBrackets() ::=
<<
      if (back == null) {
         return "";
      }
      int open = back.indexOf('[');
      int close = back.indexOf(']');
      if (open >= 0 && close >= 0) {
         back = back.substring(open + 1, close);
      }
      return back;
>>

builderOutdated() ::=
<<
      DataEvent oldEvent = getEventStore().get(event.getBlockId());

      if (oldEvent == null) {
         eventStore.put(event.getBlockId(), event);
         return false;
      }

      if (oldEvent.getId().compareTo(event.getId()) < 0) {
         eventStore.put(event.getBlockId(), event);
         return false;
      }

      return true;
>>

builderLoad() ::=
<<
      DataEvent dataEvent = eventStore.get(blockId);
      if (dataEvent == null) {
         return null;
      }

      initLoaderMap();
      Function<Event, Object> loader = loaderMap.get(dataEvent.getClass());
      Object object = loader.apply(dataEvent);

      LinkedHashMap<String, DataEvent> group = groupStore.computeIfAbsent(blockId, k -> new LinkedHashMap<>());
      for (DataEvent element : group.values()) {
         loader = loaderMap.get(element.getClass());
         loader.apply(element);
      }

      return object;
>>

builderAddToGroup() ::=
<<
      DataEvent dataEvent = eventStore.get(elementId);

      if (dataEvent == null) {
         java.util.logging.Logger.getGlobal().severe(String.format("could not find element event \%s for group \%s ", elementId, groupId));
         return;
      }

      LinkedHashMap<String, DataEvent> group = groupStore.computeIfAbsent(groupId, k -> new LinkedHashMap<>());
      group.put(elementId, dataEvent);
>>

builderGetObjectId() ::=
<<
      if (value == null) {
         return null;
      }
      return value.replaceAll("\\\\W+", "_");
>>

serviceQuery() ::=
<<
      DataEvent dataEvent = getBuilder().getEventStore().get(query.getKey());

      if (dataEvent == null) {
         return query;
      }

      if (dataEvent instanceof DataGroup) {
         DataGroup group = (DataGroup) dataEvent;
         query.withResults(group.getElements());
      }
      else {
         query.withResults(dataEvent);
      }

      return query;
>>
