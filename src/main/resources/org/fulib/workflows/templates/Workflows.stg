
delimiters "%", "%"

startEventBroker() ::= <<
// start the event broker
eventBroker = new EventBroker();
eventBroker.start();

>>

publishBody() ::= <<
String yaml = Yaml.encode(event);

try {
   HttpResponse<String> response = Unirest.post("http://localhost:42000/publish")
         .body(yaml)
         .asString();
}
catch (UnirestException e) {
   e.printStackTrace();
}
>>


serviceGetHelloBody(name) ::= <<
try {
   String events = Yaml.encode(getHistory().values().toArray());
   String objects = Yaml.encode(model.getModelMap().values().toArray());
   return "<p id='%name%'>This is the %name% service. </p>\n" +
         "<pre id=\"history\">" + events + "</pre>\n" +
         "<pre id=\"data\">" + objects + "</pre>\n" +
         "";
}
catch (Exception e) {
   Logger.getGlobal().log(Level.SEVERE, e.getMessage(), e);
   return "%name% Error " + e.getMessage();
}

>>


serviceSubscribeAndLoadOldEvents(port) ::= <<
ServiceSubscribed serviceSubscribed = new ServiceSubscribed()
      .setServiceUrl("http://localhost:%port%/apply");
String json = Yaml.encode(serviceSubscribed);
try {
   String url = "http://localhost:42000/subscribe";
   HttpResponse<String> response = Unirest
         .post(url)
         .body(json)
         .asString();
   String body = response.getBody();
   Map<String, Object> objectMap = Yaml.decode(body);
   for (Object obj : objectMap.values()) {
      apply((Event) obj);
   }
}
catch (UnirestException e) {
   e.printStackTrace();
}
>>


serviceApply() ::= <<
if (history.get(event.getId()) != null) {
   return;
}
initEventHandlerMap();
Consumer<Event> handler = handlerMap.computeIfAbsent(event.getClass(), k -> this::ignoreEvent);
handler.accept(event);
history.put(event.getId(), event);
publish(event);
>>


serviceGetPage(eventHandling, content) ::= <<
StringBuilder html = new StringBuilder();
String id = request.params("id");
String event = request.queryParams("event");

%eventHandling%

%content%

html.append("This is the Shop Service page " + id + "\n");
return html.toString();
>>


servicePublish() ::= <<
String json = Yaml.encode(event);

try {
   HttpResponse<String> response = Unirest
         .post("http://localhost:42000/publish")
         .body(json)
         .asString();
}
catch (UnirestException e) {
   e.printStackTrace();
}
>>


servicePostApply() ::=
<<
      try {
         String body = req.body();
         Map<String, Object> map = Yaml.decode(body);
         for (Object value : map.values()) {
            Event event = (Event) value;
            apply(event);
         }
      }
      catch (Exception e) {
         Logger.getGlobal().log(Level.SEVERE, "postApply failed", e);
      }
      return "apply done";
>>

stripBrackets() ::=
<<
      if (back == null) {
         return "";
      }
      int open = back.indexOf('[');
      int close = back.indexOf(']');
      if (open >= 0 && close >= 0) {
         back = back.substring(open + 1, close);
      }
      return back;
>>
